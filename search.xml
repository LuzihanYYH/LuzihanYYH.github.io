<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【CPP】C++的boost学习-字符串的处理</title>
      <link href="/2020/10/30/C++Boost/"/>
      <url>/2020/10/30/C++Boost/</url>
      
        <content type="html"><![CDATA[<p>学习C++的boost库,了解其中的一些方法</p><a id="more"></a><h2 id="boost库的学习"><a href="#boost库的学习" class="headerlink" title="boost库的学习"></a>boost库的学习</h2><h3 id="学习字符串处理"><a href="#学习字符串处理" class="headerlink" title="学习字符串处理"></a>学习字符串处理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//学习字符串处理</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/algorithm/string.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World!\n"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="comment">//使用boost库,将字符串转为大写</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; boost::algorithm::to_upper_copy(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用STL标准算法库,将字符串转为大写</span></span><br><span class="line">transform(s.begin(), s.end(), s.begin(), towupper);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除出现的第一个"O"</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; boost::algorithm::erase_first_copy(s, "O") &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除第二个出现的"O",索引是1</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; boost::algorithm::erase_nth_copy(s, "O", 1) &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除所有的"O"</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; boost::algorithm::erase_all_copy(s, "O") &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//auto r = boost::algorithm::find_first(s, "WO");</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; r &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将第一个出现的"O"替换成"o"</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; boost::algorithm::replace_first_copy(s, "O", "o") &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boost库将vector中的字符串拼接</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; v;</span><br><span class="line">v.push_back(<span class="string">"He"</span>);</span><br><span class="line">v.push_back(<span class="string">"LLO"</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; boost::algorithm::join(v, <span class="string">" "</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拼接char*</span></span><br><span class="line"><span class="keyword">char</span> S[<span class="number">50</span>] = <span class="string">"lubaobao"</span>;</span><br><span class="line"><span class="keyword">char</span> aa[<span class="number">8</span>] = <span class="string">" xihuan"</span>;</span><br><span class="line"><span class="keyword">char</span> bb[<span class="number">10</span>] = <span class="string">" fujunjun"</span>;</span><br><span class="line"><span class="comment">//sprintf(S, "%s%s%s", S, aa, bb);</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; S &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">strcat</span>(S, aa);</span><br><span class="line"><span class="built_in">strcat</span>(S, bb);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; S &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//string的拼接</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> aaa = <span class="string">"lubaobao"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> bbb = <span class="string">" xihuan"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> ccc = <span class="string">" fujunjun"</span>;</span><br><span class="line">aaa.append(bbb);</span><br><span class="line">aaa.append(ccc);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; aaa &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断字符串中是否含有子串</span></span><br><span class="line"><span class="keyword">bool</span> res = boost::algorithm::contains(s, <span class="string">"HE"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="学习文件系统"><a href="#学习文件系统" class="headerlink" title="学习文件系统"></a>学习文件系统</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学习文件系统</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/filesystem.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">TransToG</span><span class="params">(<span class="keyword">double</span> kb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> kb / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">boost::<span class="function">filesystem::path <span class="title">path1</span><span class="params">(<span class="string">"C:\\Windows"</span>)</span></span>;</span><br><span class="line"><span class="comment">//boost::filesystem::path* path1 = new boost::filesystem::path("C:\\");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断path是不是目录</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; boost::filesystem::is_directory(path1) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">boost::filesystem::file_status filestatus = boost::filesystem::status(path1);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; boost::filesystem::is_directory(filestatus) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//获得文件的最后修改时间</span></span><br><span class="line">boost::<span class="function">filesystem::path <span class="title">path2</span><span class="params">(<span class="string">"C:\\Users\\29572\\Desktop\\vsbg.jpg"</span>)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">time_t</span> time = boost::filesystem::last_write_time(path2);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ctime(&amp;time) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取磁盘空间信息</span></span><br><span class="line">boost::<span class="function">filesystem::path <span class="title">path3</span><span class="params">(<span class="string">"C:\\"</span>)</span></span>;</span><br><span class="line">boost::filesystem::space_info pathinfo = boost::filesystem::space(path3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置小数精度</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setiosflags(<span class="built_in">std</span>::ios::fixed) &lt;&lt; <span class="built_in">std</span>::setprecision(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TransToG(pathinfo.capacity) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TransToG(pathinfo.<span class="built_in">free</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; TransToG(pathinfo.available) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取程序当前目录</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; boost::filesystem::current_path() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (boost::filesystem::filesystem_error e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="学习智能指针"><a href="#学习智能指针" class="headerlink" title="学习智能指针"></a>学习智能指针</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学习智能指针</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window_Handle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Window_Handle(HANDLE h) :_handle(h)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~Window_Handle()</span><br><span class="line">&#123;</span><br><span class="line">CloseHandle(_handle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Window_Handle(<span class="keyword">const</span> Window_Handle* data)</span><br><span class="line">&#123;</span><br><span class="line">_handle = data-&gt;_handle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过成员函数访问到private的成员变量</span></span><br><span class="line"><span class="function">HANDLE <span class="title">handle</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _handle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">HANDLE _handle;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过 OpenProcess() 打开的资源不需要显示的调用 CloseHandle() 来关闭。</span></span><br><span class="line"><span class="comment">//当然，应用程序终止时资源也会随之关闭。 </span></span><br><span class="line"><span class="comment">//然而，在更加复杂的应用程序里， windows_handle 类确保当一个资源不再使用时就能正确的关闭。 </span></span><br><span class="line"><span class="comment">//某个资源一旦离开了它的作用域——上例中 h 的作用域在 main() 函数的末尾——它的析构函数会被自动的调用，</span></span><br><span class="line"><span class="comment">//相应的资源也就释放掉了</span></span><br><span class="line"><span class="function">Window_Handle <span class="title">h</span><span class="params">(OpenProcess(PROCESS_SET_INFORMATION, <span class="literal">false</span>, GetCurrentProcessId()))</span></span>;</span><br><span class="line"><span class="comment">//_handle不可访问,需要通过成员函数访问</span></span><br><span class="line">SetPriorityClass(h.handle(), HIGH_PRIORITY_CLASS);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">auto_ptr</span>&lt;<span class="built_in">string</span>&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">"lubaobao love fujunjun"</span>))</span></span>;</span><br><span class="line"><span class="built_in">auto_ptr</span>&lt;<span class="built_in">string</span>&gt; p2;</span><br><span class="line"></span><br><span class="line">p2 = p1;</span><br><span class="line"><span class="comment">//此时,p1的所有权已被剥夺,p1变为empty,访问p1会报错</span></span><br><span class="line"><span class="comment">//p1-&gt;append(" heihei");</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt; <span class="title">p3</span><span class="params">(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">"lubaobao"</span>))</span></span>;</span><br><span class="line"><span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt; p4;</span><br><span class="line"><span class="comment">//此时编译器会报错(尝试引用已删除的函数),因为p3、p4是单独占用模式</span></span><br><span class="line"><span class="comment">//p3 = p4;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//但如果是临时右值,编译器允许</span></span><br><span class="line">p3 = <span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt;(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">"fujunjun"</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> tmp = <span class="string">"luzihan is lubaobao"</span>;</span><br><span class="line"><span class="function"><span class="built_in">shared_ptr</span>&lt;<span class="built_in">string</span>&gt; <span class="title">p5</span><span class="params">(&amp;tmp)</span></span>;</span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="built_in">string</span>&gt; p6;</span><br><span class="line">p6 = p5;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p5.use_count() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p6.use_count() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p5.unique() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">shared_ptr</span>&lt;<span class="built_in">string</span>&gt; <span class="title">p7</span><span class="params">(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">"yanyunhao is funjunjun"</span>))</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p5.get() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p7.get() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">swap(p5, p7);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p5.get() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p7.get() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p5.use_count() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p6.use_count() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">p6 = p5;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p5.use_count() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p6.use_count() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在VS 2017以上版本,将引用计数置为0</span></span><br><span class="line">p5.reset();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p5.use_count() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p6.use_count() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="一个简单理解多态的Demo"><a href="#一个简单理解多态的Demo" class="headerlink" title="一个简单理解多态的Demo"></a>一个简单理解多态的Demo</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个简单理解多态的Demo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">softbanker</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">softbanker()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span><span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"save money"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">softbanker1</span> :</span><span class="keyword">public</span> softbanker</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"take money"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">softbanker2</span> :</span><span class="keyword">public</span> softbanker</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"change money"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">softbanker* sbanker = <span class="keyword">new</span> softbanker();</span><br><span class="line">sbanker-&gt;DoSomething();</span><br><span class="line"></span><br><span class="line">sbanker = <span class="keyword">new</span> softbanker1();</span><br><span class="line">sbanker-&gt;DoSomething();</span><br><span class="line"></span><br><span class="line">sbanker = <span class="keyword">new</span> softbanker2();</span><br><span class="line">sbanker-&gt;DoSomething();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> sbanker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="学习函数对象"><a href="#学习函数对象" class="headerlink" title="学习函数对象"></a>学习函数对象</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学习函数对象</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for_each中要求的函数仅能接受一个参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i + j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Compare</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> i &lt; j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">add</span> :</span><span class="keyword">public</span> binary_function&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">void</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i + j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;;</span><br><span class="line"><span class="comment">//for_each(v.begin(), v.end(), Print);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历打印v中的每个数+10</span></span><br><span class="line">for_each(v.begin(), v.end(), bind1st(add(), <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用boost库中的bind方法</span></span><br><span class="line"><span class="comment">//_1,_2,_3这些都是占位符,Add是二元函数,传入参数10 ,_1将v数组中的元素传入</span></span><br><span class="line">for_each(v.begin(), v.end(), boost::bind(Add, <span class="number">10</span>, _1));</span><br><span class="line"></span><br><span class="line">swap(v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">for_each(v.begin(), v.end(), Print);</span><br><span class="line"><span class="comment">//Compare是一个二元函数,_1,_2一次传入v数组中两个数</span></span><br><span class="line">sort(v.begin(), v.end(), boost::bind(Compare, _1, _2));</span><br><span class="line">for_each(v.begin(), v.end(), Print);</span><br><span class="line"></span><br><span class="line"><span class="comment">//不像for_each只能使用一元函数作为参数</span></span><br><span class="line"><span class="comment">//sort中的比较方法可以是多元,上面的bind方法其实不需要</span></span><br><span class="line">sort(v.begin(), v.end(), Compare);</span><br><span class="line"></span><br><span class="line"><span class="comment">//不需要改变Compare的定义,就可以改变是升序还是降序</span></span><br><span class="line">sort(v.begin(), v.end(), boost::bind(Compare, _2, _1));</span><br><span class="line">for_each(v.begin(), v.end(), Print);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="学习事件处理"><a href="#学习事件处理" class="headerlink" title="学习事件处理"></a>学习事件处理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学习事件处理</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/signals2.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为了将信号槽函数的返回值写出至标准输出流</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/optional/optional_io.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Func1 Called"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Func3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> my_max_element</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">max_element</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">typedef</span> T result_type;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIterator&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//max_element的返回值为_Fwdlt</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="function">T <span class="title">operator</span><span class="params">()</span><span class="params">(InputIterator first, InputIterator last)</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="built_in">std</span>::max_element(first, last);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function">T <span class="title">operator</span><span class="params">()</span><span class="params">(InputIterator first, InputIterator last)</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> T(first, last);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">boost::signals2::signal&lt;<span class="keyword">void</span>()&gt; sig;</span><br><span class="line"><span class="comment">//sig.connect(Func);</span></span><br><span class="line"><span class="comment">//sig.connect(Func1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重载方式指定执行顺序</span></span><br><span class="line">sig.connect(<span class="number">1</span>, Func);</span><br><span class="line">sig.connect(<span class="number">0</span>, Func1);</span><br><span class="line">sig();</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放与绑定信号的关联</span></span><br><span class="line">sig.disconnect(Func1);</span><br><span class="line">sig();</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除所有关联的信号</span></span><br><span class="line">sig.disconnect_all_slots();</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数被关联至信号执行后的返回值会被覆盖,只保留最后一个</span></span><br><span class="line"><span class="comment">//注意signal&lt;&gt;函数的返回值类型</span></span><br><span class="line">boost::signals2::signal&lt;<span class="keyword">int</span>()&gt; new_sig;</span><br><span class="line">new_sig.connect(Func3);</span><br><span class="line">new_sig.connect(Func2);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; new_sig() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保留每个返回值,重载()操作符,返回最大的其中一个返回值</span></span><br><span class="line"><span class="comment">//boost::signals2::signal&lt;int(), my_max_element::max_element&lt;int&gt;&gt; max_sig;</span></span><br><span class="line">boost::signals2::signal&lt;<span class="keyword">int</span>(), my_max_element::max_element&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; max_sig;</span><br><span class="line">max_sig.connect(Func3);</span><br><span class="line">max_sig.connect(Func2);</span><br><span class="line"><span class="comment">//cout &lt;&lt; max_sig() &lt;&lt; endl;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sig_return_value;</span><br><span class="line">sig_return_value = max_sig();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : sig_return_value)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="学习多线程"><a href="#学习多线程" class="headerlink" title="学习多线程"></a>学习多线程</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学习多线程</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Wait</span><span class="params">(<span class="keyword">int</span> seconds)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//sleep函数区别于Sleep,位于this_thread命名空间</span></span><br><span class="line"><span class="comment">//seconds函数用于获得一个精确的时间,位于boost库的DateTime</span></span><br><span class="line">boost::this_thread::sleep(boost::posix_time::seconds(seconds));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">boost::mutex mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Thread_thread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">Wait(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//mutex.lock();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//lock_guard类的构造函数中自动调用lock()</span></span><br><span class="line"><span class="comment">//lock_guard类的析构函数中自动调用unlock()</span></span><br><span class="line"><span class="function">boost::lock_guard&lt;boost::mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//mutex.unlock();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//lock_guard的生命周期为for循环进入到结束</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; boost::this_thread::get_id() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中断后会抛出一个thread_interrupted异常</span></span><br><span class="line"><span class="keyword">catch</span> (boost::thread_interrupted&amp;)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">boost::timed_mutex mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Thread_thread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">Wait(<span class="number">1</span>);</span><br><span class="line"><span class="function">boost::unique_lock&lt;boost::timed_mutex&gt; <span class="title">lock</span><span class="params">(mutex, boost::try_to_lock)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!lock.owns_lock())</span><br><span class="line">lock.timed_lock(boost::get_system_time() + boost::posix_time::seconds(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; boost::this_thread::get_id() &lt;&lt; <span class="string">": "</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">boost::timed_mutex* m = lock.release();</span><br><span class="line">m-&gt;unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; random_numbers;</span><br><span class="line">boost::shared_mutex shared_mutex;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fill</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::srand(<span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;(<span class="built_in">std</span>::time(<span class="number">0</span>)));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//这里改变了random_numers的内容,需要独占资源,使用独占锁</span></span><br><span class="line"><span class="function">boost::unique_lock&lt;boost::shared_mutex&gt; <span class="title">lock</span><span class="params">(shared_mutex)</span></span>;</span><br><span class="line">random_numbers.push_back(<span class="built_in">std</span>::rand());</span><br><span class="line"></span><br><span class="line"><span class="comment">//独占锁需要显式调用unlock</span></span><br><span class="line">lock.unlock();</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待时间放在最后为了确保random_numbers里至少有一个数据</span></span><br><span class="line">Wait(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">Wait(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//虽然写到了标准输出,但是不操作random_numbers,所以可以共享互斥体</span></span><br><span class="line"><span class="function">boost::shared_lock&lt;boost::shared_mutex&gt; <span class="title">lock</span><span class="params">(shared_mutex)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; random_numbers.back() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">boost::mutex r_mutex;</span><br><span class="line">boost::condition_variable_any condition;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fill</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::srand(<span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt; (<span class="built_in">std</span>::time(<span class="number">0</span>)));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">boost::unique_lock&lt;boost::mutex&gt; <span class="title">lock</span><span class="params">(r_mutex)</span></span>;</span><br><span class="line">random_numbers.push_back(<span class="built_in">std</span>::rand());</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据放完后,size相等,跳出循环,唤醒wait线程</span></span><br><span class="line">condition.notify_all();</span><br><span class="line"></span><br><span class="line"><span class="comment">//这边进入等待,直到print出数据,size增加,唤醒这边的wait</span></span><br><span class="line">condition.wait(r_mutex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">size_t</span> next_size = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">boost::unique_lock&lt;boost::mutex&gt; <span class="title">lock</span><span class="params">(r_mutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据没拿到一直wait</span></span><br><span class="line"><span class="keyword">while</span> (random_numbers.size() != next_size)</span><br><span class="line">condition.wait(r_mutex);</span><br><span class="line"></span><br><span class="line"><span class="comment">//size相等,被唤醒</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; random_numbers.back() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">++next_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//唤醒插入数据的线程的wait</span></span><br><span class="line">condition.notify_all();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">Wait(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//只有读操作,</span></span><br><span class="line"><span class="function">boost::shared_lock&lt;boost::shared_mutex&gt; <span class="title">lock</span><span class="params">(shared_mutex)</span></span>;</span><br><span class="line">sum += random_numbers.back();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">//静态变量done,srand执行了只一次,生成的随机数2/3是同一个</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//第二次进来done已经变成true了</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> done = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!done)</span><br><span class="line">&#123;</span><br><span class="line">done = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">std</span>::srand(<span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;(<span class="built_in">std</span>::time(<span class="number">0</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同一时间完成初始化的话,随机数还是有可能一样</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">boost::thread_specific_ptr&lt;<span class="keyword">bool</span>&gt; tls;</span><br><span class="line"><span class="keyword">if</span> (!tls.get())</span><br><span class="line"><span class="comment">//reset参数是指针,C++ 的new出来的是指针,C# 的new出来的是对象</span></span><br><span class="line">tls.reset(<span class="keyword">new</span> <span class="keyword">bool</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="keyword">if</span> (!*tls)</span><br><span class="line">&#123;</span><br><span class="line">*tls = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">std</span>::srand(<span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;(<span class="built_in">std</span>::time(<span class="number">0</span>)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenerateNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">InitNumber();</span><br><span class="line"><span class="keyword">int</span> i = <span class="built_in">std</span>::rand();</span><br><span class="line"><span class="function">boost::unique_lock&lt;boost::mutex&gt; <span class="title">lock</span><span class="params">(r_mutex)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="function">boost::thread <span class="title">t</span><span class="params">(Thread_thread)</span></span>;</span><br><span class="line">Wait(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得当前线程的线程ID</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; boost::this_thread::get_id() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3秒后t线程被终止,打印结果为1,2,3</span></span><br><span class="line">t.interrupt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//join的作用是阻塞调用,直到调用join的线程运行结束</span></span><br><span class="line">t.join();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">//如果函数内不加mutex,可能输出如下:</span></span><br><span class="line"><span class="comment">//11</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//如果函数内加mutex,输出如下:</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="function">boost::thread <span class="title">t1</span><span class="params">(Thread_thread)</span></span>;</span><br><span class="line"><span class="function">boost::thread <span class="title">t2</span><span class="params">(Thread_thread)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="function">boost::thread <span class="title">thread1</span><span class="params">(Fill)</span></span>;</span><br><span class="line"><span class="function">boost::thread <span class="title">thread2</span><span class="params">(Print)</span></span>;</span><br><span class="line"><span class="comment">//boost::thread thread3(Sum);</span></span><br><span class="line"></span><br><span class="line">thread1.join();</span><br><span class="line">thread2.join();</span><br><span class="line"><span class="comment">//thread3.join();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">boost::thread thread[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">thread[i] = boost::thread(GenerateNumber);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">thread[i].join();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="学习异步输入输出"><a href="#学习异步输入输出" class="headerlink" title="学习异步输入输出"></a>学习异步输入输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学习异步输入输出</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">boost::asio::io_service service;</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数好像必须要传一个boost库提供的错误码(引用类型)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Async_Cout</span><span class="params">(<span class="keyword">const</span> boost::system::error_code&amp; ec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"lubaobao shigezhu"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Async_Cout1</span><span class="params">(<span class="keyword">const</span> boost::system::error_code&amp; ec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"lubaobao nengchi nengshui"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Myrun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">service.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">boost::<span class="function">asio::deadline_timer <span class="title">timer</span><span class="params">(service, boost::posix_time::seconds(<span class="number">5</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">timer.async_wait(Async_Cout);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"async is right"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里调用的run是阻塞式的,如果不是阻塞的,main函数结束调用后程序退出会把异步的方法中断掉</span></span><br><span class="line">service.run();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">boost::<span class="function">asio::deadline_timer <span class="title">timer1</span><span class="params">(service, boost::posix_time::seconds(<span class="number">5</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">timer.async_wait(Async_Cout);</span><br><span class="line">timer1.async_wait(Async_Cout1);</span><br><span class="line"></span><br><span class="line"><span class="function">boost::thread <span class="title">thread1</span><span class="params">(Myrun)</span></span>;</span><br><span class="line"><span class="function">boost::thread <span class="title">thread2</span><span class="params">(Myrun)</span></span>;</span><br><span class="line">thread1.join();</span><br><span class="line">thread2.join();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="学习boost的网络编程-未完"><a href="#学习boost的网络编程-未完" class="headerlink" title="学习boost的网络编程(未完)"></a>学习boost的网络编程(未完)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学习boost的网络编程(未完)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/array.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">boost::asio::io_service io_service;<span class="comment">//io对象</span></span><br><span class="line">boost::asio::ip::<span class="function">tcp::resolver <span class="title">resolver</span><span class="params">(io_service)</span></span>;<span class="comment">//解析器</span></span><br><span class="line">boost::asio::ip::<span class="function">tcp::socket <span class="title">sock</span><span class="params">(io_service)</span></span>;<span class="comment">//socket对象</span></span><br><span class="line">boost::<span class="built_in">array</span>&lt;<span class="keyword">char</span>, 4096&gt; buffer;<span class="comment">//缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Read_Handler</span><span class="params">(<span class="keyword">const</span> boost::system::error_code&amp; ec, <span class="built_in">std</span>::<span class="keyword">size_t</span> bytes_transferred)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!ec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">string</span>(buffer.data(), bytes_transferred) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">sock.async_read_some(boost::asio::buffer(buffer), Read_Handler);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Connect_Handler</span><span class="params">(<span class="keyword">const</span> boost::system::error_code&amp; ec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!ec)</span><br><span class="line">&#123;</span><br><span class="line">boost::asio::write(sock, boost::asio::buffer(<span class="string">"GET / HTTP 1.1\r\nHost: baidu.com\r\n\r\n"</span>));</span><br><span class="line">sock.async_read_some(boost::asio::buffer(buffer), Read_Handler);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Resolve_Handler</span><span class="params">(<span class="keyword">const</span> boost::system::error_code&amp; ec, boost::asio::ip::tcp::resolver::iterator it)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!ec)</span><br><span class="line">&#123;</span><br><span class="line">sock.async_connect(*it, Connect_Handler);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">boost::asio::ip::tcp::<span class="function">resolver::query <span class="title">query</span><span class="params">(<span class="string">"www.baidu.com"</span>, <span class="string">"8080"</span>)</span></span>;</span><br><span class="line">resolver.async_resolve(query, Resolve_Handler);</span><br><span class="line">io_service.run();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="学习进程间通讯"><a href="#学习进程间通讯" class="headerlink" title="学习进程间通讯"></a>学习进程间通讯</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学习进程间通讯</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/interprocess/shared_memory_object.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/interprocess/mapped_region.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/interprocess/windows_shared_memory.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/interprocess/managed_shared_memory.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/interprocess/containers/string.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/interprocess/allocators/allocator.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/interprocess/sync/named_mutex.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line">boost::interprocess::managed_shared_memory* atomic_sharedmemory;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Construct_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">atomic_sharedmemory-&gt;construct&lt;<span class="keyword">int</span>&gt;(<span class="string">"Integer_1"</span>)(<span class="number">37</span>);</span><br><span class="line">atomic_sharedmemory-&gt;construct&lt;<span class="keyword">float</span>&gt;(<span class="string">"Float_1"</span>)(<span class="number">37.13</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> (*pf)();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//boost提供的共享内存类，第一个参数指定存在时打开，不存在就创建，第二个参数是共享内存的名字，第三个参数指定共享内存是否可读可写</span></span><br><span class="line">boost::<span class="function">interprocess::shared_memory_object <span class="title">shared_memeroy</span><span class="params">(boost::interprocess::open_or_create, <span class="string">"lubaobao"</span>, boost::interprocess::read_write)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//申请共享内存的大小,如果共享内存不是可读可写状态下使用会抛出异常</span></span><br><span class="line">shared_memeroy.truncate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取共享内存的名字</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; shared_memeroy.get_name() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">boost::interprocess::<span class="keyword">offset_t</span> size;</span><br><span class="line"><span class="keyword">if</span> (shared_memeroy.get_size(size))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; size &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同一个共享内存,映射两个map,地址不同,大小一样</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">boost::<span class="function">interprocess::mapped_region <span class="title">region1</span><span class="params">(shared_memeroy, boost::interprocess::read_write)</span></span>;</span><br><span class="line"><span class="comment">//hex用来进行十六进制表示,十进制输出</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::hex &lt;&lt; <span class="string">"0x"</span> &lt;&lt; region1.get_address() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::dec &lt;&lt; region1.get_size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dec用来进行八进制表示,十进制输出</span></span><br><span class="line">boost::<span class="function">interprocess::mapped_region <span class="title">region2</span><span class="params">(shared_memeroy, boost::interprocess::read_write)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::hex &lt;&lt; <span class="string">"0x"</span> &lt;&lt; region2.get_address() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::dec &lt;&lt; region2.get_size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">boost::<span class="function">interprocess::mapped_region <span class="title">region1</span><span class="params">(shared_memeroy, boost::interprocess::read_write)</span></span>;</span><br><span class="line">boost::<span class="function">interprocess::mapped_region <span class="title">region2</span><span class="params">(shared_memeroy, boost::interprocess::read_only)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//区域1的开头被写入数字37</span></span><br><span class="line"><span class="keyword">int</span>* it1 = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>*&gt;(region1.get_address());</span><br><span class="line">*it1 = <span class="number">37</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取区域2开头位置,内容也是37</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个区域其实访问的是同一块共享内存</span></span><br><span class="line"><span class="keyword">int</span>* it2 = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>*&gt;(region2.get_address());</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *it2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//remove函数用来删除开辟出的共享内存,位于shared_memory_object命名空间内,重新启动后会自动删除,windows情况下不会删除,所以windows下必须remove</span></span><br><span class="line"><span class="keyword">bool</span> remove = boost::interprocess::shared_memory_object::remove(<span class="string">"lubaobao"</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; remove &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//windows专用的共享内存类,第四个参数为共享内存的大小,最后一个程序终止后会自动删除</span></span><br><span class="line">boost::<span class="function">interprocess::windows_shared_memory <span class="title">windows_sharedmemory</span><span class="params">(boost::interprocess::open_or_create, <span class="string">"fujunjun"</span>, boost::interprocess::read_write, <span class="number">1024</span>)</span></span>;</span><br><span class="line">boost::interprocess::shared_memory_object::remove(<span class="string">"fujunjun"</span>);</span><br><span class="line"></span><br><span class="line">boost::interprocess::shared_memory_object::remove(<span class="string">"lubaobao"</span>);</span><br><span class="line"><span class="comment">//不需要指定是否可读可写</span></span><br><span class="line">boost::<span class="function">interprocess::managed_shared_memory <span class="title">managed_sharedmemory</span><span class="params">(boost::interprocess::open_or_create, <span class="string">"lubaobao"</span>, <span class="number">1024</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//construct后必须指定类型</span></span><br><span class="line"><span class="keyword">int</span>* i = managed_sharedmemory.construct&lt;<span class="keyword">int</span>&gt;(<span class="string">"Integer"</span>)(<span class="number">80</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//find方法作用是在共享内存中找到名为Integer的变量,返回类型是pair</span></span><br><span class="line"><span class="comment">//pair是将两个(不同类型)数据组合成一个数据,通常在函数需要返回两个数据时使用,数组也可以返回多个数据但是类型必须一致</span></span><br><span class="line"><span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>*, <span class="built_in">std</span>::<span class="keyword">size_t</span>&gt; pair = managed_sharedmemory.find&lt;<span class="keyword">int</span>&gt;(<span class="string">"Integer"</span>);</span><br><span class="line"><span class="keyword">if</span> (pair.first)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; pair.first &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *pair.first &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//second用于判断申请出的是变量还是数组,如果是变量second为1,如果是数组,second是数组元素的个数,所有元素都被初始化为99</span></span><br><span class="line"><span class="keyword">int</span>* ii = managed_sharedmemory.construct&lt;<span class="keyword">int</span>&gt;(<span class="string">"Integer_array"</span>)[<span class="number">10</span>](<span class="number">99</span>);</span><br><span class="line">pair = managed_sharedmemory.find&lt;<span class="keyword">int</span>&gt;(<span class="string">"Integer_array"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pair.first)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *pair.first &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; pair.second &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果对象已存在,construct会失败,或者申请的数组长度大于共享内存的大小,会抛出bad alloc异常</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span>* iii = managed_sharedmemory.construct&lt;<span class="keyword">int</span>&gt;(<span class="string">"Integer_more"</span>)[<span class="number">4096</span>](<span class="number">99</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="keyword">const</span> boost::interprocess::bad_alloc&amp; ec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ec.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//destroy函数用于删除在共享内存中创建的对象,使用方法为 共享内存对象名+.访问</span></span><br><span class="line">managed_sharedmemory.destroy&lt;<span class="keyword">int</span>&gt;(<span class="string">"Integer_array"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果不重新find,pair不会更新</span></span><br><span class="line">pair = managed_sharedmemory.find&lt;<span class="keyword">int</span>&gt;(<span class="string">"Integer_array"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象已被删除,返回nullptr,不可以解引用</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; pair.first &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在共享内存上使用string</span></span><br><span class="line">boost::interprocess::shared_memory_object::remove(<span class="string">"lubaobao"</span>);</span><br><span class="line">boost::<span class="function">interprocess::managed_shared_memory <span class="title">str_sharedmemory</span><span class="params">(boost::interprocess::open_or_create, <span class="string">"luer"</span>, <span class="number">1024</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据boost库的提示,传入对应的参数</span></span><br><span class="line"><span class="keyword">typedef</span> boost::interprocess::allocator&lt;<span class="keyword">char</span>, boost::interprocess::managed_shared_memory::segment_manager&gt; CharAllocator;</span><br><span class="line"><span class="keyword">typedef</span> boost::interprocess::basic_string&lt;<span class="keyword">char</span>, <span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;, CharAllocator&gt; <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//find_or_construct函数作用是存在对象就找,不存在就构建&lt;&gt;中传入类型,最后一个()中第一个参数是内容,第二个参数是共享内存的段管理器</span></span><br><span class="line"><span class="built_in">string</span>* s = str_sharedmemory.find_or_construct&lt;<span class="built_in">string</span>&gt;(<span class="string">"Str"</span>)(<span class="string">"lu baobao love"</span>, str_sharedmemory.get_segment_manager());</span><br><span class="line">s-&gt;insert(<span class="number">14</span>, <span class="string">" fu jun jun"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *s &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用完必须清掉,否则会持续写入</span></span><br><span class="line">boost::interprocess::shared_memory_object::remove(<span class="string">"luer"</span>);</span><br><span class="line"></span><br><span class="line">atomic_sharedmemory = <span class="keyword">new</span> boost::interprocess::managed_shared_memory(boost::interprocess::open_or_create, <span class="string">"luer"</span>, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">pf = Construct_func;</span><br><span class="line"><span class="comment">//atomic_func的要求是无参,无返回值,所以使用boost库的bind方法把参数传递</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//但是,boost库提供的示例源码编译不过,尝试修改无果,将函数指针传入atomic_func,函数修改为无参,控制共享内存对象的指针操作</span></span><br><span class="line">atomic_sharedmemory-&gt;atomic_func(pf);</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *atomic_sharedmemory-&gt;find&lt;<span class="keyword">int</span>&gt;(<span class="string">"Integer_1"</span>).first &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *atomic_sharedmemory-&gt;find&lt;<span class="keyword">float</span>&gt;(<span class="string">"Float_1"</span>).first &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">boost::interprocess::shared_memory_object::remove(<span class="string">"luer"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//boost库中thread里的mutex同步方法,适用于同一进程,不同进程的数据同步需要使用nameed_mutex,此类位于interprocess/sync下</span></span><br><span class="line">boost::<span class="function">interprocess::managed_shared_memory <span class="title">mutex_sharedmemory</span><span class="params">(boost::interprocess::open_or_create, <span class="string">"luer"</span>, <span class="number">1024</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">//第一个参数指定打开/创建,第二个参数是锁的名字,知道锁名称的应用程序都能访问到锁</span></span><br><span class="line">boost::<span class="function">interprocess::named_mutex <span class="title">mutex</span><span class="params">(boost::interprocess::open_or_create, <span class="string">"mtx"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* iiii = mutex_sharedmemory.find_or_construct&lt;<span class="keyword">int</span>&gt;(<span class="string">"Mutex_Integer"</span>)();</span><br><span class="line"></span><br><span class="line">mutex.lock();</span><br><span class="line">++(*iiii);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *iiii &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">mutex.unlock();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//interprocess_mutex可以由共享内存对象构建出来,返回指针</span></span><br><span class="line">boost::interprocess::interprocess_mutex* mutex = mutex_sharedmemory.find_or_construct&lt;boost::interprocess::interprocess_mutex&gt;(<span class="string">"mtx"</span>)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* iiii = mutex_sharedmemory.find_or_construct&lt;<span class="keyword">int</span>&gt;(<span class="string">"Mutex_Integer"</span>)();</span><br><span class="line"></span><br><span class="line">mutex-&gt;lock();</span><br><span class="line">++(*iiii);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *iiii &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">mutex-&gt;unlock();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="学习boost的容器"><a href="#学习boost的容器" class="headerlink" title="学习boost的容器"></a>学习boost的容器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学习boost的容器</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#include &lt;boost/array.hpp&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/unordered_set.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/unordered_map.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/bimap.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/bimap/multiset_of.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是自定义的类型,boost不能识别,需要自己提供==运算符和hash_value函数计算哈希值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">person(<span class="built_in">std</span>::<span class="built_in">string</span> name, <span class="keyword">int</span> age) :_name(name), _age(age)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> person&amp; p)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> p._name == _name &amp;&amp; p._age == _age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//boost库示例代码为person const&amp; p,本质没有区别,个人习惯而已</span></span><br><span class="line"><span class="comment">//const放在指针左右才有区别,左值右向</span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">hash_value</span><span class="params">(<span class="keyword">const</span> person&amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> result = <span class="number">0</span>;</span><br><span class="line">boost::hash_combine(result, p._name);</span><br><span class="line">boost::hash_combine(result, p._age);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> _name;</span><br><span class="line"><span class="keyword">int</span> _age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="keyword">typedef</span> boost::<span class="built_in">array</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, 3&gt; <span class="built_in">array</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++初始化方式</span></span><br><span class="line"><span class="built_in">array</span> a&#123; <span class="string">"lubaobao"</span>,<span class="string">"love"</span>,<span class="string">"lubaobao"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="string">"lubaobao"</span>;</span><br><span class="line">a.at(<span class="number">1</span>) = <span class="string">"love"</span>;</span><br><span class="line">a[<span class="number">2</span>] = <span class="string">"lubaobao"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//rend()不可以赋值,反向迭代器返回数组第一个元素前面的位置</span></span><br><span class="line"><span class="comment">//rbegin()指向数组最后一个元素的位置</span></span><br><span class="line"><span class="comment">//end()指向数组最后一个元素后面的位置</span></span><br><span class="line"><span class="comment">//begin()指向数组第一个元素的位置</span></span><br><span class="line">* a.rbegin() = <span class="string">"fujunjun"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : a)</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="keyword">typedef</span> boost::<span class="built_in">unordered_set</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; un_set;</span><br><span class="line">un_set* s = <span class="keyword">new</span> un_set();</span><br><span class="line"></span><br><span class="line">s-&gt;insert(<span class="string">"lubaobao"</span>);</span><br><span class="line">s-&gt;insert(<span class="string">"taixihuan"</span>);</span><br><span class="line">s-&gt;insert(<span class="string">"fujunjun le"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//此处的iterator是un_set下的,不是boost::unordered_set命名空间下的</span></span><br><span class="line"><span class="comment">//::作用域限定符,表示作用域和所属关系</span></span><br><span class="line"><span class="keyword">for</span> (un_set::iterator it = s-&gt;begin(); it != s-&gt;end(); ++it)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : *s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="keyword">typedef</span> boost::<span class="built_in">unordered_map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">int</span>&gt; un_map;</span><br><span class="line">un_map* um = <span class="keyword">new</span> un_map();</span><br><span class="line"></span><br><span class="line"><span class="comment">//此处的value_type是un_map所属,不是命名空间所属</span></span><br><span class="line">um-&gt;insert(un_map::value_type(<span class="string">"lubaobao"</span>, <span class="number">0</span>));</span><br><span class="line">um-&gt;insert(un_map::value_type(<span class="string">"fujunjun"</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : *um)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e.first &lt;&lt; <span class="string">","</span> &lt;&lt; e.second &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (um-&gt;find(<span class="string">"lubaobao"</span>) != um-&gt;end()) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> boost::bimap&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">int</span>&gt; bi_map;</span><br><span class="line">bi_map* bm = <span class="keyword">new</span> bi_map();</span><br><span class="line"></span><br><span class="line">bm-&gt;insert(bi_map::value_type(<span class="string">"lubaobao"</span>, <span class="number">18</span>));</span><br><span class="line">bm-&gt;insert(bi_map::value_type(<span class="string">"fujunjun"</span>, <span class="number">24</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//auto for中使用:,C#中的auto使用in</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : *bm)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e.left &lt;&lt; <span class="string">" is "</span> &lt;&lt; e.right &lt;&lt; <span class="string">" years old"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> boost::bimap&lt;boost::bimaps::set_of&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;, boost::bimaps::multiset_of&lt;<span class="keyword">int</span>&gt;&gt; multi_bi_map;</span><br><span class="line">multi_bi_map* mbm = <span class="keyword">new</span> multi_bi_map();</span><br><span class="line"></span><br><span class="line">mbm-&gt;insert(multi_bi_map::value_type(<span class="string">"lubaobao"</span>, <span class="number">18</span>));</span><br><span class="line">mbm-&gt;insert(multi_bi_map::value_type(<span class="string">"fujunjun"</span>, <span class="number">18</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; mbm-&gt;right.count(<span class="number">18</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="学习boost的数据结构"><a href="#学习boost的数据结构" class="headerlink" title="学习boost的数据结构"></a>学习boost的数据结构</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学习boost的数据结构</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/tuple/tuple.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此头文件用于将tuple写入流中</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/tuple/tuple_io.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类似于python的弱类型</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/any.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/variant.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line">boost::tuple&lt;std::string, int&gt; Func()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//使用boost命名空间下的make_tuple也可以创建一个元组</span></span><br><span class="line"><span class="keyword">return</span> boost::make_tuple(<span class="string">"Error_message"</span>, <span class="number">1024</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">//元组,与pair不同的是,pair只能存两个不同类型的变量,而tuple可以存无限个</span></span><br><span class="line">boost::tuple &lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">int</span>&gt; tp(<span class="string">"lubaobao"</span>, <span class="string">"fujunjun"</span>, <span class="number">9999999</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; tp &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用对象+.访问get函数,&lt;&gt;中为索引号</span></span><br><span class="line"><span class="comment">//使用boost命名空间下的get函数,&lt;&gt;中索引号,参数为元组对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//索引值的合法性会在编译时检查</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; tp.get&lt;<span class="number">0</span>&gt;() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; boost::get&lt;<span class="number">1</span>&gt;(tp) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="keyword">typedef</span> boost::tuple &lt;<span class="built_in">std</span>::<span class="built_in">string</span>&amp;, <span class="built_in">std</span>::<span class="built_in">string</span>&amp;, <span class="keyword">int</span>&amp;&gt;tp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> my_name = <span class="string">"fujunjun"</span>;</span><br><span class="line"><span class="built_in">string</span> my_wife_name = <span class="string">"lubaobao"</span>;</span><br><span class="line"><span class="keyword">int</span> we_together_time = <span class="number">9999999</span>;</span><br><span class="line"></span><br><span class="line">tp _tp = boost::tie(my_name, my_wife_name, we_together_time);</span><br><span class="line">we_together_time = <span class="number">999999999</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; _tp &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boost库的拆箱操作</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> error_msg;</span><br><span class="line"><span class="keyword">int</span> error_code;</span><br><span class="line"></span><br><span class="line">boost::tie(error_msg, error_code) = Func();</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; error_msg &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; error_code &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">boost::any any_type_a = <span class="number">1</span>;</span><br><span class="line">any_type_a = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//any_type_a = "lu he tu";</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//但是不能直接输出,还是需要类型转换</span></span><br><span class="line"><span class="comment">//类型转换错误的话,会抛出bad_any_cast的异常</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; boost::any_cast&lt;<span class="keyword">int</span>&gt;(any_type_a) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="keyword">const</span> boost::bad_any_cast&amp; ec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; ec.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用any_cast指向一个any类型</span></span><br><span class="line">boost::any any_int = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了便于理解,此处写为 *i,事实上int* i和int *i是一样的,i是一个int型的指针,*i是一个int变量</span></span><br><span class="line"><span class="comment">//any_cast的&lt;&gt;中为要转换后的变量类型,此处为int,()中为参数,传入的是any类型变量的地址</span></span><br><span class="line"><span class="keyword">int</span> *i = boost::any_cast&lt;<span class="keyword">int</span>&gt;(&amp;any_int);</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">boost::variant&lt;<span class="keyword">double</span>, <span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt; v;</span><br><span class="line">v = <span class="number">37.13</span>;</span><br><span class="line">v = <span class="number">37</span>;</span><br><span class="line">v = <span class="string">"lubaobao love fujunjun"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; boost::get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(v) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="学习boost的序列化"><a href="#学习boost的序列化" class="headerlink" title="学习boost的序列化"></a>学习boost的序列化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/archive/text_oarchive.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/archive/text_iarchive.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/archive/xml_oarchive.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/archive/xml_iarchive.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ios::app：　　　//以追加的方式打开文件  </span></span><br><span class="line"><span class="comment">//ios::ate：　　　//文件打开后定位到文件尾，ios:app就包含有此属性  </span></span><br><span class="line"><span class="comment">//ios::binary：　//以二进制方式打开文件，缺省的方式是文本方式。两种方式的区别见前文  </span></span><br><span class="line"><span class="comment">//ios::in：　　　//文件以输入方式打开（文件数据输入到内存）  </span></span><br><span class="line"><span class="comment">//ios::out：　　　//文件以输出方式打开（内存数据输出到文件）  </span></span><br><span class="line"><span class="comment">//ios::nocreate：//不建立文件，所以文件不存在时打开失败  </span></span><br><span class="line"><span class="comment">//ios::noreplace：//不覆盖文件，所以打开文件时如果文件存在失败  </span></span><br><span class="line"><span class="comment">//ios::trunc：　//如果文件存在，把文件长度设为0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Save</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//std::ios::out 文件不存在则创建,存在则打开</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::fstream <span class="title">fs</span><span class="params">(<span class="string">"text.txt"</span>, <span class="built_in">std</span>::ios::out)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (fs.is_open())</span><br><span class="line">&#123;</span><br><span class="line">boost::<span class="function">archive::text_oarchive <span class="title">oa</span><span class="params">(fs)</span></span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">oa &lt;&lt; i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Load</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::fstream <span class="title">fs</span><span class="params">(<span class="string">"text.txt"</span>, <span class="built_in">std</span>::ios::in)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (fs.is_open())</span><br><span class="line">&#123;</span><br><span class="line">boost::<span class="function">archive::text_iarchive <span class="title">ia</span><span class="params">(fs)</span></span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">ia &gt;&gt; i;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">stringstream</span> ss;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="keyword">int</span> age, <span class="built_in">std</span>::<span class="built_in">string</span> name) :_age(age), _name(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此处的const本质是给成员函数的this指针加const限定,不允许修改成员变量,除非成员变量使用mutable修饰</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">name</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">boost</span>:</span>:serialization::access;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Archive&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Archive&amp; ar, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> version)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//ar&amp; _age;</span></span><br><span class="line"><span class="function">ar&amp; <span class="title">BOOST_SERIALIZATION_NVP</span><span class="params">(_age)</span></span>;</span><br><span class="line"><span class="function">ar&amp; <span class="title">BOOST_SERIALIZATION_NVP</span><span class="params">(_name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> _name;</span><br><span class="line"><span class="keyword">int</span> _age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Save</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">boost::<span class="function">archive::text_oarchive <span class="title">oa</span><span class="params">(ss)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">18</span>, <span class="string">"lubaobao"</span>)</span></span>;</span><br><span class="line">oa &lt;&lt; p;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::fstream <span class="title">fs</span><span class="params">(<span class="string">"text.xml"</span>, <span class="built_in">std</span>::ios::out)</span></span>;</span><br><span class="line">boost::<span class="function">archive::xml_oarchive <span class="title">oa</span><span class="params">(fs)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">18</span>, <span class="string">"lubaobao"</span>)</span></span>;</span><br><span class="line">oa &lt;&lt; BOOST_SERIALIZATION_NVP(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Load</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">boost::<span class="function">archive::text_iarchive <span class="title">ia</span><span class="params">(ss)</span></span>;</span><br><span class="line">Person p;</span><br><span class="line">ia &gt;&gt; p;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; p.age() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::fstream <span class="title">fs</span><span class="params">(<span class="string">"text.xml"</span>, <span class="built_in">std</span>::ios::in)</span></span>;</span><br><span class="line">boost::<span class="function">archive::xml_iarchive <span class="title">ia</span><span class="params">(fs)</span></span>;</span><br><span class="line">Person p;</span><br><span class="line">ia &gt;&gt; BOOST_SERIALIZATION_NVP(p);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; p.age() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; p.name() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">boost::<span class="function">archive::text_oarchive <span class="title">oa</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">cout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">oa &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">Save();</span><br><span class="line">Load();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Linux下的编译"><a href="#Linux下的编译" class="headerlink" title="Linux下的编译"></a>Linux下的编译</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">all:string_boost filesystem_boost asio_boost socket_boost sharedmemory_boost container_boost datastructure_boost serialize_boost</span></span><br><span class="line">LIB=-I /home/luzihan/boost_1_74_0/<span class="keyword">include</span> -L /home/luzihan/boost_1_74_0/lib </span><br><span class="line"></span><br><span class="line"><span class="section">string_boost:string_boost.cpp</span></span><br><span class="line">g++ -std=c++11 <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">filesystem_boost:filesystem_boost.cpp</span></span><br><span class="line">g++ -std=c++11 <span class="variable">$^</span> -o <span class="variable">$@</span> <span class="variable">$(LIB)</span> -lboost_system -lboost_filesystem</span><br><span class="line"><span class="section">asio_boost:asio_boost.cpp</span></span><br><span class="line">g++ -std=c++11 <span class="variable">$^</span> -o <span class="variable">$@</span> <span class="variable">$(LIB)</span> -lboost_system-mt -lboost_thread-mt -lpthread</span><br><span class="line"><span class="section">socket_boost:socket_boost.cpp</span></span><br><span class="line">g++ -std=c++11 <span class="variable">$^</span> -o <span class="variable">$@</span> <span class="variable">$(LIB)</span> -lpthread</span><br><span class="line"><span class="section">sharedmemory_boost:sharedmemory_boost.cpp</span></span><br><span class="line">g++ <span class="variable">$^</span> -o <span class="variable">$@</span> <span class="variable">$(LIB)</span>  -pthread -lrt</span><br><span class="line"><span class="section">container_boost:container_boost.cpp</span></span><br><span class="line">g++ -std=c++11 <span class="variable">$^</span> -o <span class="variable">$@</span> <span class="variable">$(LIB)</span></span><br><span class="line"><span class="section">datastructure_boost:datastructure_boost.cpp</span></span><br><span class="line">g++ -std=c++11 <span class="variable">$^</span> -o <span class="variable">$@</span> <span class="variable">$(LIB)</span></span><br><span class="line"><span class="section">serialize_boost:serialize_boost.cpp</span></span><br><span class="line">g++ -std=c++11 <span class="variable">$^</span> -o <span class="variable">$@</span> <span class="variable">$(LIB)</span> -lboost_serialization</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm string_boost filesystem_boost asio_boost socket_boost sharedmemory_boost container_boost datastructure_boost serialize_boost</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Blend For VS制作WPF动画</title>
      <link href="/2020/10/16/WPF-Blend&amp;Animation/"/>
      <url>/2020/10/16/WPF-Blend&amp;Animation/</url>
      
        <content type="html"><![CDATA[<p>WPF的强势之处在于不但可以很方便的画出漂亮的静态界面，也可以很方便的做出动画效果</p><a id="more"></a><h2 id="连续动画"><a href="#连续动画" class="headerlink" title="连续动画"></a>连续动画</h2><p>基础的Storyboard、时间线什么的概念就不在这里写了，因为这个博客也就是我自己记录自己学习的历程，我还没到可以教别人的程度<br>用C#代码或者Xaml画一条线是很容易，但是要让线慢慢的一点点变长呢？用Timer计时器每隔一段时间修改line的宽度吗？不说Timer的时间精度问题，这样做出来想必也没有那么流畅的效果</p><h3 id="目标效果"><a href="#目标效果" class="headerlink" title="目标效果"></a>目标效果</h3><p><img src="https://img-blog.csdnimg.cn/20201016174024550.gif#pic_center" alt="在这里插入图片描述"></p><h3 id="Blend实现"><a href="#Blend实现" class="headerlink" title="Blend实现"></a>Blend实现</h3><p>先创建一个Line的对象，放入Canvas容器内</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Line</span> <span class="attr">x:Name</span>=<span class="string">"line"</span> <span class="attr">X1</span>=<span class="string">"50"</span> <span class="attr">Y1</span>=<span class="string">"150"</span> <span class="attr">X2</span>=<span class="string">"500"</span> <span class="attr">Y2</span>=<span class="string">"150"</span> <span class="attr">Stroke</span>=<span class="string">"Green"</span> <span class="attr">StrokeThickness</span>=<span class="string">"1"</span> <span class="attr">Width</span>=<span class="string">"500"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>然后在对象和时间线窗口中，点击图中的按钮，创建一个新的Stroyboard<br><img src="https://img-blog.csdnimg.cn/20201016174032879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>在时间点0秒处，创建关键帧，最右侧的line对象属性窗口中设置width属性为0<br><img src="https://img-blog.csdnimg.cn/20201016174041852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201016174050754.png#pic_center" alt="在这里插入图片描述"></p><p>同理,时间点5秒处,创建关键帧,width属性设置为line的最终宽度,点播放按钮预览效果</p><h3 id="动画的调用"><a href="#动画的调用" class="headerlink" title="动画的调用"></a>动画的调用</h3><p>两种方法调用动画,一种在后台找到对应的storyboard资源使用start方法调用,另一种使用Blend直接在xaml中调用触发器</p><ul><li><p>后台代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> storyboard = (Storyboard)<span class="keyword">this</span>.FindResources(<span class="string">"Storyboard1"</span>);</span><br><span class="line">storyboard.Start();</span><br></pre></td></tr></table></figure></li><li><p>xaml触发器<br><img src="https://img-blog.csdnimg.cn/20201016174059896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li></ul><p>如下代码是Blend帮忙生成的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">"FrameworkElement.Loaded"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">BeginStoryboard</span> <span class="attr">Storyboard</span>=<span class="string">"&#123;StaticResource openStoryboard&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">BeginStoryboard</span> <span class="attr">Storyboard</span>=<span class="string">"&#123;StaticResource Storyboard1&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">BeginStoryboard</span> <span class="attr">Storyboard</span>=<span class="string">"&#123;StaticResource pathStoryboard&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Trigger</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="等待效果"><a href="#等待效果" class="headerlink" title="等待效果"></a>等待效果</h3><p>使用上次一模一样的操作,从阿里矢量图标库选取一个进度条的图片,然后时间点0设置角度为0,时间点3设置角度360,也可以设置相同的时间间隔转动不同的角度达到变速效果<br><img src="https://img-blog.csdnimg.cn/20201017091058191.gif#pic_center" alt="在这里插入图片描述"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Storyboard</span> <span class="attr">x:Key</span>=<span class="string">"proStoryboard"</span> <span class="attr">RepeatBehavior</span>=<span class="string">"Forever"</span> <span class="attr">AutoReverse</span>=<span class="string">"False"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DoubleAnimationUsingKeyFrames</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">"(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">"proimage"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EasingDoubleKeyFrame</span> <span class="attr">KeyTime</span>=<span class="string">"0"</span> <span class="attr">Value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EasingDoubleKeyFrame</span> <span class="attr">KeyTime</span>=<span class="string">"0:0:0.2"</span> <span class="attr">Value</span>=<span class="string">"60"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EasingDoubleKeyFrame</span> <span class="attr">KeyTime</span>=<span class="string">"0:0:0.4"</span> <span class="attr">Value</span>=<span class="string">"180"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EasingDoubleKeyFrame</span> <span class="attr">KeyTime</span>=<span class="string">"0:0:0.6"</span> <span class="attr">Value</span>=<span class="string">"240"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EasingDoubleKeyFrame</span> <span class="attr">KeyTime</span>=<span class="string">"0:0:0.8"</span> <span class="attr">Value</span>=<span class="string">"300"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EasingDoubleKeyFrame</span> <span class="attr">KeyTime</span>=<span class="string">"0:0:1.0"</span> <span class="attr">Value</span>=<span class="string">"360"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="360"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DoubleAnimationUsingKeyFrames</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ObjectAnimationUsingKeyFrames</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">"(UIElement.Visibility)"</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">"proimage"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DiscreteObjectKeyFrame</span> <span class="attr">KeyTime</span>=<span class="string">"0"</span> <span class="attr">Value</span>=<span class="string">"&#123;x:Static Visibility.Visible&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DiscreteObjectKeyFrame</span> <span class="attr">KeyTime</span>=<span class="string">"0:0:1.0"</span> <span class="attr">Value</span>=<span class="string">"&#123;x:Static Visibility.Hidden&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ObjectAnimationUsingKeyFrames</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="路径动画"><a href="#路径动画" class="headerlink" title="路径动画"></a>路径动画</h2><p>要想自己创建的对象按照某种路线移动，有两种方法，一种是上面提到的关键帧，某一时间点设置起始位置，然后设置不同的时间点拖动到不同的位置，造成可以移动的动画，但是这种方法弊端在于不能随心所欲的控制移动的位置，比如要想绕个圈那得设置多少个关键帧，而且弧度还不平滑，因为它只是针对TranslateTransform.X/Y属性，第二种方法就是使用路径动画，这种可以自己画好path，可以精确控制</p><h3 id="Blend实现-1"><a href="#Blend实现-1" class="headerlink" title="Blend实现"></a>Blend实现</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PathGeometry</span> <span class="attr">x:Key</span>=<span class="string">"PathGeometry1"</span> <span class="attr">Figures</span>=<span class="string">"M711.5,124 C711.5,124 628.5,257 766.5,221 904.5,185 1255.5025,96.499919 936.00088,146.00007 616.49922,195.50021 883.50077,102.49994 883.50077,102.49994 883.50077,102.49994 734.99988,-76.000585 771.00009,82.999882 807.00031,242.00035 942.00112,230.00031 942.00112,230.00031"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码是使用Blend的钢笔工具画出的一段路径,如下图<br><img src="https://img-blog.csdnimg.cn/20201016174109366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>DoubleAnimationUsingPath 路径动画的标签</li><li>Duration 动画的时间间隔</li><li>TargetName 动画操作的对象名</li><li>TargetProperty 动画操作的属性,如放入Canvas容器内,可以为Canvs.Left/Top,不是的话属性设置为TranslateTransform.X/Y</li><li>Source 绑定的Path的X或者Y</li><li>PathGeometry 路径动画的路径</li></ul><p>记不得标签的话,随便输入一个x或者y后Blend生成的代码中修改即可<br><img src="https://img-blog.csdnimg.cn/20201016174118890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Storyboard</span> <span class="attr">x:Name</span>=<span class="string">"storyboard"</span> <span class="attr">x:Key</span>=<span class="string">"pathStoryboard"</span> <span class="attr">AutoReverse</span>=<span class="string">"True"</span> <span class="attr">RepeatBehavior</span>=<span class="string">"Forever"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--两种方法实现路径动画--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;DoubleAnimationUsingPath Storyboard.TargetProperty="(Canvas.Left)" Duration="0:0:3" PathGeometry="&#123;StaticResource PathGeometry1&#125;" Storyboard.TargetName="movebtn" Source="X"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;DoubleAnimationUsingPath Storyboard.TargetProperty="(Canvas.Top)" Duration="0:0:3" PathGeometry="&#123;StaticResource PathGeometry1&#125;" Storyboard.TargetName="movebtn" Source="Y"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DoubleAnimationUsingPath</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">"(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"</span> <span class="attr">Duration</span>=<span class="string">"0:0:3"</span> <span class="attr">PathGeometry</span>=<span class="string">"&#123;StaticResource PathGeometry1&#125;"</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">"movebtn"</span> <span class="attr">Source</span>=<span class="string">"X"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DoubleAnimationUsingPath</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">"(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)"</span> <span class="attr">Duration</span>=<span class="string">"0:0:3"</span> <span class="attr">PathGeometry</span>=<span class="string">"&#123;StaticResource PathGeometry1&#125;"</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">"movebtn"</span> <span class="attr">Source</span>=<span class="string">"Y"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h3><p>大方块使用第一种方法,小方块使用第二种方法<br><img src="https://img-blog.csdnimg.cn/20201016174132752.gif#pic_center" alt="在这里插入图片描述"></p><h2 id="启动、关闭动画"><a href="#启动、关闭动画" class="headerlink" title="启动、关闭动画"></a>启动、关闭动画</h2><h3 id="Blend实现-2"><a href="#Blend实现-2" class="headerlink" title="Blend实现"></a>Blend实现</h3><p>也是使用连续动画的方式,操作的对象变成了window,操作的属性是width,控制窗体达到一个慢慢向右铺开的效果,但是如果设置窗体居中,铺开后窗体不会再正中,这个暂时没有解决</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--控制window的旋转和缩放--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Window.RenderTransform</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TransformGroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ScaleTransform</span> <span class="attr">x:Name</span>=<span class="string">"scale"</span> <span class="attr">ScaleX</span>=<span class="string">"1"</span> <span class="attr">ScaleY</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">ScaleTransform</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RotateTransform</span> <span class="attr">x:Name</span>=<span class="string">"rotate"</span> <span class="attr">Angle</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">RotateTransform</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TransformGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.RenderTransform</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于Window来说,右侧的属性窗口没有转换选项,但其实可以转换操作,不过要用代码实现,操作属性width可以实现铺开效果,而且右侧属性窗口是有width属性的,控制ScaleX和Scale Y属性从0-1控制缩放</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Storyboard</span> <span class="attr">x:Key</span>=<span class="string">"openStoryboard"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">"(FrameworkElement.Width)"</span> <span class="attr">From</span>=<span class="string">"0"</span> <span class="attr">To</span>=<span class="string">"1200"</span> <span class="attr">Duration</span>=<span class="string">"0:0:1"</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">"window"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;DoubleAnimation Storyboard.TargetProperty="ScaleX" From="0.1" To="1" Duration="0:0:1" Storyboard.TargetName="scale"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;DoubleAnimation Storyboard.TargetProperty="ScaleY" From="0.1" To="1" Duration="0:0:1" Storyboard.TargetName="scale"/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关闭也是操作width,不过是从展开后的宽度变为0,然后加上旋转,1秒转动720度(2圈),操作Opacity属性控制渐隐渐显效果,从1-0为渐隐</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Storyboard</span> <span class="attr">x:Key</span>=<span class="string">"closeStoryboard"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">"(FrameworkElement.Width)"</span> <span class="attr">From</span>=<span class="string">"1200"</span> <span class="attr">To</span>=<span class="string">"0"</span> <span class="attr">Duration</span>=<span class="string">"0:0:1"</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">"window"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">"Angle"</span> <span class="attr">From</span>=<span class="string">"0"</span> <span class="attr">To</span>=<span class="string">"720"</span> <span class="attr">Duration</span>=<span class="string">"0:0:1"</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">"rotate"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">"Opacity"</span> <span class="attr">From</span>=<span class="string">"1"</span> <span class="attr">To</span>=<span class="string">"0"</span> <span class="attr">Duration</span>=<span class="string">"0:0:1"</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">"grid"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动动画Loaded事件加载,关闭动画需要在Closing事件中加载关闭动画然后阻止窗体关闭,在关闭动画执行结束后关闭窗体</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line">    closeStoryboard = (Storyboard)<span class="keyword">this</span>.FindResource(<span class="string">"closeStoryboard"</span>);</span><br><span class="line">    closeStoryboard.Completed += (c, d) =&gt; Application.Current.Shutdown(); ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">window_Closing</span>(<span class="params"><span class="keyword">object</span> sender, System.ComponentModel.CancelEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    closeStoryboard.Begin();</span><br><span class="line">    e.Cancel = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=red>如果启动动画、关闭动画出现黑色背景，多半是因为window的style没有设置为None，而且AllowsTransparency设置为true</font>，标题栏需要自己画</p><h3 id="效果演示-1"><a href="#效果演示-1" class="headerlink" title="效果演示"></a>效果演示</h3><p><img src="https://img-blog.csdnimg.cn/20201017091319768.gif#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF中ListView加载大量数据</title>
      <link href="/2020/08/26/WPF-ListViewBigDataBinding/"/>
      <url>/2020/08/26/WPF-ListViewBigDataBinding/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#_1">使用情景</a></li><li><a href="#_1">使用ListView加数据绑定</a></li><li><a href="#_1">使用ListView的GridView作为View显示元素</a></li><li><a href="#_1">效果演示</a></li></ul><a id="more"></a><h2 id="使用情景"><a href="#使用情景" class="headerlink" title="使用情景"></a>使用情景</h2><p>在此之前,做了一个显示日志信息的模块,当时使用的是RichTextBox,但是我不会绑定,因为它是FlowDocument,所以我是直接将数据转换为对应的Paragraph然后Add进去,这样很慢,大概2000条日志就会造成界面卡顿</p><p>后来改为异步加载,其他线程中操作控件需要使用Dispatcher.BeginInvoke,这种lamuda表达式中途不允许return,所以还是把所有的Paragraph完全加载到Documents.Blocks中才会刷新UI,解决的方法是创建一个线程先加载500条,然后完成后,在重新创建线程,继续500条,这种做法可以解决界面假死,但是滑动条的体验不太令人满意(未加载完时拖动,此时又添加了数据,滑动条的位置会变化)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">task = <span class="keyword">new</span> Task(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (lockobj)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (paragraphs.Count == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (completed)</span><br><span class="line">            &#123;</span><br><span class="line">                completed = <span class="literal">false</span>;</span><br><span class="line">                thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(UpdateTimeRangeLog));</span><br><span class="line">                thread.IsBackground = <span class="literal">true</span>;</span><br><span class="line">                thread.Start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">task.Start();</span><br></pre></td></tr></table></figure><p>如果在线程中加入<font color=0099ff>System.Windows.Forms.Application.DoEvents()</font>,可以丝滑流畅,但是<font color=red>这种做法会导致效率下降三倍左右</font>,也就是说多线程异步加载需要5秒,使用这种方法需要15秒,数据才能完全加载完毕,<font color=red>不推荐使用</font>,虽然很流畅,但是如果用户就是想看这个时间段末尾的日志,你加载这么慢肯定不行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateTimeRangeLog</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = onetimecount &lt;= paragraphs.Count ? onetimecount : paragraphs.Count;</span><br><span class="line">    <span class="keyword">lock</span> (lockobj)</span><br><span class="line">    &#123;</span><br><span class="line">        LogInfo.Document.Dispatcher.BeginInvoke(<span class="keyword">new</span> Action(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (paragraphs.Count != <span class="number">0</span>)</span><br><span class="line">                    LogInfo.Document.Blocks.Add(paragraphs.Dequeue());</span><br><span class="line">                    <span class="comment">//System.Windows.Forms.Application.DoEvents()</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;), System.Windows.Threading.DispatcherPriority.Background);</span><br><span class="line">        completed = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用ListView加数据绑定"><a href="#使用ListView加数据绑定" class="headerlink" title="使用ListView加数据绑定"></a>使用ListView加数据绑定</h2><p>然后,我考虑换一种控件试试,看用数据绑定的方式能不能行,然而,我用下面的方式绑定上去,依旧很慢,这边怀疑Binding是同步的,使用异步Binding后结局依旧没有改变(数据量7000条,10s)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ListView</span> <span class="attr">x:Name</span>=<span class="string">"_LogInfo"</span> <span class="attr">ItemsSource</span>=<span class="string">"&#123;Binding LogList&#125;"</span>  <span class="attr">VirtualizingPanel.IsVirtualizing</span>=<span class="string">"True"</span> <span class="attr">VirtualizingPanel.ScrollUnit</span>=<span class="string">"Pixel"</span> <span class="attr">VirtualizingPanel.VirtualizationMode</span>=<span class="string">"Recycling"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView.ItemTemplate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DataTemplate</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">"&#123;Binding LogMsg&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">DataTemplate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ListView.ItemTemplate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用ListView的GridView作为View显示元素"><a href="#使用ListView的GridView作为View显示元素" class="headerlink" title="使用ListView的GridView作为View显示元素"></a>使用ListView的GridView作为View显示元素</h2><p>后来从百度上搜索看到别人是这样加载大量数据的,据博主所说42000行520多列10秒,如果真的是那可太棒了</p><p>然后根据这篇文章,试了一下,可行,下面提供一个Demo</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">local:ColorConvert</span> <span class="attr">x:Key</span>=<span class="string">"ColorConvert"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">"myHeaderStyle"</span> <span class="attr">TargetType</span>=<span class="string">"&#123;x:Type GridViewColumnHeader&#125;"</span>&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Visibility"</span> <span class="attr">Value</span>=<span class="string">"Collapsed"</span> /&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">"myListitemStyle"</span> <span class="attr">TargetType</span>=<span class="string">"&#123;x:Type ListViewItem&#125;"</span>&gt;</span></span><br><span class="line"><span class="css">        &lt;<span class="selector-tag">Style</span><span class="selector-class">.Setters</span>&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"SnapsToDevicePixels"</span> <span class="attr">Value</span>=<span class="string">"True"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Template"</span>&gt;</span></span></span><br><span class="line"><span class="css">                &lt;<span class="selector-tag">Setter</span><span class="selector-class">.Value</span>&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">"&#123;x:Type ListViewItem&#125;"</span>&gt;</span></span></span><br><span class="line">                        &lt;Border</span><br><span class="line">                            x:Name="bd"</span><br><span class="line">                            Padding="&#123;TemplateBinding Padding&#125;"</span><br><span class="line">                            SnapsToDevicePixels="True"&gt;</span><br><span class="line">                            &lt;GridViewRowPresenter</span><br><span class="line">                                Margin="3"</span><br><span class="line">                                Columns="&#123;TemplateBinding GridView.ColumnCollection&#125;"</span><br><span class="line">                                Content="&#123;TemplateBinding Content&#125;" /&gt;</span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span></span><br><span class="line"><span class="css">                        &lt;<span class="selector-tag">ControlTemplate</span><span class="selector-class">.Triggers</span>&gt;</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">"IsSelected"</span> <span class="attr">Value</span>=<span class="string">"True"</span>&gt;</span></span></span><br><span class="line"><span class="css">                                &lt;<span class="selector-tag">Trigger</span><span class="selector-class">.Setters</span>&gt;</span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">"bd"</span> <span class="attr">Property</span>=<span class="string">"Background"</span> <span class="attr">Value</span>=<span class="string">"transparent"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">Trigger.Setters</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">ControlTemplate.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Style.Setters</span>&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DataTemplate</span> <span class="attr">x:Key</span>=<span class="string">"myTimeCellStyle"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">"&#123;Binding Time&#125;"</span> <span class="attr">Foreground</span>=<span class="string">"Black"</span>&gt;</span><span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DataTemplate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DataTemplate</span> <span class="attr">x:Key</span>=<span class="string">"myTypeCellStyle"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">"&#123;Binding Type&#125;"</span> <span class="attr">Foreground</span>=<span class="string">"Black"</span> <span class="attr">Visibility</span>=<span class="string">"Collapsed"</span>&gt;</span><span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DataTemplate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DataTemplate</span> <span class="attr">x:Key</span>=<span class="string">"myMesgCellStyle"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">"&#123;Binding Mesg&#125;"</span> <span class="attr">Foreground</span>=<span class="string">"&#123;Binding Type,Converter=&#123;StaticResource ColorConvert&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DataTemplate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span> <span class="attr">x:Name</span>=<span class="string">"Loginfo"</span> <span class="attr">ItemContainerStyle</span>=<span class="string">"&#123;StaticResource myListitemStyle&#125;"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Stretch"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Stretch"</span> <span class="attr">ScrollViewer.VerticalScrollBarVisibility</span>=<span class="string">"Visible"</span> <span class="attr">ScrollViewer.CanContentScroll</span>=<span class="string">"True"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> normalLogFileName = <span class="string">"20200818.Normal.txt"</span>;</span><br><span class="line">List&lt;<span class="keyword">string</span>&gt; dataList = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">List&lt;Paragraph&gt; list = <span class="keyword">new</span> List&lt;Paragraph&gt;();</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">DataTable table = <span class="keyword">new</span> DataTable();</span><br><span class="line"><span class="comment">//时间、种类、信息列</span></span><br><span class="line">DataColumn timeCol = <span class="keyword">new</span> DataColumn(<span class="string">"Time"</span>, <span class="keyword">typeof</span>(<span class="keyword">string</span>));</span><br><span class="line">DataColumn typeCol = <span class="keyword">new</span> DataColumn(<span class="string">"Type"</span>, <span class="keyword">typeof</span>(<span class="keyword">string</span>));</span><br><span class="line">DataColumn mesgCol = <span class="keyword">new</span> DataColumn(<span class="string">"Mesg"</span>, <span class="keyword">typeof</span>(<span class="keyword">string</span>));</span><br><span class="line">table.Columns.Add(timeCol);</span><br><span class="line">table.Columns.Add(typeCol);</span><br><span class="line">table.Columns.Add(mesgCol);</span><br><span class="line"><span class="keyword">using</span> (StreamReader sr = <span class="keyword">new</span> StreamReader(System.IO.Path.Combine(LogFilePath, normalLogFileName), Encoding.UTF8))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> time = <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="keyword">string</span> type = <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="keyword">string</span> mesg = <span class="keyword">string</span>.Empty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!sr.EndOfStream)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">string</span> text = sr.ReadLine();</span><br><span class="line">            <span class="keyword">string</span>[] str = text.Split(<span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">" "</span> &#125;, StringSplitOptions.RemoveEmptyEntries);</span><br><span class="line">            <span class="keyword">if</span> (str.Count() &gt; <span class="number">4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                time = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125; &#123;1&#125;"</span>, str[<span class="number">0</span>], str[<span class="number">1</span>]);</span><br><span class="line">                type = str[<span class="number">2</span>];</span><br><span class="line">                mesg = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125; &#123;1&#125;"</span>, str[<span class="number">3</span>], str[<span class="number">4</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                time = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125; &#123;1&#125;"</span>, str[<span class="number">0</span>], str[<span class="number">1</span>]);</span><br><span class="line">                type = str[<span class="number">2</span>];</span><br><span class="line">                mesg = str[<span class="number">3</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            DataRow row = table.NewRow();</span><br><span class="line">            row[<span class="number">0</span>] = time;</span><br><span class="line">            row[<span class="number">1</span>] = type;</span><br><span class="line">            row[<span class="number">2</span>] = mesg;</span><br><span class="line"></span><br><span class="line">            table.Rows.Add(row);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sr.Close();</span><br><span class="line">&#125;</span><br><span class="line">GridView gv = <span class="keyword">new</span> GridView();</span><br><span class="line">gv.ColumnHeaderContainerStyle = (Style)<span class="keyword">this</span>.FindResource(<span class="string">"myHeaderStyle"</span>);</span><br><span class="line"><span class="keyword">foreach</span> (DataColumn dc <span class="keyword">in</span> table.Columns)</span><br><span class="line">&#123;</span><br><span class="line">    GridViewColumn columnRowNum = <span class="keyword">new</span> GridViewColumn();</span><br><span class="line">    <span class="comment">//columnRowNum.DisplayMemberBinding = new Binding(dc.ColumnName);</span></span><br><span class="line">    columnRowNum.Header = dc.ColumnName;</span><br><span class="line">    <span class="keyword">if</span> (dc.ColumnName == <span class="string">"Time"</span>)</span><br><span class="line">        columnRowNum.CellTemplate = (DataTemplate)<span class="keyword">this</span>.FindResource(<span class="string">"myTimeCellStyle"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dc.ColumnName == <span class="string">"Type"</span>)</span><br><span class="line">        columnRowNum.CellTemplate = (DataTemplate)<span class="keyword">this</span>.FindResource(<span class="string">"myTypeCellStyle"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        columnRowNum.CellTemplate = (DataTemplate)<span class="keyword">this</span>.FindResource(<span class="string">"myMesgCellStyle"</span>);</span><br><span class="line">    gv.Columns.Add(columnRowNum);</span><br><span class="line">&#125;</span><br><span class="line">Loginfo.View = gv;</span><br><span class="line">Loginfo.DataContext = table;</span><br><span class="line">Loginfo.SetBinding(ListView.ItemsSourceProperty, <span class="keyword">new</span> Binding());</span><br></pre></td></tr></table></figure><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p>使用上面的方法,不使用异步操作的情况下,7200条日志秒加载,比之前已经好太多了,刚工作不久,代码风格和规范都不是太好,各位大佬见谅,会努力学习改正的</p><p><img src="https://img-blog.csdnimg.cn/20200826134714594.gif#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF的Treeview和Menuitem的层级数据绑定</title>
      <link href="/2020/08/07/WPF-TreeViewBinding/"/>
      <url>/2020/08/07/WPF-TreeViewBinding/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#_1">使用情景</a></li><li><a href="#_1">树形类</a></li><li><a href="#_1">数据准备</a></li><li><a href="#_1">数据绑定</a></li><li><a href="#_1">效果演示</a></li><li><a href="#_1">2020-08-08更新</a></li><li><a href="#_1">xml效果演示</a></li><li><a href="#_1">xml数据绑定</a></li><li><a href="#_1">xml绑定效果演示</a></li></ul><a id="more"></a><h2 id="使用情景"><a href="#使用情景" class="headerlink" title="使用情景"></a>使用情景</h2><p><img src="https://img-blog.csdnimg.cn/20200807155759449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如果我们需要这种多层级的控件，比如Menu或者TreeView，后台代码添加需要大量操作空间，且每次Loaded的时候都需要这样，重复大量效率很差的操作，数据量要是不小，就会造成界面明显的卡顿，同时也不符合MVVM的数据驱动程序的思想，换成数据就不一样了，界面启动时加载一次，以后再也不需要重复加载，控件初始化通过Binding生成，效率肯定比我们自己写好很多</p><h2 id="树形类"><a href="#树形类" class="headerlink" title="树形类"></a>树形类</h2><p>既然是多层级，那么单单使用List存放就不太现实，所以我们需要一种类似链表的结构，可以找到节点的双亲和孩子<br>TreeView绑定时必须要有两个东西，NodeID和ParentID，名字和类型可以随便，但类似的东西要有，反正大家都是这么做的，我也不知道是不是微软的规定</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TreeNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> NodeID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ParentID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> NodeName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;TreeNode&gt; ChildNodes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span>(<span class="params"></span>)</span> =&gt; ChildNodes = <span class="keyword">new</span> List&lt;TreeNode&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p><font color=red>之前博客上写的是错的</font></p><p>先随便创建点数据，NodeID的计算需要知道第一级的总个数，第二级的起始NodeID是第一个总个数+1,然后自增,同理第三级起始NodeID是第一级个数+第二级个数+1,然后自增,第三级的ParentID是第二级的当前NodeID-1(因为add之后NodeID已经自增)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> seconditemID = date.Count + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> thirditemID = date.Count + logFileList.Count + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">node = <span class="keyword">new</span> TreeNode() &#123; ParentID = i + <span class="number">1</span>, NodeID = seconditemID++, NodeName = stringBuilder.ToString() &#125;;</span><br><span class="line">nodes.Add(node);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; lauchTimeList.Count; ++l)</span><br><span class="line">&#123;</span><br><span class="line">    node = <span class="keyword">new</span> TreeNode() &#123; ParentID = seconditemID - <span class="number">1</span>, NodeID = thirditemID++, NodeName = lauchTimeList[l].ToString() + <span class="string">"   Test.exe"</span> &#125;;</span><br><span class="line">    nodes.Add(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200807155814794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>将节点全部创建完之后存放在一个List中,插入完数据之后的nodes<br><img src="https://img-blog.csdnimg.cn/20200807155824957.png" alt="在这里插入图片描述"></p><p>此时,nodes还只是一个List,并不是层级结构,因为ChildNode还没有初始化,GetNodes递归查询子节点,当前节点的子节点的ParentID等于当前节点的NodeID</p><p>微软提供的where查询语句比for快,比foreach更快</p><p><font color=0099ff>以下代码来源于:<a href="https://www.cnblogs.com/larissa-0464/p/10227483.html" target="_blank" rel="noopener">https://www.cnblogs.com/larissa-0464/p/10227483.html</a></font></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">getNodes</span>(<span class="params"><span class="keyword">int</span> parentID, List&lt;TreeNode&gt; nodes</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List&lt;TreeNode&gt; mainNodes = nodes.Where(x =&gt; x.ParentID == parentID).ToList();</span><br><span class="line">    List&lt;TreeNode&gt; otherNodes = nodes.Where(x =&gt; x.ParentID != parentID).ToList();</span><br><span class="line">    <span class="keyword">foreach</span> (TreeNode node <span class="keyword">in</span> mainNodes)</span><br><span class="line">        node.ChildNodes = getNodes(node.NodeID, otherNodes);</span><br><span class="line">    <span class="keyword">return</span> mainNodes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GetNodes之后得到的层级结构,就是TreeView需要绑定的Itemsource</p><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>Resources里放的Brush是为了改变Item丢失焦点后Backgroud变成白色,那样巨丑</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TreeView</span> <span class="attr">x:Name</span>=<span class="string">"tree"</span> <span class="attr">Background</span>=<span class="string">"&#123;StaticResource PageDeepBackground&#125;"</span> <span class="attr">BorderThickness</span>=<span class="string">"0,0,1,0"</span> <span class="attr">SelectedItemChanged</span>=<span class="string">"tree_SelectedItemChanged"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TreeView.ItemTemplate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">HierarchicalDataTemplate</span> <span class="attr">ItemsSource</span>=<span class="string">"&#123;Binding Path=ChildNodes&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Label</span> <span class="attr">Content</span>=<span class="string">"&#123;Binding Path=NodeName&#125;"</span> <span class="attr">Foreground</span>=<span class="string">"White"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">HierarchicalDataTemplate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TreeView.ItemTemplate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TreeView.ItemContainerStyle</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">"&#123;x:Type TreeViewItem&#125;"</span>&gt;</span></span><br><span class="line"><span class="css">            &lt;<span class="selector-tag">Style</span><span class="selector-class">.Resources</span>&gt;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">"&#123;x:Static SystemColors.HighlightBrushKey&#125;"</span> <span class="attr">Color</span>=<span class="string">"DodgerBlue"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">"&#123;x:Static SystemColors.HighlightTextBrushKey&#125;"</span> <span class="attr">Color</span>=<span class="string">"White"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">"&#123;x:Static SystemColors.InactiveSelectionHighlightBrushKey&#125;"</span> <span class="attr">Color</span>=<span class="string">"DodgerBlue"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">"&#123;x:Static SystemColors.InactiveSelectionHighlightTextBrushKey&#125;"</span> <span class="attr">Color</span>=<span class="string">"White"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Style.Resources</span>&gt;</span></span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TreeView.ItemContainerStyle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TreeView</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p><img src="https://img-blog.csdnimg.cn/20200807155843614.gif" alt="在这里插入图片描述"></p><p><font size=5 color=0099ff>2020-08-08更新:Xml完成层级数据</font></p><h2 id="2020-08-08更新"><a href="#2020-08-08更新" class="headerlink" title="2020-08-08更新"></a>2020-08-08更新</h2><p>上面的方法是我从百度上查到的,可以直接用,但是NodeID和ParentID很容易把人搞懵,然后我自己试着看能不能满足我自己的需求</p><p>采用xml的方式制定层级结构,加载时也只需要将xml反序列化就好</p><p><font color=0099ff>xml的内存结构</font><font color=red>(随手写的demo,绑定时不可以这样)</font></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">XmlRoot(<span class="meta-string">"LogClass"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogClass</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">XmlElement(<span class="meta-string">"Year"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> List&lt;Year&gt; Year &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Year = <span class="keyword">new</span> List&lt;Year&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Year</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">XmlElement(<span class="meta-string">"Date"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> List&lt;Date&gt; date &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">XmlAttribute(<span class="meta-string">"year"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> year &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Year</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        date = <span class="keyword">new</span> List&lt;Date&gt;();</span><br><span class="line">        year = <span class="keyword">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Date</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">XmlElement(<span class="meta-string">"Time"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> List&lt;Time&gt; time &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">XmlAttribute(<span class="meta-string">"date"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> data &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Date</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        data = <span class="keyword">string</span>.Empty;</span><br><span class="line">        time = <span class="keyword">new</span> List&lt;Time&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Time</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">XmlElement(<span class="meta-string">"LauchTime"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">string</span>&gt; data &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Time</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        data = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时,完成初始化,就可以得到一个层级结构,初始化的操作就不多写了</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LogClass lll = GetLogConfig();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span> xml = XmlHelper.XMLHelper.WriteXml&lt;LogClass&gt;(lll, <span class="string">"./lll.xml"</span>);</span><br><span class="line">    Console.WriteLine(xml);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (StreamWriter sw = <span class="keyword">new</span> StreamWriter(<span class="keyword">new</span> FileStream(<span class="string">"./Alll.xml"</span>, FileMode.Create)))</span><br><span class="line">    &#123;</span><br><span class="line">        sw.Write(xml);</span><br><span class="line">        sw.Close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="xml效果演示"><a href="#xml效果演示" class="headerlink" title="xml效果演示"></a>xml效果演示</h2><p><img src="https://img-blog.csdnimg.cn/2020080810251949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200808102550235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="xml数据绑定"><a href="#xml数据绑定" class="headerlink" title="xml数据绑定"></a>xml数据绑定</h2><p>到上面为止,层级结构我们就很容易的有了,但是如果绑定的话,就不能像demo里那样随手一写,想要绑定到Menu上还是要规矩一点</p><p>需要把所有要显示的都使用属性(XmlAttribute)表示,属性也需要统一,剩下的事情交给分层模板处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">XmlDataProvider</span> <span class="attr">x:Key</span>=<span class="string">"menudata"</span> <span class="attr">Source</span>=<span class="string">"Resources/Alll.xml"</span> <span class="attr">XPath</span>=<span class="string">"/Menu/MenuItem"</span>&gt;</span><span class="tag">&lt;/<span class="name">XmlDataProvider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HierarchicalDataTemplate</span> <span class="attr">DataType</span>=<span class="string">"MenuItem"</span> <span class="attr">ItemsSource</span>=<span class="string">"&#123;Binding XPath=MenuItem&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Orientation</span>=<span class="string">"Vertical"</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Width</span>=<span class="string">"150"</span> <span class="attr">Height</span>=<span class="string">"35"</span> <span class="attr">Foreground</span>=<span class="string">"Black"</span> <span class="attr">Text</span>=<span class="string">"&#123;Binding XPath=@Data&#125;"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Left"</span>&gt;</span><span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">HierarchicalDataTemplate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Menu</span> <span class="attr">x:Name</span>=<span class="string">"item"</span> <span class="attr">Width</span>=<span class="string">"150"</span> <span class="attr">Height</span>=<span class="string">"35"</span> <span class="attr">Background</span>=<span class="string">"White"</span> <span class="attr">ItemsSource</span>=<span class="string">"&#123;Binding Source=&#123;StaticResource menudata&#125;&#125;"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Left"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Top"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><p>绑定的xml数据源示例(节点或属性名随意,只要统一就好),手动写好或者每次加载动态生成取决于自己的需求</p><p><font color=red>encoding=”utf-16”问题是由于使用streamwriter完成序列化，所以encoding的设置不生效</font><br><font color=red>换成memorystream最后return Encoding.UTF8.GetString(memorystream.ToArray())即可</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-16"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Menu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"2020-08"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"2020-08-08"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"08:59:37"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">MenuItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"2020-08-07"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"09:22:14"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"09:24:23"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"09:47:44"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"09:49:23"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"09:54:09"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"10:00:53"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"10:23:38"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"10:43:55"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"10:50:06"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"11:25:52"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"11:28:18"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"13:10:11"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"13:28:06"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"13:46:26"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"13:52:14"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"13:54:22"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"14:43:07"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Data</span>=<span class="string">"14:44:06"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">MenuItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">MenuItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200820132415132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>每次启动前生成最新的xml,动态加载</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Window_Loaded</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    XmlDataProvider dd = <span class="keyword">this</span>.FindResource(<span class="string">"menudata"</span>) <span class="keyword">as</span> XmlDataProvider;</span><br><span class="line">    dd.Source = <span class="keyword">new</span> Uri(System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, <span class="string">"Alll.xml"</span>));</span><br><span class="line">    <span class="keyword">this</span>.item.DataContext = dd;</span><br><span class="line">    <span class="keyword">this</span>.item.SetBinding(ItemsControl.ItemsSourceProperty, <span class="keyword">new</span> Binding() &#123; Source = dd &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="xml绑定效果演示"><a href="#xml绑定效果演示" class="headerlink" title="xml绑定效果演示"></a>xml绑定效果演示</h2><p><img src="https://img-blog.csdnimg.cn/20200808133241617.gif" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF一键更换单位</title>
      <link href="/2020/07/30/WPF-OneKeyToChangeUnit/"/>
      <url>/2020/07/30/WPF-OneKeyToChangeUnit/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#_1">页面布局</a></li><li><a href="#_1">单位转换</a></li><li><a href="#_1">数值转换</a></li><li><a href="#_1">效果演示</a></li><li>[2020-7-31更新]</li></ul><a id="more"></a><h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">"testUnit.MainWindow"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:x</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:d</span>=<span class="string">"http://schemas.microsoft.com/expression/blend/2008"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:mc</span>=<span class="string">"http://schemas.openxmlformats.org/markup-compatibility/2006"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:local</span>=<span class="string">"clr-namespace:testUnit"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">mc:Ignorable</span>=<span class="string">"d"</span> <span class="attr">Loaded</span>=<span class="string">"Window_Loaded"</span> <span class="attr">Unloaded</span>=<span class="string">"Window_Unloaded"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Title</span>=<span class="string">"MainWindow"</span> <span class="attr">Height</span>=<span class="string">"450"</span> <span class="attr">Width</span>=<span class="string">"800"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ComboBox</span> <span class="attr">x:Name</span>=<span class="string">"UnitCombox"</span> <span class="attr">Width</span>=<span class="string">"150"</span> <span class="attr">Height</span>=<span class="string">"35"</span> <span class="attr">Margin</span>=<span class="string">"0,-200,0,0"</span> <span class="attr">SelectedIndex</span>=<span class="string">"0"</span> <span class="attr">SelectionChanged</span>=<span class="string">"UnitCombox_SelectionChanged"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ComboBoxItem</span> <span class="attr">Content</span>=<span class="string">"mm/s"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ComboBoxItem</span> <span class="attr">Content</span>=<span class="string">"mm/min"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ComboBox</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Orientation</span>=<span class="string">"Horizontal"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">Height</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">x:Name</span>=<span class="string">"Input1"</span> <span class="attr">Text</span>=<span class="string">"100"</span> <span class="attr">Width</span>=<span class="string">"150"</span> <span class="attr">Height</span>=<span class="string">"35"</span> <span class="attr">Background</span>=<span class="string">"Black"</span> <span class="attr">Foreground</span>=<span class="string">"White"</span> <span class="attr">HorizontalContentAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalContentAlignment</span>=<span class="string">"Center"</span> <span class="attr">Margin</span>=<span class="string">"15"</span>&gt;</span><span class="tag">&lt;/<span class="name">TextBox</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">x:Name</span>=<span class="string">"Input2"</span> <span class="attr">Text</span>=<span class="string">"100"</span> <span class="attr">Width</span>=<span class="string">"150"</span> <span class="attr">Height</span>=<span class="string">"35"</span> <span class="attr">Background</span>=<span class="string">"Black"</span> <span class="attr">Foreground</span>=<span class="string">"White"</span> <span class="attr">HorizontalContentAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalContentAlignment</span>=<span class="string">"Center"</span> <span class="attr">Margin</span>=<span class="string">"15"</span>&gt;</span><span class="tag">&lt;/<span class="name">TextBox</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">x:Name</span>=<span class="string">"Input3"</span> <span class="attr">Text</span>=<span class="string">"100"</span> <span class="attr">Width</span>=<span class="string">"150"</span> <span class="attr">Height</span>=<span class="string">"35"</span> <span class="attr">Background</span>=<span class="string">"Black"</span> <span class="attr">Foreground</span>=<span class="string">"White"</span> <span class="attr">HorizontalContentAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalContentAlignment</span>=<span class="string">"Center"</span> <span class="attr">Margin</span>=<span class="string">"15"</span>&gt;</span><span class="tag">&lt;/<span class="name">TextBox</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">x:Name</span>=<span class="string">"Input4"</span> <span class="attr">Text</span>=<span class="string">"100"</span> <span class="attr">Width</span>=<span class="string">"150"</span> <span class="attr">Height</span>=<span class="string">"35"</span> <span class="attr">Background</span>=<span class="string">"Black"</span> <span class="attr">Foreground</span>=<span class="string">"White"</span> <span class="attr">HorizontalContentAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalContentAlignment</span>=<span class="string">"Center"</span> <span class="attr">Margin</span>=<span class="string">"15"</span>&gt;</span><span class="tag">&lt;/<span class="name">TextBox</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Orientation</span>=<span class="string">"Horizontal"</span> <span class="attr">Height</span>=<span class="string">"100"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">Margin</span>=<span class="string">"0,150,0,0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Label</span> <span class="attr">x:Name</span>=<span class="string">"Unit1"</span> <span class="attr">Content</span>=<span class="string">"&#123;Binding SpeedUnit&#125;"</span> <span class="attr">Width</span>=<span class="string">"150"</span> <span class="attr">Height</span>=<span class="string">"35"</span> <span class="attr">HorizontalContentAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalContentAlignment</span>=<span class="string">"Center"</span> <span class="attr">Margin</span>=<span class="string">"15"</span>&gt;</span><span class="tag">&lt;/<span class="name">Label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Label</span> <span class="attr">x:Name</span>=<span class="string">"Unit2"</span> <span class="attr">Content</span>=<span class="string">"&#123;Binding SpeedUnit&#125;"</span> <span class="attr">Width</span>=<span class="string">"150"</span> <span class="attr">Height</span>=<span class="string">"35"</span> <span class="attr">HorizontalContentAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalContentAlignment</span>=<span class="string">"Center"</span> <span class="attr">Margin</span>=<span class="string">"15"</span>&gt;</span><span class="tag">&lt;/<span class="name">Label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Label</span> <span class="attr">x:Name</span>=<span class="string">"Unit3"</span> <span class="attr">Content</span>=<span class="string">"&#123;Binding SpeedUnit&#125;"</span> <span class="attr">Width</span>=<span class="string">"150"</span> <span class="attr">Height</span>=<span class="string">"35"</span> <span class="attr">HorizontalContentAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalContentAlignment</span>=<span class="string">"Center"</span> <span class="attr">Margin</span>=<span class="string">"15"</span>&gt;</span><span class="tag">&lt;/<span class="name">Label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Label</span> <span class="attr">x:Name</span>=<span class="string">"Unit4"</span> <span class="attr">Content</span>=<span class="string">"&#123;Binding SpeedUnit&#125;"</span> <span class="attr">Width</span>=<span class="string">"150"</span> <span class="attr">Height</span>=<span class="string">"35"</span> <span class="attr">HorizontalContentAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalContentAlignment</span>=<span class="string">"Center"</span> <span class="attr">Margin</span>=<span class="string">"15"</span>&gt;</span><span class="tag">&lt;/<span class="name">Label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="单位转换"><a href="#单位转换" class="headerlink" title="单位转换"></a>单位转换</h2><ul><li>思路一<ul><li>利用一个循环刷新的线程,根据UnitCombox的索引,动态赋值给UnitLable</li><li>缺点明显,需要知道控件名,利用FindName查找,线程中操作UI控件需要Dispatcher</li><li>关闭窗体后循环中可能还在查找控件,FindName会抛出异常</li></ul></li><li>思路二<ul><li>创建一个具有通知UI属性的变量,根据UnitCombox的索引,将选中的单位赋值给变量,将变量绑定到UnitLable的Content属性</li></ul></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainWindowViewModel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Task task = <span class="keyword">new</span> Task(() =&gt;RefrushData());</span><br><span class="line">    task.Start();</span><br><span class="line">&#125;</span><br><span class="line">List&lt;<span class="keyword">string</span>&gt; UnitList = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;() &#123; <span class="string">"mm/s"</span>, <span class="string">"mm/min"</span> &#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">string</span> _SpeedUnit;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> SpeedUnit</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> _SpeedUnit; &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        _SpeedUnit = <span class="keyword">value</span>;</span><br><span class="line">        RaisePropertyChanged(<span class="string">"SpeedUnit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RefrushData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        SpeedUnit = UnitList[MainWindow.SpeedUnitSelectMode];</span><br><span class="line">        Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h2><p>单位已经更新了,那么数值也必须要更新,全部以速度的基本单位举例</p><ul><li>思路一<ul><li>只有在UnitCombox的索引变了的情况下才需要更新</li><li>保存上一次的索引,将上一次的数值统计转换为mm/s</li><li>将以mm/s为单位的数值,转换为UnitCombox选中的单位数值 </li></ul></li><li>思路二<ul><li>创建一个具有通知UI属性的变量,根据从下位读取上来的速度单位，转为界面选择的单位，绑定 </li></ul></li></ul><p><font color=0099ff>基于MVVM的原则,能不直接操作控件,就不要直接操作控件,尽量以数据驱动程序</font></p><p><font color=red>但是,这个Demo是纯界面的单位转换,界面上的单位转换要多一次,需要记录之前是什么单位,线程中处理数据会有问题</font><br><font color=red>如果是上位和下位之间的数据交互单位转换,就不存在这个问题</font></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UnitCombox_SelectionChanged</span>(<span class="params"><span class="keyword">object</span> sender, SelectionChangedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//单位换算</span></span><br><span class="line">    SpeedUnitSelectMode = UnitCombox.SelectedIndex;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span> name = <span class="string">"Input"</span> + (i + <span class="number">1</span>).ToString();</span><br><span class="line">        TextBox box = Application.Current.MainWindow.FindName(name) <span class="keyword">as</span> TextBox;</span><br><span class="line">        <span class="keyword">if</span> (box != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">string</span> speed = HMIUnitConvert(box.Text.Trim());</span><br><span class="line">            box.Text = ConvertSpeedUnit(Convert.ToDouble(speed)).ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    preindex = UnitCombox.SelectedIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p><img src="https://img-blog.csdnimg.cn/20200730130740309.gif" alt="在这里插入图片描述"></p><p><font size=5 color=0099ff>2020-7-31更新</font></p><p>添加了常用的四种速度单位,并且mm/s转inch/min之后转回去的也不会有误差<br><img src="https://img-blog.csdnimg.cn/20200731131228675.gif" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VSCode调试QT项目</title>
      <link href="/2020/07/27/VSCode-DebugQT/"/>
      <url>/2020/07/27/VSCode-DebugQT/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#_1">搭建QT环境</a></li><li><a href="#_1">构建QT项目</a></li><li><a href="#_1">launch.json和task.json</a></li><li><a href="#_1">结果</a></li><li><a href="#_1">关于QT的小问题</a></li></ul><a id="more"></a><h2 id="搭建QT环境"><a href="#搭建QT环境" class="headerlink" title="搭建QT环境"></a>搭建QT环境</h2><p>安装好CPP环境,control+shift+p,打开命令窗口,输入C/C++选择Config配置(json),然后在includepath下将QT的头文件目录全部加入</p><p><img src="https://img-blog.csdnimg.cn/20200727142912448.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="构建QT项目"><a href="#构建QT项目" class="headerlink" title="构建QT项目"></a>构建QT项目</h2><p>经过上一步的操作,输入QT的代码因为已经可以有自动补全的功能了,然后写好cpp,h文件,打开QT的命令行工具</p><p><img src="https://img-blog.csdnimg.cn/20200727142927383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>然后进入项目路径,输入<font color=0099ff>qmake -project</font><br>此时,项目文件夹下会生成一个以项目名为前缀的.pro文件</p><p>执行<font color=0099ff>qmake</font>,项目中会生成Makefile.Debug和Makefile.Release</p><p>我自己的环境下我执行make会找不到命令,设置了环境变量且重启后依旧没解决,网上查找的解决方法是使用<font color=0099ff>mingw32-make</font>,所以<font colot=red>输入命令</font><font color=0099ff>mingw32 -make -f Makefile.Debug</font>,Debug目录中应该有.exe</p><p>但是,一开始我并没有成功!!!</p><p>至此,我个人的情况是,项目中Debug目录为空,然后我把Makefile.Debug去掉了,在执行一遍发现Release目录下有.exe,然后运行了一遍发现Debug目录下也有.exe了</p><p>然后进入Debug目录,执行<font color=0099ff>windeployqt xx.exe</font>,xx指的是exe程序名</p><p>此时项目目录如下</p><p><img src="https://img-blog.csdnimg.cn/20200727142953424.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="launch-json和task-json"><a href="#launch-json和task-json" class="headerlink" title="launch.json和task.json"></a>launch.json和task.json</h2><p>miDebuggerPath替换成自己的编译器路径<br>program替换成自己的Debug下的exe路径</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"(gdb) Launch"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/debug/qt.exe"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">            <span class="attr">"environment"</span>: [],</span><br><span class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"MIMode"</span>: <span class="string">"gdb"</span>,</span><br><span class="line">            <span class="attr">"miDebuggerPath"</span>: <span class="string">"C:/MinGW/bin/gdb.exe"</span>,</span><br><span class="line">            <span class="attr">"setupCommands"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                    <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line">                    <span class="attr">"ignoreFailures"</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"preLaunchTask"</span>: <span class="string">"Build"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"Build"</span>, <span class="comment">// build任务</span></span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"mingw32-make -f Makefile.Debug"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://img-blog.csdnimg.cn/20200727143015493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200727143058492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="关于QT的小问题"><a href="#关于QT的小问题" class="headerlink" title="关于QT的小问题"></a>关于QT的小问题</h2><p><font size=4 color=red>以上的QT的文件目录exe代码是我从csdn上找的,不是原创</font><br><a href="https://blog.csdn.net/zyhse/article/details/105893886/?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-2&spm=1001.2101.3001.4242" target="_blank" rel="noopener">代码作者博客,代码的Git链接文内有</a><br>QDirModel会造成主线程阻塞作者也知道,然后我改成QFileSystemModel之后发现了一个问题</p><p>界面依旧会卡顿,网上查了半天说是FileIconProvider导致主线程调用了所以卡着,按照网上说的重写了那个方法并且给Model也设置了IconProvider,未能解决</p><p><font color=0099ff>但是,我发现,在家里的电脑上并没有发现这个问题,网上其他人好像也都没有类似情况!</font></p><p>终于我发现了区别, <img src="https://img-blog.csdnimg.cn/2020072714374716.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>公司的这两个磁盘,G盘是空的驱动器,Z盘是一个共享盘,服务器不开是打不开的,QTCreator中运行显示信息SHGetFileInfo()超时,家里的电脑没有这种磁盘,不存在这个问题,所以我想问题是不是出在这里呢?</p><p><font color=red>暂未解决,留待以后更新</font></p>]]></content>
      
      
      <categories>
          
          <category> VsCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF的ComboBox的联动</title>
      <link href="/2020/07/18/WPF-ComboBoxGanged/"/>
      <url>/2020/07/18/WPF-ComboBoxGanged/</url>
      
        <content type="html"><![CDATA[<p>ComboBox的联动通常有两种,一种是第一个ComboBox选择省份,第二个ComboBox的Item出现该省所有的城市,另一种就是Item选一个少一个的那种</p><p>我现在的需求是做出第二种效果,其实两种思路都一样,只是不一样的效果而已</p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li><p>MVVM的数据绑定<br>使用ViewModel建立一个ObservableCollection的列表或者用一个普通的list然后数据类继承INotifyPropertyChanged</p></li><li><p>数据类的定义<br>除了有需要显示在ComboBox里的内容外,还需要一个bool类型的变量,表示是否可以被选中</p></li><li><p>样式中IsEnabled和Visibility的绑定<br>如果需要该项被选择之后其余ComboBox不可选中,就只需要把bool类型的变量绑定到IsEnabled<br>如果需要该项被选择之后其余ComboBox不显示该项,<font cloor=0099ff>只需要把bool类型的变量使用转换器绑定到Visibility</font><br><font color=red>不可以把Item移除!会影响到其余的ComboBox,数据源不要修改!!</font></p></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ComboBox</span> <span class="attr">x:Name</span>=<span class="string">"combox1"</span> <span class="attr">Width</span>=<span class="string">"150"</span> <span class="attr">Height</span>=<span class="string">"35"</span> <span class="attr">ItemsSource</span>=<span class="string">"&#123;Binding NowIOList&#125;"</span> <span class="attr">DisplayMemberPath</span>=<span class="string">"Index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ComboBox.ItemContainerStyle</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">"ComboBoxItem"</span>&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"IsEnabled"</span> <span class="attr">Value</span>=<span class="string">"&#123;Binding CanSelected&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Visibility"</span> <span class="attr">Value</span>=<span class="string">"&#123;Binding CanSelected,Converter=&#123;StaticResource YourConverter&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ComboBox.ItemContainerStyle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ComboBox</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ItemSource就是ViewModel下的列表,DisplayMenberPath是要展示在ComboBox里的成员变量的名称</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;IOData&gt; _NowIOList;</span><br><span class="line"><span class="keyword">public</span> List&lt;IOData&gt; NowIOList</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> _NowIOList; &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        _NowIOList = <span class="keyword">value</span>;</span><br><span class="line">        RaisePropertyChanged(<span class="string">"NowIOList"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IOData</span> : <span class="title">INotifyPropertyChanged</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Index</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> index; &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            index = <span class="keyword">value</span>;</span><br><span class="line">            <span class="keyword">if</span> (PropertyChanged != <span class="literal">null</span>)</span><br><span class="line">                PropertyChanged.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">"Index"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> canSelected;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> CanSelected</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> canSelected; &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            canSelected = <span class="keyword">value</span>;</span><br><span class="line">            <span class="keyword">if</span> (PropertyChanged != <span class="literal">null</span>)</span><br><span class="line">                PropertyChanged.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">"CanSelected"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> PropertyChangedEventHandler PropertyChanged;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果数据类不继承INotifyPropertyChanged会有什么结果请自己尝试</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Window_Loaded</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span> name = <span class="string">"combox"</span> + (i + <span class="number">1</span>).ToString();</span><br><span class="line">        ComboBox box = <span class="keyword">this</span>.FindName(name) <span class="keyword">as</span> ComboBox;</span><br><span class="line">        box.DropDownOpened += Box_DropDownOpened;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Box_DropDownOpened</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; viewModel.NowIOList.Count; ++i)</span><br><span class="line">        viewModel.NowIOList[i].CanSelected = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span> name = <span class="string">"combox"</span> + (i + <span class="number">1</span>).ToString();</span><br><span class="line">        ComboBox box = <span class="keyword">this</span>.FindName(name) <span class="keyword">as</span> ComboBox;</span><br><span class="line">        <span class="keyword">if</span> (box.SelectedItem == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        viewModel.NowIOList.Find((a) =&gt; a.Index == (box.SelectedItem <span class="keyword">as</span> IOData).Index).CanSelected = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unloaded事件里还需要写-=</p><p>这里面的3是Demo里ComboBox的数量,具体可以根据页面的ComboBox数量多少自己修改,思路是展开ConboBox时,将已选中的Item的CanSelected置为false,那么转换之后对应Item的Visibility就是Collapsed</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><font color=0099ff>使用ComboBox打开作为更新的触发会造成大量无用的重复操作,我只是打开ComboBox并没有修改选中项,不应该更新List</font><br><font color=red>触发时机应该修改为SelectionChanged</font></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Window_Loaded</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span> name = <span class="string">"combox"</span> + (i + <span class="number">1</span>).ToString();</span><br><span class="line">        ComboBox box = <span class="keyword">this</span>.FindName(name) <span class="keyword">as</span> ComboBox;</span><br><span class="line">        box.SelectionChanged += Box_SelectionChanged;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Box_SelectionChanged</span>(<span class="params"><span class="keyword">object</span> sender, SelectionChangedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; viewModel.NowIOList.Count; ++i)</span><br><span class="line">        viewModel.NowIOList[i].CanSelected = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span> name = <span class="string">"combox"</span> + (i + <span class="number">1</span>).ToString();</span><br><span class="line">        ComboBox box = <span class="keyword">this</span>.FindName(name) <span class="keyword">as</span> ComboBox;</span><br><span class="line">        <span class="keyword">if</span> (box.SelectedItem == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        viewModel.NowIOList.Find((a) =&gt; a.Index == (box.SelectedItem <span class="keyword">as</span> IOData).Index).CanSelected = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://img-blog.csdnimg.cn/20200718134109302.gif" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF的后台数据绑定</title>
      <link href="/2020/07/17/WPF-BackstageBinding/"/>
      <url>/2020/07/17/WPF-BackstageBinding/</url>
      
        <content type="html"><![CDATA[<p>有很多时候,自定义控件是由多个不同的系统提供的控件组合起来的,那么在Xaml前端界面上,实例化对象之后,是没有办法访问到内部的控件的(哪怕你命了名),但是又想给他绑定数据源怎么办呢?</p><p>2020-07-21更新TextBox绑定List某项</p><a id="more"></a><h2 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ProgressBar</span> <span class="attr">Grid.Row</span>=<span class="string">"0"</span> <span class="attr">x:Name</span>=<span class="string">"progressBar"</span> <span class="attr">x:FieldModifier</span>=<span class="string">"public"</span> <span class="attr">Style</span>=<span class="string">"&#123;StaticResource ProgressBarStyle2&#125;"</span> </span></span><br><span class="line"><span class="tag">                     <span class="attr">local:EllipseClipper.IsClipping</span>=<span class="string">"True"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">Height</span>=<span class="string">"100"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Top"</span> </span></span><br><span class="line"><span class="tag">                     <span class="attr">Width</span>=<span class="string">"100"</span> <span class="attr">Value</span>=<span class="string">"50"</span> <span class="attr">RenderTransformOrigin</span>=<span class="string">"0.5,0.5"</span> <span class="attr">Foreground</span>=<span class="string">"&#123;DynamicResource BodorBkColor&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ProgressBar.Effect</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DropShadowEffect</span> <span class="attr">BlurRadius</span>=<span class="string">"7"</span> <span class="attr">Direction</span>=<span class="string">"-500"</span> <span class="attr">Color</span>=<span class="string">"#FF3E3E3E"</span> <span class="attr">RenderingBias</span>=<span class="string">"Quality"</span> <span class="attr">FrameworkElement.FlowDirection</span>=<span class="string">"LeftToRight"</span> <span class="attr">ShadowDepth</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ProgressBar.Effect</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ProgressBar.Background</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">"#363636"</span> <span class="attr">Offset</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">"#656666"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ProgressBar.Background</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ProgressBar.RenderTransform</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TransformGroup</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ScaleTransform</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">SkewTransform</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">RotateTransform</span> <span class="attr">Angle</span>=<span class="string">"-90"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">TranslateTransform</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">TransformGroup</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ProgressBar.RenderTransform</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ProgressBar</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Label</span> <span class="attr">Grid.Row</span>=<span class="string">"1"</span> <span class="attr">x:Name</span>=<span class="string">"labelModelName"</span> <span class="attr">x:FieldModifier</span>=<span class="string">"public"</span> <span class="attr">Content</span>=<span class="string">"功率(KW)"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">Foreground</span>=<span class="string">"&#123;StaticResource NormalForeground&#125;"</span> <span class="attr">FontSize</span>=<span class="string">"15"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Label</span> <span class="attr">Grid.Row</span>=<span class="string">"0"</span> <span class="attr">x:Name</span>=<span class="string">"labelValue"</span> <span class="attr">x:FieldModifier</span>=<span class="string">"public"</span> <span class="attr">Content</span>=<span class="string">"&#123;Binding Value, ElementName=progressBar,Converter=&#123;StaticResource ValueConverter&#125;&#125;"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">Foreground</span>=<span class="string">"&#123;StaticResource NormalForeground&#125;"</span> <span class="attr">FontSize</span>=<span class="string">"15"</span> <span class="attr">SizeChanged</span>=<span class="string">"labelValue_SizeChanged"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这段xaml的代码不保证有效,只是举个例子随便截取的一段,这个自定义控件由一个ProgreeBar和两个Label组成,其中Label1的Content绑定的是ProgressBar的Value,那么在外部调用这个自定义控件时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">local:LocalUserControl</span> <span class="attr">x:Name</span>=<span class="string">"localUserControl"</span> <span class="attr">Grid.Column</span>=<span class="string">"0"</span> <span class="attr">Width</span>=<span class="string">"120"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这个时候已经访问不到内部的ProgressBar了,怎么绑定数据就是一个问题了</p><p>也不可能在控件里就绑定,那所有的控件绑定的都是一个数据源了</p><h2 id="后台绑定"><a href="#后台绑定" class="headerlink" title="后台绑定"></a>后台绑定</h2><p>之前说xaml里哪怕内部的控件命了名也访问不了,那么命名干什么呢?是为了让后台代码可以访问到</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定当前速度</span></span><br><span class="line">CurrentSpeedBall.progressBar.Maximum = <span class="number">100</span>;</span><br><span class="line">SetBindings(CurrentSpeedBall.progressBar, viewModel.motionStatus, <span class="string">"Data"</span>, BindingMode.OneWay, ProgressBar.ValueProperty);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定和初始化进给倍率</span></span><br><span class="line">viewModel.motionStatus.feedRate = BusinessLayerService.CommonControlStatus.FeedRate = <span class="number">100</span>;</span><br><span class="line">SetBindings(FeedRateSlider.slider, viewModel.motionStatus, <span class="string">"feedRate"</span>, BindingMode.TwoWay, Slider.ValueProperty);</span><br></pre></td></tr></table></figure><p>后台是可以通过命名+.+命名的方式访问到内部的控件的</p><h2 id="SetBinding-amp-BindingOperations"><a href="#SetBinding-amp-BindingOperations" class="headerlink" title="SetBinding &amp; BindingOperations"></a>SetBinding &amp; BindingOperations</h2><p>这两者没什么大的区别,只是使用方法略微不同<br><font color=0099ff>如果需要封装成函数,控件的类型写UserControl会无法转换,所以应该写FrameWorkElement</font></p><ul><li><p>SetBinding使用:<br>UserControl.SetBinding(DependcyProperty dp,BindingBase binding)</p></li><li><p>BindingOperations使用:<br>BindingOperations.SetBinding(Obj, DepProperty, binding);</p></li><li><p>Binding.Source<br>数据源,一般都是一个类</p></li><li><p>Binding.Path<br>双向绑定的时候或者数据源是类的时候会需要,<font color=0099ff>如果数据源是类,path就是成员变量的名称</font></p></li><li><p>Binding.Mode<br>绑定的方式,和xaml里一致,one way/two way/…之类的,UpdateTrigger也是一样的设置方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetBindings</span>(<span class="params">FrameworkElement Obj, Object Source, <span class="keyword">string</span> PropertyPath, BindingMode Mode, DependencyProperty DepProperty</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Binding binding = <span class="keyword">new</span> Binding();</span><br><span class="line">    binding.Source = Source;</span><br><span class="line">    binding.Path = <span class="keyword">new</span> PropertyPath(PropertyPath);</span><br><span class="line">    binding.Mode = Mode;</span><br><span class="line">    <span class="keyword">if</span> (Mode == BindingMode.TwoWay)</span><br><span class="line">        binding.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;</span><br><span class="line">    BindingOperations.SetBinding(Obj, DepProperty, binding);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><p>如果绑定之后,界面UI没有变化,有可能是因为数据源没有通知UI发生了变化<br><font color=0099ff>数据源的类应该继承INotifyPropertyChanged,并且实现接口</font></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DataSource</span> : <span class="title">INotifyPropertyChanged</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">double</span> _Data;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">double</span> Data</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">get</span> &#123; <span class="keyword">return</span> _Data; &#125;</span><br><span class="line">           <span class="keyword">set</span></span><br><span class="line">           &#123;</span><br><span class="line">               _Data = <span class="keyword">value</span>;</span><br><span class="line">               <span class="keyword">if</span> (PropertyChanged != <span class="literal">null</span>)</span><br><span class="line">                   PropertyChanged.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">"Data"</span>));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">event</span> PropertyChangedEventHandler PropertyChanged;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://img-blog.csdnimg.cn/20200717105323104.gif" alt="在这里插入图片描述"></p><h2 id="TextBox绑定List某项"><a href="#TextBox绑定List某项" class="headerlink" title="TextBox绑定List某项"></a>TextBox绑定List某项</h2><p>如果遇到那种参数很多，但是有共同项的，挨个在viewModel里定义的话既不优雅工作量也很大，我们可以将共同的参数提取出来建一个类，然后new出来对象放入List里，可以减少很多工作量</p><p>比如现在有三根轴x，y，z，三根轴都有参数MaxSpeed，那么定义Axis0MaxSpeed,Axis1MaxSpeed,Axis2MaxSpeed就会巨麻烦</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AxisData</span> : <span class="title">INotifyPropertyChanged</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> maxSpeed;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> MaxSpeed</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> maxSpeed; &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            maxSpeed = <span class="keyword">value</span>;</span><br><span class="line">            <span class="keyword">if</span> (PropertyChanged != <span class="literal">null</span>)</span><br><span class="line">                PropertyChanged.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">"MaxSpeed"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用一个List,初始化三个对象,分别更新他们的值即可</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;AxisData&gt; AxisDataList = <span class="keyword">new</span> List&lt;AxisData&gt;() &#123; <span class="keyword">new</span> AxisData(), <span class="keyword">new</span> AxisData(), <span class="keyword">new</span> AxisData() &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AxisConfigViewModel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Task task = <span class="keyword">new</span> Task(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        UpdateData();</span><br><span class="line">    &#125;);</span><br><span class="line">    task.Start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> 0号轴</span></span><br><span class="line">        AxisDataList[<span class="number">0</span>].Number = BusinessLayerParamterService.Instance.AxisConfig.AxisList[<span class="number">0</span>].Number;</span><br><span class="line">        AxisDataList[<span class="number">0</span>].MaxSpeed = BusinessLayerParamterService.Instance.AxisConfig.AxisList[<span class="number">0</span>].MotionParms.MaxSpeed;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">       <span class="meta">#<span class="meta-keyword">region</span> 1号轴</span></span><br><span class="line">        AxisDataList[<span class="number">1</span>].Number = BusinessLayerParamterService.Instance.AxisConfig.AxisList[<span class="number">1</span>].Number;</span><br><span class="line">        AxisDataList[<span class="number">1</span>].MaxSpeed = BusinessLayerParamterService.Instance.AxisConfig.AxisList[<span class="number">1</span>].MotionParms.MaxSpeed;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span> </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>List的数据,绑定某项到TextBox,xaml里我写的Binding不知道为啥不生效,所以我只能放在后台写了,Axis0MaxSpeed是前端TextBox的名字</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最大速度</span></span><br><span class="line">Axis0MaxSpeed.SetBinding(TextBox.TextProperty, <span class="keyword">new</span> Binding(<span class="string">"[0].MaxSpeed"</span>)</span><br><span class="line">&#123; Source = viewModel.AxisDataList, Mode = BindingMode.TwoWay, UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML制作个人简介页面</title>
      <link href="/2020/07/15/HTML-About/"/>
      <url>/2020/07/15/HTML-About/</url>
      
        <content type="html"><![CDATA[<p>我的博客是看的大神教程一步步做的,然后所以我的about界面,也准备仿着大佬的做，之前根本没学过web的前端，只接触过xaml这种带标签的设计语言…</p><a id="more"></a><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>设计这个东西还是比较难得,我就直接没有设计,布局是照着别人的抄的,虽然实现是自己实现的，但是如果还是侵权的话，联系我删除<br><a href="https://www.itrhx.com/about/" target="_blank" rel="noopener">大佬的about界面</a> </p><ul><li>最上层,旋转的头像、昵称、生日等信息</li><li>中间左半部分，技能和占比</li><li>中间右半部分，个人的简介</li><li>底部，图片链接</li><li>最底部，版权信息、博客链接</li></ul><p>确定好每个区域的位置，背景色和透明度，颜色我不会弄成渐变的，暂且纯色代替，css我也没学过，写法如果错误请见谅..</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.center</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 20%;</span><br><span class="line">            right: 20%;</span><br><span class="line">            top: 10%;</span><br><span class="line">            width: 60%;</span><br><span class="line">            height: 15%;</span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span>: 0<span class="selector-class">.95</span>;</span></span><br><span class="line">            float: left;</span><br><span class="line">            background-color: white;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.centerAfterLeft</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 20%;</span><br><span class="line">            top: 26%;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span>: 29<span class="selector-class">.5</span>%;</span></span><br><span class="line">            height: 50%;</span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span>: 0<span class="selector-class">.95</span>;</span></span><br><span class="line">            float: left;</span><br><span class="line">            background-color: white;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.centerAfterRight</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            right: 20%;</span><br><span class="line">            top: 26%;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span>: 29<span class="selector-class">.5</span>%;</span></span><br><span class="line">            height: 50%;</span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span>: 0<span class="selector-class">.95</span>;</span></span><br><span class="line">            float: left;</span><br><span class="line">            background-color: white;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 20%;</span><br><span class="line">            right: 20%;</span><br><span class="line">            top: 77%;</span><br><span class="line">            width: 60%;</span><br><span class="line">            height: 15%;</span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span>: 0<span class="selector-class">.95</span>;</span></span><br><span class="line">            background-color: white;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.lastfooter</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 20%;</span><br><span class="line">            right: 20%;</span><br><span class="line">            top: 93%;</span><br><span class="line">            width: 60%;</span><br><span class="line">            height: 30px;</span><br><span class="line">            vertical-align: middle;</span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: transparent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line">            background-color: rgb(81, 77, 85);</span><br><span class="line">            font-family: 楷体;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="头像旋转"><a href="#头像旋转" class="headerlink" title="头像旋转"></a>头像旋转</h3><p>遇到不会的就要多百度一下，然后我惊讶的发现了大佬也是查询的这篇博客，还留了言..<br><a href="https://blog.csdn.net/ly305750665/article/details/71499497/" target="_blank" rel="noopener">HTML图片旋转</a></p><p>基本上博客上的内容复制过去就直接能用，然后我就不求甚解了..</p><h3 id="文字排版"><a href="#文字排版" class="headerlink" title="文字排版"></a>文字排版</h3><p>拿最上层举例,昵称和后面的文字是需要在一行的,标签p需要设置display:inline-block;<br>然后空格我也不知道为啥HTML默认不显示,我查到的方法是&amp;nbsp,好像markdown里也是这样的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: left;margin-left: 20px;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 10px;display: inline-block;font-weight: bold;"</span>&gt;</span>昵称:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 10px;display: inline-block;"</span>&gt;</span>&amp;nbsp&amp;nbsp染墨灬若流云<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 15px;display: inline-block;font-weight: bold;"</span>&gt;</span>最爱:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 15px;display: inline-block;"</span>&gt;</span>&amp;nbsp&amp;nbsp迷人又可爱的鹿宝宝~<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我知道这样写会有问题,如果是xaml布局,我会考虑竖屏下的情况,避免分辨率变化造成的页面显示异常,但是html实在是无能为力…</p><p>中间的右半部分,那个黑色的点很容易让人想到markdown的-,那么是不是html可以用markdown语法呢?很遗憾不可以,但是可以把markdown转换成html,Typora或者CSDN的编辑器都支持这个功能</p><p><img src="https://img-blog.csdnimg.cn/20200715150301188.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>学历: <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>现况: <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>目标: <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>博客: <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>兴趣: &gt;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导出后最后是没有<code>&lt;br&gt;</code>标签的,我是为了和左边对齐</p><h3 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h3><p>这个我查了很多,都是用js来做,可惜js我也没学过,我觉得我在window_load事件中写会导致刷新的时候明显感觉矩形闪烁,大佬的博客about界面就没这个问题,所以我觉得这个方法不太对..</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*技能条*/</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"SkillCanvas"</span>);</span><br><span class="line"><span class="keyword">if</span> (canvas == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">12</span>, <span class="number">39</span>, <span class="number">64</span>, <span class="number">89</span>, <span class="number">114</span>);</span><br><span class="line"><span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"#4AB480"</span>, <span class="string">"#E1AB3E"</span>, <span class="string">"#DC595#7390F2"</span>, <span class="string">"#747DC5"</span>);</span><br><span class="line"><span class="keyword">var</span> l = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">120</span>, <span class="number">150</span>, <span class="number">40</span>, <span class="number">60</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">var</span> content = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">    content.fillStyle = y[i];</span><br><span class="line">    content.fillRect(<span class="number">0</span>, t[i], l[i], <span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写维护性很差很差,但是考虑到这个界面过很久很久才可能更新,所以先只追求效果,不追求代码规范(给自己的菜找一找借口)</p><p>技能的百分比就还是之前的方法,移到合适的位置就好<br>排版的话我毕竟没学过,追求效果类似我用的margin-left,直接偏移过去,不知道更优雅的做法是怎么样的..大佬的这个界面是禁用左右键和F12的..</p><h3 id="禁用左右键和F12"><a href="#禁用左右键和F12" class="headerlink" title="禁用左右键和F12"></a>禁用左右键和F12</h3><p>大佬这样做的目的可能是保护自己的代码或者不让自己的界面被人改动,既然我们是仿照大佬的做,这个功能我们也要有</p><p>JS也可以禁用左右键,但是网上说禁用JS脚本后这招就没用了,所以这里用html自带的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">topmargin</span>=<span class="string">"0"</span> <span class="attr">oncontextmenu</span>=<span class="string">"return false"</span> <span class="attr">ondragstart</span>=<span class="string">"return false"</span> <span class="attr">onselectstart</span>=<span class="string">"return false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onselect</span>=<span class="string">"document.selection.empty()"</span> <span class="attr">oncopy</span>=<span class="string">"document.selection.empty()"</span> <span class="attr">onbeforecopy</span>=<span class="string">"return false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onmouseup</span>=<span class="string">"document.selection.empty()"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将这段放入body标签中即可生效</p><p>禁用F12我只找到了JS的方法,不知道大佬是怎么做的..</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onkeydown = <span class="built_in">window</span>.onkeyup = <span class="built_in">window</span>.onkeypress = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否按下F12，F12键码为123  </span></span><br><span class="line">        <span class="keyword">if</span> (event.keyCode = <span class="number">123</span>) &#123;</span><br><span class="line">            event.preventDefault(); <span class="comment">// 阻止默认事件行为  </span></span><br><span class="line">            <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>链接是<code>&lt;a&gt;</code>标签,图片链接就是在这个标签里加入一个<code>&lt;img&gt;</code>标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://blog.csdn.net/Austin_Yan"</span> <span class="attr">target</span>=<span class="string">"-blank"</span> <span class="attr">title</span>=<span class="string">"CSDN"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"blog"</span> <span class="attr">style</span>=<span class="string">"margin-top: 0px;left: 75%;position: absolute;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/AustinYANyh/Image@1.1.1/CSDN.png"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>target<br>设置为-blank表示在浏览器新标签页打开</li><li>title<br>替换文字,鼠标移到上方显示的文字</li></ul><p>唤醒微信的我没查到,查到的也不能用,但是QQ的可以<br>跳转链接为<a href="http://wpa.qq.com/msgrd?v=3" target="_blank" rel="noopener">http://wpa.qq.com/msgrd?v=3</a> &amp;uin=1241528539 &amp;site=qq&amp;menu=yes<br>里面有空格是因为我不加空格我跳转之后啥也不发生…加了空格貌似发送了点什么但是不太对的样子…</p><h3 id="飘雪"><a href="#飘雪" class="headerlink" title="飘雪"></a>飘雪</h3><p>飘雪的代码来源于大佬的教程<a href="https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/" target="_blank" rel="noopener">https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/</a></p><p>将js代码拷贝到script标签下,然后window_load事件调用即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> <span class="title">StartSnow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/* 调用及控制方法 */</span></span><br><span class="line">        <span class="keyword">var</span> snow = <span class="keyword">new</span> snowFall(&#123; <span class="attr">maxFlake</span>: <span class="number">60</span> &#125;);</span><br><span class="line">        snow.start();</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>一些小细节比如说,中间左右部分之间的间隔和上下的不一致..背景图没有找用纯色代替..还有大佬的模块背景和技能条的颜色都是渐变的..这些我都没处理好,不过还是先记录下来先做到这个样子吧..</p><p><img src="https://img-blog.csdnimg.cn/20200715150314233.gif" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF的按行高亮显示文本框</title>
      <link href="/2020/07/10/WPF-HightLightTextBox/"/>
      <url>/2020/07/10/WPF-HightLightTextBox/</url>
      
        <content type="html"><![CDATA[<p>之前做Winform的防QQ的通讯程序的时候，用到了文本框高亮显示，现在试试在WPF里试着实现</p><a id="more"></a><h2 id="RichTextBox实现"><a href="#RichTextBox实现" class="headerlink" title="RichTextBox实现"></a>RichTextBox实现</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>利用TextPointer<br>使用GetPositionAtOffst(double offset)方法获取需要高亮的文字开始位置的索引和结尾位置的索引</li><li>获取偏移量<br>RichTextBox行结尾处的偏移量为<font color=0099ff>开头的偏移量</font>+<font color=0099ff>文本长度</font>+<font color=0099ff>4</font>,这里的4是”\r\n”的长度</li><li>利用TextRange内的ApplyPropertyValue方法<br>新建一个TextRange,参数就是刚才的两个索引(TextPointer),然后修改TextElement的附加属性</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">TextRange textrange = <span class="keyword">new</span> TextRange(OrderShow.Document.ContentStart, OrderShow.Document.ContentEnd);</span><br><span class="line"><span class="keyword">string</span>[] str = textrange.Text.Split(<span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"\r\n"</span> &#125;, StringSplitOptions.RemoveEmptyEntries);</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.Count(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">    Dispatcher.BeginInvoke(<span class="keyword">new</span> Action(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        textrange = <span class="keyword">new</span> TextRange(OrderShow.Document.ContentStart, OrderShow.Document.ContentEnd);</span><br><span class="line">        textrange.ApplyPropertyValue(TextElement.ForegroundProperty, System.Windows.Media.Brushes.Black);</span><br><span class="line">        textrange.ApplyPropertyValue(TextElement.FontWeightProperty, FontWeights.Regular);</span><br><span class="line">    &#125;));</span><br><span class="line">    TextPointer p1 = OrderShow.Selection.Start;</span><br><span class="line">    p1 = p1.GetPositionAtOffset(index);</span><br><span class="line">    index += str[i].Length;</span><br><span class="line">    TextPointer p2 = OrderShow.Selection.Start;</span><br><span class="line">    p2 = p2.GetPositionAtOffset(index);</span><br><span class="line">    Dispatcher.BeginInvoke(<span class="keyword">new</span> Action(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        textrange = <span class="keyword">new</span> TextRange(p1, p2);</span><br><span class="line">        textrange.ApplyPropertyValue(TextElement.ForegroundProperty, System.Windows.Media.Brushes.Blue);</span><br><span class="line">        textrange.ApplyPropertyValue(TextElement.FontWeightProperty, FontWeights.Bold);</span><br><span class="line">    &#125;));</span><br><span class="line">    index += <span class="number">4</span>;</span><br><span class="line">    Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">Dispatcher.BeginInvoke(<span class="keyword">new</span> Action(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    textrange = <span class="keyword">new</span> TextRange(OrderShow.Document.ContentStart, OrderShow.Document.ContentEnd);</span><br><span class="line">    textrange.ApplyPropertyValue(TextElement.ForegroundProperty, System.Windows.Media.Brushes.Black);</span><br><span class="line">    textrange.ApplyPropertyValue(TextElement.FontWeightProperty, FontWeights.Regular);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>然而有个最严重的问题,RichTextBox的ScollViewer的方法除了ScrollToEnd和ScrollToHome外只有设置水平和垂直的偏移量,根据高亮内容的变化,不太方便控制滚动条到合适的位置..(我不会而已,不代表不可以实现)</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>只改了前景色没修改背景色<br><font color=red>高亮显示前光标必须在ContentStart,不然之后的index计算不准</font><br><img src="https://img-blog.csdnimg.cn/20200711142031239.gif" alt="在这里插入图片描述"></p><h2 id="TextBox实现"><a href="#TextBox实现" class="headerlink" title="TextBox实现"></a>TextBox实现</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>为了解决上面的问题,所以又想用最开始的这个控件,优点是TextBox有ScrollToLine(int LineIndex)方法,滚动条的位置不需要管,只需要给行号即可,行号可以把TextBox的文本内容按”\r\n”分割获得,缺点是,高亮显示没有RichTextBox那么方便</p><ul><li>Select(int start,int length)方法<br>使用Select方法,可以选中start位置开始长度为length的字符<font color=0099ff>要有显示效果需要TextBox获得焦点</font></li><li>SelectionBrush(System.Windows.Media.Brush)<br>使用这个方法可以改变文本被选中的颜色,效果肯定不如既可以修改Foreground又可以修改Background的,其他方式我没查出来..(暂且先这样做)</li><li>获取偏移量<br>方法和上面的一样,区别是TextBox计算时末尾加的是2,只有”\n”</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> txt = <span class="keyword">string</span>.Empty;</span><br><span class="line">txt = OrderShow.Text;</span><br><span class="line">OrderShow.Focus();</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span>[] str = txt.Split(<span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"\r\n"</span> &#125;, StringSplitOptions.None);</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.Count(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">    OrderShow.Focus();</span><br><span class="line">    OrderShow.CaretIndex = <span class="number">0</span>;</span><br><span class="line">    OrderShow.Select(index, str[i].Length);</span><br><span class="line">    OrderShow.ScrollToLine(i);</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(o =&gt; Thread.Sleep(<span class="number">200</span>));</span><br><span class="line">    t.Start(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">while</span> (t.IsAlive)</span><br><span class="line">        System.Windows.Forms.Application.DoEvents();</span><br><span class="line">    index += str[i].Length + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">Importbtn.Focus();</span><br></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>之前都是新建了一个线程去做高亮的事情,因为Thread.Sleep()在主线程调用会让界面UI假死,然后遇到了各种什么可能是CLR错误之类的东西,而且换到TextBox之后居然只有调试进断点才能看到效果,直接运行界面没任何变化</p><p>避免界面假死在Winform的时候用过DoEvents,所以想了一下直接不使用线程了,就在主线程延时操作</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> Thread(o =&gt; Thread.Sleep(<span class="number">200</span>));</span><br><span class="line">t.Start(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">while</span> (t.IsAlive)</span><br><span class="line">    System.Windows.Forms.Application.DoEvents();</span><br></pre></td></tr></table></figure><p>线程只需要延时即可</p><p>文本内容如果有空行,那么在分割的时候StringSplitOptiions选择None,不然索引位置会计算错误造成高亮的不是想要的内容</p><h2 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h2><p><img src="https://img-blog.csdnimg.cn/20200710140653895.gif" alt="在这里插入图片描述"><br><font color=0099ff size=16>2020-07-11更新</font></p><p><font color=0099ff size=5>综合两种方法的优缺点,但是又有了新的问题</font></p><h2 id="ListView实现"><a href="#ListView实现" class="headerlink" title="ListView实现"></a>ListView实现</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>TextBox的滚动条可以精确到行,RichTextBox的字体高亮,把这两个结合起来</p><ul><li>TextBlock作为Item<br>使用TextBlock的原因是因为他有Forceground、Background、FontWeight和FontSize属性</li><li>ScrollToView(Item item)<br>这个方法可以精确的将滚动条跳转到ListView中的控件,与TextBox的ScrollToLine<font color=red>不同的是这个的滚动条位置是将控件显示在最下方</font></li><li>优点<br>ListView本身就有行的概念,放入的TextBlock就是按行排布的,所以不需要计算index来找到需要高亮的文本内容</li></ul><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.Count(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">    listview.ScrollIntoView(listview.Items[i]);</span><br><span class="line">    (listview.Items[i] <span class="keyword">as</span> TextBlock).Foreground = Brushes.Red;</span><br><span class="line">    (listview.Items[i] <span class="keyword">as</span> TextBlock).Background = Brushes.Yellow;</span><br><span class="line">    (listview.Items[i] <span class="keyword">as</span> TextBlock).FontWeight = FontWeights.Bold;</span><br><span class="line">    (listview.Items[i] <span class="keyword">as</span> TextBlock).FontSize = <span class="number">16</span>;</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(o =&gt; Thread.Sleep(<span class="number">100</span>));</span><br><span class="line">    t.Start(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">while</span> (t.IsAlive)</span><br><span class="line">        System.Windows.Forms.Application.DoEvents();</span><br><span class="line">    (listview.Items[i] <span class="keyword">as</span> TextBlock).Foreground = Brushes.White;</span><br><span class="line">    (listview.Items[i] <span class="keyword">as</span> TextBlock).Background = Brushes.Transparent;</span><br><span class="line">    (listview.Items[i] <span class="keyword">as</span> TextBlock).FontWeight = FontWeights.Regular;</span><br><span class="line">    (listview.Items[i] <span class="keyword">as</span> TextBlock).FontSize = <span class="number">13</span>;</span><br><span class="line">    t.Abort();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遇到的问题-1"><a href="#遇到的问题-1" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>ListView默认的MouseOver和Selected会有巨丑的深蓝色背景Bodor,我们按行高亮只需要演示,不需要这个东西<br>重写样式将对应的Background修改为Transparent</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;Style TargetType=<span class="string">"&#123;x:Type ListViewItem&#125;"</span>&gt;</span><br><span class="line">    &lt;Setter Property=<span class="string">"Template"</span>&gt;</span><br><span class="line">        &lt;Setter.Value&gt;</span><br><span class="line">            &lt;ControlTemplate TargetType=<span class="string">"&#123;x:Type ListViewItem&#125;"</span>&gt;</span><br><span class="line">                &lt;Border Name=<span class="string">"Bd"</span></span><br><span class="line">        Background=<span class="string">"&#123;TemplateBinding Background&#125;"</span> BorderBrush=<span class="string">"&#123;TemplateBinding BorderBrush&#125;"</span></span><br><span class="line">        BorderThickness=<span class="string">"&#123;TemplateBinding BorderThickness&#125;"</span> Padding=<span class="string">"&#123;TemplateBinding Padding&#125;"</span></span><br><span class="line">        SnapsToDevicePixels=<span class="string">"true"</span>&gt;</span><br><span class="line">                    <span class="comment">//用于显示本身的Content</span></span><br><span class="line">                    &lt;ContentPresenter HorizontalHorizontalContentAlignment&#125;<span class="string">"</span></span><br><span class="line"><span class="string">                      VerticalAlignment="</span>&#123;TemplateBinding VerticalContentAlignment&#125;<span class="string">"</span></span><br><span class="line"><span class="string">                      SnapsToDevicePixels="</span>&#123;TemplateBinding SnapsToDevicePixels&#125;<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">                &lt;/Border&gt;</span></span><br><span class="line"><span class="string">            &lt;/ControlTemplate&gt;</span></span><br><span class="line"><span class="string">        &lt;/Setter.Value&gt;</span></span><br><span class="line"><span class="string">    &lt;/Setter&gt;</span></span><br><span class="line"><span class="string">    &lt;Setter Property="</span>FocusVisualStyle<span class="string">" Value="</span>&#123;x:Null&#125;<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;Setter Property="</span>BorderThickness<span class="string">" Value="</span><span class="number">0</span><span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;Setter Property="</span>Foreground<span class="string">" Value="</span>Black<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;Setter Property="</span>Background<span class="string">" Value="</span>Transparent<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;Setter Property="</span>VerticalAlignment<span class="string">" Value="</span>Top<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;Setter Property="</span>FontSize<span class="string">" Value="</span><span class="number">14</span><span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;Style.Triggers&gt;</span></span><br><span class="line"><span class="string">        &lt;!--触发器--&gt;</span></span><br><span class="line"><span class="string">        &lt;Trigger Property="</span>IsMouseOver<span class="string">" Value="</span>True<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;Setter Property="</span>Background<span class="string">" Value="</span>Transparent<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">            &lt;Setter Property="</span>BorderBrush<span class="string">" Value="</span>Transparent<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">        &lt;/Trigger&gt;</span></span><br><span class="line"><span class="string">        &lt;Trigger Property="</span>IsSelected<span class="string">" Value="</span><span class="literal">true</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;Setter Property="</span>Background<span class="string">" Value="</span>Transparent<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">            &lt;Setter Property="</span>Foreground<span class="string">" Value="</span>White<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">        &lt;/Trigger&gt;</span></span><br><span class="line"><span class="string">    &lt;/Style.Triggers&gt;</span></span><br><span class="line"><span class="string">&lt;/Style&gt;</span></span><br></pre></td></tr></table></figure><p>但是,如果有编辑需求的就麻烦了,TextBlock不可以编辑,而且ListView也不可以像文本框一样选择一片<br>所以,需要编辑的时间将ListView隐藏,显示一个等大的TextBox去编辑吧#doge (下下策,好的方法我也不会)</p><h3 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/20200711141556398.gif" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>培养Vim使用习惯，Chrome安装Vimium插件</title>
      <link href="/2020/07/08/Chrome-Vimium/"/>
      <url>/2020/07/08/Chrome-Vimium/</url>
      
        <content type="html"><![CDATA[<p>为了让自己更快的熟练各种快捷键，但是仅仅在日常写代码的情况下，很明显是不够的，于是我在chrome上装了这个插件，使自己无论何时都在使用vim的过程中，达到迅速上手改变自己操作习惯的目的(尽量不使用鼠标)..</p><a id="more"></a><h2 id="Chrome-WebStore"><a href="#Chrome-WebStore" class="headerlink" title="Chrome WebStore"></a>Chrome WebStore</h2><p>首先在谷歌的插件商店中搜索Vimium,然后找到下载量最多的那个就是,直接下载安装即可,至于怎么翻墙,以后再写一篇</p><p><img src="https://img-blog.csdnimg.cn/20200708093132925.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Vimium常用命令"><a href="#Vimium常用命令" class="headerlink" title="Vimium常用命令"></a>Vimium常用命令</h2><ul><li>滚动<ul><li>j:与Vim一致,向下滚动</li><li>k:与Vim一致,向上滚动</li><li>d:向下滚动一个屏幕的距离</li><li>u:向上滚动一个屏幕的距离</li><li>gg:与Vim一致,到达页面顶部</li><li>G:与Vim一致,到达页面底部</li></ul></li><li>标签页<ul><li>J:切换到上一个标签页(为什么J变成向上切换??)</li><li>K:切换到下一个标签页</li></ul></li><li>页面操作<ul><li>x:关闭当前页面</li><li>X:恢复刚刚关闭的页面</li><li>r:重新加载页面</li><li>L:与Vim一致,前进</li><li>H:与Vim一致,后退</li><li>t:打开新标签页，直接可以输入网址</li></ul></li></ul><p>常用的命令好像暂时就这么多,但是如何想要打开某一个连接进去查看怎么办呢?</p><p>上面的快捷键只是一些很简单的常用的快捷键,还有很多没有列举,比如Vim是不用鼠标的,那么怎么点击链接就成了问题,我们也不可能不点击链接,所以<font color="red">快捷键f</font>就是专门处理链接的问题的</p><p><img src="https://img-blog.csdnimg.cn/2020070809315530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>虽然看上去很傻,而且效率肯定不如鼠标点击快,但是我的目的不是为了操作快,而且为了改变我的使用习惯,等到Vim随心所欲的时候,浏览器Vim插件的作用也就不存在了</p><p>突然想到为了发博客的图片能够显示居然还需要先发到CSDN上,CSDN居然变成了图床一样的用法,还是应该把自己以前做的图片服务器搭起来,也当作是复习了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF的Command传入多参和快捷键设置</title>
      <link href="/2020/07/07/WPF-ShortCutKey/"/>
      <url>/2020/07/07/WPF-ShortCutKey/</url>
      
        <content type="html"><![CDATA[<p>多活动活动脖子，多运动运动，拒绝颈椎病，从我做起！</p><a id="more"></a><h2 id="多路绑定-转换器"><a href="#多路绑定-转换器" class="headerlink" title="多路绑定+转换器"></a>多路绑定+转换器</h2><p>使用MVVM模式的时候,多半将view中产生的操作通过command绑定到viewModel下处理,可以使用commandparameter将需要的参数传递过去,但是如果需要的参数超过一个的情况下,该怎么处理呢?</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button x:Name=<span class="string">"btyAutoUp"</span> Content=<span class="string">"Y+"</span> Height=<span class="string">"50"</span> Canvas.Left=<span class="string">"101"</span> Width=<span class="string">"50"</span> VerticalContentAlignment=<span class="string">"Center"</span> Canvas.Top=<span class="string">"195"</span> Margin=<span class="string">"0,10,210,0"</span> VerticalAlignment=<span class="string">"Top"</span> HorizontalAlignment=<span class="string">"Right"</span>&gt;</span><br><span class="line">                   &lt;i:Interaction.Triggers&gt;</span><br><span class="line">                       &lt;i:EventTrigger EventName=<span class="string">"PreviewMouseDown"</span>&gt;</span><br><span class="line">                           &lt;i:InvokeCommandAction Command=<span class="string">"&#123;Binding JogCommand&#125;"</span>&gt;</span><br><span class="line">                               &lt;i:InvokeCommandAction.CommandParameter&gt;</span><br><span class="line">                                   &lt;MultiBinding Converter=<span class="string">"&#123;StaticResource YourConveter&#125;"</span>&gt;</span><br><span class="line">                                       &lt;Binding ElementName=<span class="string">"btyAutoUp"</span> Path=<span class="string">"Content"</span>&gt;&lt;/Binding&gt;</span><br><span class="line">                                       &lt;Binding ElementName=<span class="string">"stepbtn"</span> Path=<span class="string">"State"</span>&gt;&lt;/Binding&gt;</span><br><span class="line">                                       &lt;Binding ElementName=<span class="string">"StepDistance"</span> Path=<span class="string">"Text"</span>&gt;&lt;/Binding&gt;</span><br><span class="line">                                       &lt;Binding ElementName=<span class="string">"IncrSpeed"</span> Path=<span class="string">"Text"</span>&gt;&lt;/Binding&gt;</span><br><span class="line">                                   &lt;/MultiBinding&gt;</span><br><span class="line">                               &lt;/i:InvokeCommandAction.CommandParameter&gt;</span><br><span class="line">                           &lt;/i:InvokeCommandAction&gt;</span><br><span class="line">                       &lt;/i:EventTrigger&gt;</span><br><span class="line">                       &lt;i:EventTrigger EventName=<span class="string">"PreviewMouseUp"</span>&gt;</span><br><span class="line">                           &lt;i:InvokeCommandAction Command=<span class="string">"&#123;Binding JogStopCommand&#125;"</span>&gt;</span><br><span class="line">                               &lt;i:InvokeCommandAction.CommandParameter&gt;</span><br><span class="line">                                   &lt;MultiBinding Converter=<span class="string">"&#123;StaticResource YourConveter&#125;"</span>&gt;</span><br><span class="line">                                       &lt;Binding  ElementName=<span class="string">"btyAutoUp"</span> Path=<span class="string">"Content"</span>&gt;&lt;/Binding&gt;</span><br><span class="line">                                       &lt;Binding  ElementName=<span class="string">"stepbtn"</span> Path=<span class="string">"State"</span>&gt;&lt;/Binding&gt;</span><br><span class="line">                                   &lt;/MultiBinding&gt;</span><br><span class="line">                               &lt;/i:InvokeCommandAction.CommandParameter&gt;</span><br><span class="line">                           &lt;/i:InvokeCommandAction&gt;</span><br><span class="line">                       &lt;/i:EventTrigger&gt;</span><br><span class="line">                   &lt;/i:Interaction.Triggers&gt;</span><br><span class="line">               &lt;/Button&gt;</span><br></pre></td></tr></table></figure><p>MultiBinding中可以写很多个Binding,但是<MultiBinding>标签中必须要有一个转换器,转换器其实也很好写,就是把传入的参数备份一遍,不然传入下一个参数的时候上一个就消失了</p><p>与转换器不同的是,多路绑定转换继承的是iMultiValueConverter<br>普通绑定转换继承的iValueConverter</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MultiBindingConverter</span>:<span class="title">iMultiValueConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Convert</span>(<span class="params"><span class="keyword">object</span>[] values,Type targetType,<span class="keyword">object</span> parameter,CultureInfo culture</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> values.Clone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span>[] <span class="title">ConverterBack</span>(<span class="params"><span class="keyword">object</span>[] values,Type targetType,<span class="keyword">object</span> parameter,CultureInfo culture</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotlmplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200707170309701.png" alt="在这里插入图片描述"></p><h2 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h2><p>快捷键可以使用keydown事件也可以使用InputBinding,一个是写在xaml.cs里一个是写在viewModel里,我觉得没啥影响,看个人喜好<br>博客里写Binding的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Window.InputBindings&gt;</span><br><span class="line">    &lt;KeyBinding Getsture&#x3D;&quot;Control+Shift+B&quot; Command&#x3D;&quot;&#123;Binding DebugCommand&#125;&quot;&gt;</span><br><span class="line">&lt;&#x2F;Window.InputBindings&gt;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> DelegateCommand DebugCommand &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainWindowViewModel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DebugCommand = <span class="keyword">new</span> DelegateCommand(()=&gt;</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">if</span>(Keyboard.IsKeyDown(Key.LeftCtrl) &amp;&amp; Keyboard.IsKeyDown(Key.LeftShift) &amp;&amp; Keyboard.IsKeyDown(Key.B)) </span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">var</span> window = Application.Current.MainWindow;</span><br><span class="line">           MainWindow mainWindow = <span class="keyword">new</span> MainWindow(window);</span><br><span class="line">           MainWindow.IsOpen = <span class="literal">true</span>;</span><br><span class="line">           mainWindow.Show();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是有个问题暂时解决不了,微软的输入法Ctrl+Shift+B是表情,中文状态下会优先触发微软的输入法快捷键,英文就没问题</p><p><font size=16 color="0099ff">2020-07-08更新,问题解决</font></p><p><font size=10 color=red>以下代码和资料来源于:</font><br><a href="http://www.cppcns.com/ruanjian/csharp/92519.html" target="_blank" rel="noopener">http://www.cppcns.com/ruanjian/csharp/92519.html</a></p><p>先定义一个类,用来调用API</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HotKey</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 如果函数执行成功，返回值不为0。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 如果函数执行失败，返回值为0。要得到扩展错误信息，调用GetLastError。.NET方法:Marshal.GetLastWin32Error()</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="hWnd"&gt;</span>要定义热键的窗口的句柄<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="id"&gt;</span>定义热键ID（不能与其它ID重复） <span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="fsModifiers"&gt;</span>标识热键是否在按Alt、Ctrl、Shift、Windows等键时才会生效<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="vk"&gt;</span>定义热键的内容,WinForm中可以使用Keys枚举转换，</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> WPF中Key枚举是不正确的,应该使用System.Windows.Forms.Keys枚举，或者自定义正确的枚举或int常量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>, SetLastError = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">RegisterHotKey</span>(<span class="params">IntPtr hWnd, <span class="keyword">int</span> id, KeyModifiers fsModifiers, <span class="keyword">int</span> vk</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 取消注册热键</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="hWnd"&gt;</span>要取消热键的窗口的句柄<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="id"&gt;</span>要取消热键的ID<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>, SetLastError = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">UnregisterHotKey</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    IntPtr hWnd,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> id</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 向全局原子表添加一个字符串，并返回这个字符串的唯一标识符,成功则返回值为新创建的原子ID,失败返回0</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="lpString"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"kernel32"</span>, SetLastError = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">short</span> <span class="title">GlobalAddAtom</span>(<span class="params"><span class="keyword">string</span> lpString</span>)</span>;</span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"kernel32"</span>, SetLastError = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">short</span> <span class="title">GlobalDeleteAtom</span>(<span class="params"><span class="keyword">short</span> nAtom</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 定义了辅助键的名称（将数字转变为字符以便于记忆，也可去除此枚举而直接使用数值）</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">Flags()</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> KeyModifiers</span><br><span class="line">    &#123;</span><br><span class="line">        None = <span class="number">0</span>,</span><br><span class="line">        Alt = <span class="number">1</span>,</span><br><span class="line">        Ctrl = <span class="number">2</span>,</span><br><span class="line">        Shift = <span class="number">4</span>,</span><br><span class="line">            WindowsKey = <span class="number">8</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 热键的对应的消息ID</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_HOTKEY = <span class="number">0x312</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>WPF的处理方法与Winform略微不一致,需要使用HwndSource拦截Window消息,说的简单点也就是自己定义一个消息处理的方法,拦截到的消息如果是定义的快捷键,就执行自己定义的消息处理方法</p><p><font color="0099ff">如果是Contorl+B这种的直接调用即可,Control+Shift+B这种的KeyModifiers需要使用|连接</font></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Window_Loaded</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HwndSource hWndSource;</span><br><span class="line">    WindowInteropHelper wih = <span class="keyword">new</span> WindowInteropHelper(<span class="keyword">this</span>);</span><br><span class="line">    hWndSource = HwndSource.FromHwnd(wih.Handle);</span><br><span class="line">    <span class="comment">//添加处理程序</span></span><br><span class="line">    hWndSource.AddHook(MainWindowProc);</span><br><span class="line">    alts = HotKey.GlobalAddAtom(<span class="string">"Control-Shift-B"</span>);</span><br><span class="line">    HotKey.RegisterHotKey(wih.Handle, alts, HotKey.KeyModifiers.Ctrl | HotKey.KeyModifiers.Shift, (<span class="keyword">int</span>)System.Windows.Forms.Keys.B);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> IntPtr <span class="title">MainWindowProc</span>(<span class="params">IntPtr hwnd, <span class="keyword">int</span> msg, IntPtr wParam, IntPtr lParam, <span class="keyword">ref</span> <span class="keyword">bool</span> handled</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (msg)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> HotKey.WM_HOTKEY:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> sid = wParam.ToInt32();</span><br><span class="line">                <span class="keyword">if</span> (sid == alts)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//按下快捷键需要做的事情</span></span><br><span class="line">                &#125;</span><br><span class="line">                handled = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> IntPtr.Zero;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就已经可以无论中英文状态,按下快捷键都会响应</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Blend与Ps的交互</title>
      <link href="/2020/07/04/WPF-Blend&amp;Ps/"/>
      <url>/2020/07/04/WPF-Blend&amp;Ps/</url>
      
        <content type="html"><![CDATA[<p>每天都学习一点WPF相关的知识，虽然我不太想从事CS前端类的工作，但是其实我也不知道自己想干什么…</p><a id="more"></a><h2 id="获取PS文件的Path"><a href="#获取PS文件的Path" class="headerlink" title="获取PS文件的Path"></a>获取PS文件的Path</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Path Stroke=<span class="string">"Black"</span> StrokeThickness=<span class="string">"2"</span> Margin=<span class="string">"450,20,0,0"</span> Data=<span class="string">"M 0,0 C 250,0 50,200 300,200 M 50,50 A 20,20 0 1 0 70,70"</span>&gt;</span><br></pre></td></tr></table></figure><p>Path好用,但是Data难求,只要有Data就可以很容易画出复杂图形,虽然自从2015之后的Blend取消了导入Psd文件,但是可以从图层中复制svg,然后粘贴到文本编辑器中,就可以获取Path数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">width</span>=<span class="string">"3.44cm"</span> <span class="attr">height</span>=<span class="string">"0.406cm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">"evenodd"</span>  <span class="attr">stroke</span>=<span class="string">"rgb(0, 0, 0)"</span> <span class="attr">stroke-width</span>=<span class="string">"1px"</span> <span class="attr">stroke-linecap</span>=<span class="string">"butt"</span> <span class="attr">stroke-linejoin</span>=<span class="string">"miter"</span> <span class="attr">fill</span>=<span class="string">"none"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">d</span>=<span class="string">"M6.500,0.500 L91.500,0.500 C98.873,0.500 97.421,10.500 91.500,10.500 L6.500,10.500 C0.079,10.943 -2.443,1.118 6.500,0.500 Z"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前提是PS中图形是使用矩形工具这类路径操作画出来的，不然是没有path的</p><h2 id="WPF中使用Data"><a href="#WPF中使用Data" class="headerlink" title="WPF中使用Data"></a>WPF中使用Data</h2><p>将刚才svg中的标签首字母大写,d改为Data,就是取我们想要的信息然后复制,在WPF下直接放入Grid等容器中即可<br><img src="https://img-blog.csdnimg.cn/20200704105647781.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Path x:Name=<span class="string">"PART_Track"</span>  Stroke=<span class="string">"Black"</span> StrokeThickness=<span class="string">"1"</span> Data=<span class="string">"M18,0 L18,0 137,0 M137,0 A2.5,2.5 0 0 1 130,30 L13,30 A1,1 0 0 1 18,0z"</span>&gt;</span><br></pre></td></tr></table></figure><p>这是用代码画的，两条直线，两个圆弧，结果…不明白为什么L画出的直线和A画出的圆弧粗细不一样<br><img src="https://img-blog.csdnimg.cn/20200704105905494.jpg" alt="在这里插入图片描述"><br>PS中画好复制Path在WPF中使用的结果<br><img src="https://img-blog.csdnimg.cn/20200704110313712.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>好吧，这类工作还是应该交给专业的设计师来做，没有美工基础画出来的都是垃圾…自己画画简单的不复杂的还行…</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF的DataTrigger遇到的问题</title>
      <link href="/2020/07/01/WPF-DataTrigger/"/>
      <url>/2020/07/01/WPF-DataTrigger/</url>
      
        <content type="html"><![CDATA[<p>DataTrigger这种在xaml里的东西,因为打不了断点,所以很难找出错误到底在哪里,问题点很难定位,所以只能采取避免的方法暂时规避掉,等以后弄明白了再修改…</p><a id="more"></a><h2 id="DataTrigger不触发"><a href="#DataTrigger不触发" class="headerlink" title="DataTrigger不触发"></a>DataTrigger不触发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;TabItem x:Name&#x3D;&quot;Cutfilm_param_item&quot;  Style&#x3D;&quot;&#123;DynamicResource VerticalTabItemStyle&#125;&quot; Visibility&#x3D;&quot;Collapsed&quot;&gt;</span><br><span class="line">    &lt;i:Interaction.Triggers&gt;</span><br><span class="line">        &lt;ei:DataTrigger Binding&#x3D;&quot;&#123;Binding ElementName&#x3D;EnableCutFilm,Path&#x3D;IsChecked&#125;&quot; Value&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;ei:ChangePropertyAction TargetName&#x3D;&quot;Cutfilm_param_item&quot; PropertyName&#x3D;&quot;Visibility&quot; Value&#x3D;&quot;Visible&quot;&gt;&lt;&#x2F;ei:ChangePropertyAction&gt;</span><br><span class="line">        &lt;&#x2F;ei:DataTrigger&gt;</span><br><span class="line">        &lt;ei:DataTrigger Binding&#x3D;&quot;&#123;Binding ElementName&#x3D;EnableCutFilm,Path&#x3D;IsChecked&#125;&quot; Value&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;ei:ChangePropertyAction TargetName&#x3D;&quot;Cutfilm_param_item&quot; PropertyName&#x3D;&quot;Visibility&quot; Value&#x3D;&quot;Collapsed&quot;&gt;&lt;&#x2F;ei:ChangePropertyAction&gt;</span><br><span class="line">        &lt;&#x2F;ei:DataTrigger&gt;</span><br><span class="line">    &lt;&#x2F;i:Interaction.Triggers&gt;</span><br><span class="line">&lt;&#x2F;TabItem&gt;</span><br></pre></td></tr></table></figure><p>上面这部分xaml的目的是,通过一个名为EnableCutFilm的CheckBox的IsChecked属性控制一个名为Cutfilm_param_item的TabItem的显示与隐藏,但是很尴尬,界面初始化结束后,DataTrigger没有触发,再此后切换Tab页,然后DataTrigger才可以正常被触发</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>这个问题以前并不存在,但是在我弄了一个数据缓冲区使得点击确定之后(没有保存),下次界面上显示的是上次确定的数据(底层的数据被没有被修改)之后,这个DataTrigger就有问题了,解决办法是写一个转换器直接绑定<br><code>&lt;TabItem x:Name=&quot;Cutfilm_param_item&quot; Style=&quot;{DynamicResource VerticalTabItemStyle}&quot; Visibility=&quot;{Binding ElementName=EnableCutFilm,Path=IsChecked,Converter={StaticResource FilmCuttingConverter}}&quot;&gt;</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FilmCuttingConverter</span> : <span class="title">IValueConverter</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Convert</span>(<span class="params"><span class="keyword">object</span> <span class="keyword">value</span>, Type targetType, <span class="keyword">object</span> parameter, CultureInfo culture</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">if</span> ((<span class="keyword">bool</span>)<span class="keyword">value</span> == <span class="literal">true</span>)</span><br><span class="line">               <span class="keyword">return</span> Visibility.Visible;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               <span class="keyword">return</span> Visibility.Collapsed;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">ConvertBack</span>(<span class="params"><span class="keyword">object</span> <span class="keyword">value</span>, Type targetType, <span class="keyword">object</span> parameter, CultureInfo culture</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">if</span> (Visibility.Visible == (Visibility)<span class="keyword">value</span>)</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这样界面初始化结束,就会根据从下面读到的状态直接控制TabItem的显示隐藏,不会出现不触发的情况</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF绘制坐标系,实现折线编辑</title>
      <link href="/2020/06/30/WPF-CoordinateSystem/"/>
      <url>/2020/06/30/WPF-CoordinateSystem/</url>
      
        <content type="html"><![CDATA[<p>三个月之前做的一个控件,功能是实现曲线编辑(折线,光滑未实现),因为开发经验不足并且那个控件的位置大小几乎都是确定的,所以当时没考虑到移到别的地方,很多地方都是写死的,后期修改工作量太大…<br>所以现在将其修改为大小可变的坐标系…</p><a id="more"></a><h2 id="绘制坐标轴和刻度"><a href="#绘制坐标轴和刻度" class="headerlink" title="绘制坐标轴和刻度"></a>绘制坐标轴和刻度</h2><p>WPF的坐标系是从左上角为原点,向右的方向为x轴,向下的方向为y轴,所以使用canvas容器布局需要进行旋转,将坐标系旋转为正常的笛卡尔坐标系…<br>因为要动态的修改大小,所以刻度和刻度线就不可以都画在xaml里…</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 绘制坐标轴和刻度</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawAxisAndText</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//左右两条线xaml里面画</span></span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span> || i != <span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//坐标线</span></span><br><span class="line">            Line lineX = <span class="keyword">new</span> Line()</span><br><span class="line">            &#123;</span><br><span class="line">                Stroke = <span class="keyword">new</span> SolidColorBrush(Colors.White),</span><br><span class="line">                StrokeDashArray = <span class="keyword">new</span> DoubleCollection(<span class="number">6</span>),</span><br><span class="line">                StrokeThickness = <span class="number">1</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">            Canvas.SetZIndex(lineX, <span class="number">0</span>);</span><br><span class="line">            Line lineY = <span class="keyword">new</span> Line()</span><br><span class="line">            &#123;</span><br><span class="line">                Stroke = <span class="keyword">new</span> SolidColorBrush(Colors.White),</span><br><span class="line">                StrokeDashArray = <span class="keyword">new</span> DoubleCollection(<span class="number">6</span>),</span><br><span class="line">                StrokeThickness = <span class="number">1</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">            Canvas.SetZIndex(lineY, <span class="number">0</span>);</span><br><span class="line">            lineX.X1 = (<span class="keyword">double</span>)((<span class="keyword">decimal</span>)CanvasInPath.Width / <span class="number">10</span>) * i;</span><br><span class="line">            lineX.X2 = (<span class="keyword">double</span>)((<span class="keyword">decimal</span>)CanvasInPath.Width / <span class="number">10</span>) * i;</span><br><span class="line">            lineX.Y1 = <span class="number">0</span>;</span><br><span class="line">            lineX.Y2 = CanvasInPath.Height;</span><br><span class="line"></span><br><span class="line">            lineY.X1 = <span class="number">0</span>;</span><br><span class="line">            lineY.X2 = CanvasInPath.Width;</span><br><span class="line">            lineY.Y1 = (<span class="keyword">double</span>)((<span class="keyword">decimal</span>)CanvasInPath.Height / <span class="number">10</span>) * i;</span><br><span class="line">            lineY.Y2 = (<span class="keyword">double</span>)((<span class="keyword">decimal</span>)CanvasInPath.Height / <span class="number">10</span>) * i;</span><br><span class="line">            CanvasInPath.Children.Add(lineX);</span><br><span class="line">            CanvasInPath.Children.Add(lineY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//刻度</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            TextBlock xblock = <span class="keyword">new</span> TextBlock();</span><br><span class="line">            xblock.Foreground = <span class="keyword">new</span> SolidColorBrush(Colors.White);</span><br><span class="line">            xblock.FontSize = <span class="number">10</span>;</span><br><span class="line">            TranslateTransform translateTransform = <span class="keyword">new</span> TranslateTransform(<span class="number">0</span>, xblock.ActualHeight);</span><br><span class="line">            ScaleTransform scaleTransform = <span class="keyword">new</span> ScaleTransform();</span><br><span class="line">            scaleTransform.ScaleY = <span class="number">-1</span>;</span><br><span class="line">            TransformGroup transformGroup = <span class="keyword">new</span> TransformGroup();</span><br><span class="line">            transformGroup.Children.Add(translateTransform);</span><br><span class="line">            transformGroup.Children.Add(scaleTransform);</span><br><span class="line">            xblock.RenderTransform = transformGroup;</span><br><span class="line"></span><br><span class="line">            xblock.Text = (i + <span class="number">1</span>) * <span class="number">10</span> + <span class="string">"%"</span>;</span><br><span class="line">            Canvas.SetLeft(xblock, TransFromX((i + <span class="number">1</span>) * <span class="number">10</span>));</span><br><span class="line">            Canvas.SetTop(xblock, <span class="number">15</span>);</span><br><span class="line">            CanvasInPath.Children.Add(xblock);</span><br><span class="line">            Canvas.SetZIndex(xblock, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            TextBlock yblock = <span class="keyword">new</span> TextBlock();</span><br><span class="line">            yblock.Foreground = <span class="keyword">new</span> SolidColorBrush(Colors.White);</span><br><span class="line">            yblock.FontSize = <span class="number">10</span>;</span><br><span class="line">            translateTransform = <span class="keyword">new</span> TranslateTransform(<span class="number">0</span>, yblock.ActualHeight);</span><br><span class="line">            scaleTransform = <span class="keyword">new</span> ScaleTransform();</span><br><span class="line">            scaleTransform.ScaleY = <span class="number">-1</span>;</span><br><span class="line">            transformGroup = <span class="keyword">new</span> TransformGroup();</span><br><span class="line">            transformGroup.Children.Add(translateTransform);</span><br><span class="line">            transformGroup.Children.Add(scaleTransform);</span><br><span class="line">            yblock.RenderTransform = transformGroup;</span><br><span class="line"></span><br><span class="line">            yblock.Text = (i + <span class="number">1</span>) * <span class="number">10</span> + <span class="string">"%"</span>;</span><br><span class="line">            Canvas.SetLeft(yblock, <span class="number">5</span>);</span><br><span class="line">            Canvas.SetTop(yblock, TransFromY((i + <span class="number">1.5</span>) * <span class="number">10</span>));</span><br><span class="line">            CanvasInPath.Children.Add(yblock);</span><br><span class="line">            Canvas.SetZIndex(yblock, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把整个画布的宽和高分成十份,均匀的画线,然后在线的中间画上刻度…</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://img-blog.csdnimg.cn/20200630091710790.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="坐标转换"><a href="#坐标转换" class="headerlink" title="坐标转换"></a>坐标转换</h2><p>输入小球对应的刻度,转换为canvas容器里对应的坐标,也就是leftproperty和topproperty,另外left和top属性设置的位置是小球的左下角,想设置为小球正中心需要减去小球的长度的1/2</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 转换Canvas坐标</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param value="坐标轴的刻度"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">TransFromX</span>(<span class="params"><span class="keyword">double</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>)(((<span class="keyword">decimal</span>)<span class="keyword">value</span> / <span class="number">10</span>) * (<span class="keyword">decimal</span>)(CanvasInPath.Width) / <span class="number">10</span> - (<span class="keyword">decimal</span>)XOffset);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">TransFromY</span>(<span class="params"><span class="keyword">double</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>)(((<span class="keyword">decimal</span>)<span class="keyword">value</span> / <span class="number">10</span>) * (<span class="keyword">decimal</span>)(CanvasInPath.Height) / <span class="number">10</span> - (<span class="keyword">decimal</span>)YOffset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要DataGrid实时显示小球的位置,需要将小球的对应的刻度更新到ViewModel,所以还需要根据小球对象获取小球对应的刻度</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取小球的坐标轴刻度</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param dot="小球对象"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">double</span>[] <span class="title">GetValueOfAxis</span>(<span class="params">Ellipse dot</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x1 = (<span class="keyword">double</span>)((<span class="keyword">decimal</span>)(Canvas.GetLeft(dot) + XOffset) / (<span class="keyword">decimal</span>)(CanvasInPath.Width / <span class="number">100</span>));</span><br><span class="line">    <span class="keyword">double</span> y1 = (<span class="keyword">double</span>)((<span class="keyword">decimal</span>)(Canvas.GetTop(dot) + YOffset) / (<span class="keyword">decimal</span>)(CanvasInPath.Height / <span class="number">100</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">2</span>] &#123; x1, y1 &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上面的方法,封装一个设置小球位置的函数,这里小球我直接用的Ellipse,正确做法应该是做成一个单独的控件,以后要想改小球的大小和颜色只需要改动小球控件</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 设置点的位置</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param dot="小球对象"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param x="x轴刻度"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param y="y轴刻度"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetDotPosition</span>(<span class="params">Ellipse dot, <span class="keyword">double</span> x, <span class="keyword">double</span> y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> xpoint = TransFromX(x);</span><br><span class="line">    <span class="keyword">double</span> ypoint = TransFromY(y);</span><br><span class="line">    Canvas.SetLeft(dot, xpoint);</span><br><span class="line">    Canvas.SetTop(dot, ypoint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后加上小球的拖动,更新线段的位置,就实现了小球在坐标系里的移动,然后实现窗口大小改变,坐标轴更新,小球位置更新,线段更新即可</p><h2 id="改变窗口大小"><a href="#改变窗口大小" class="headerlink" title="改变窗口大小"></a>改变窗口大小</h2><p>①保存改变之前小球对应的刻度(位置)<br>②canvas内所有元素移除<br>③canvas的大小根据改变后的窗口大小重新赋值,坐标轴最大值也根据窗口大小赋值<br>④canvas加入小球和线段<br>⑤画坐标系,根据保存的刻度设置小球位置,更新线段</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 尺寸改变,重绘</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Window_SizeChanged</span>(<span class="params"><span class="keyword">object</span> sender, SizeChangedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.Width != <span class="number">500</span> || <span class="keyword">this</span>.Height != <span class="number">600</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span>[] dot1value = GetValueOfAxis(DutyCycleCurveDot1);</span><br><span class="line">        <span class="keyword">double</span>[] dot2value = GetValueOfAxis(DutyCycleCurveDot2);</span><br><span class="line"></span><br><span class="line">        CanvasInPath.Children.Clear();</span><br><span class="line">        CanvasInPath.Height = <span class="keyword">this</span>.ActualHeight - <span class="number">100</span>;</span><br><span class="line">        CanvasInPath.Width = <span class="keyword">this</span>.ActualWidth;</span><br><span class="line">        MaxCoordinateAxisX = <span class="keyword">this</span>.ActualWidth;</span><br><span class="line">        MaxCoordinateAxisY = <span class="keyword">this</span>.ActualHeight - <span class="number">100</span>;</span><br><span class="line">        CanvasInPath.Children.Add(DutyCycleCurveDot1);</span><br><span class="line">        CanvasInPath.Children.Add(DutyCycleCurveDot2);</span><br><span class="line">        CanvasInPath.Children.Add(DutyCycleLineList[<span class="number">0</span>]);</span><br><span class="line">        CanvasInPath.Children.Add(DutyCycleLineList[<span class="number">1</span>]);</span><br><span class="line">        CanvasInPath.Children.Add(DutyCycleLineList[<span class="number">2</span>]);</span><br><span class="line">        DrawAxisAndText();</span><br><span class="line">        SetDotPosition(DutyCycleCurveDot1, dot1value[<span class="number">0</span>], dot1value[<span class="number">1</span>]);</span><br><span class="line">        SetDotPosition(DutyCycleCurveDot2, dot2value[<span class="number">0</span>], dot2value[<span class="number">1</span>]);</span><br><span class="line">        UpdateLineAndDot(DutyCycleDotList, DutyCycleLineList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p><img src="https://img-blog.csdnimg.cn/20200630092623779.gif" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C#复杂类型的深拷贝,并解决CodeRunner的输出窗口乱码</title>
      <link href="/2020/06/22/CSharp-deepcopy/"/>
      <url>/2020/06/22/CSharp-deepcopy/</url>
      
        <content type="html"><![CDATA[<p>C#中的等号和C++的等号,并不相同<br>因为=在引用类型中的使用，仅仅是创建了一个新的引用变量，并没有复制真正的内容，所以我们需要深拷贝</p><a id="more"></a><h2 id="引用类型使用“-”"><a href="#引用类型使用“-”" class="headerlink" title="引用类型使用“=”"></a>引用类型使用“=”</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">          Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">          p1.Name = <span class="string">"Luzihan"</span>;</span><br><span class="line">          p1.Job = <span class="string">"在家玩游戏"</span>;</span><br><span class="line"></span><br><span class="line">          Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">          p2 = p1;</span><br><span class="line">          p1.Name = <span class="string">"Lubaobao"</span>;</span><br><span class="line">          p1.Job = <span class="string">"还是在家打游戏"</span>;</span><br><span class="line"></span><br><span class="line">          Console.WriteLine(p1.Name);</span><br><span class="line">          Console.WriteLine(p1.Job);</span><br><span class="line">          Console.WriteLine(p2.Name);</span><br><span class="line">          Console.WriteLine(p2.Job);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>这样的最直接后果就是，修改了p1的内容，导致p2的内容也被修改了<br><img src="https://img-blog.csdnimg.cn/20200611140006932.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>很显然这不是我们想要的，这是因为=在引用类型中的使用，仅仅是创建了一个新的引用变量，并没有复制真正的内容，所以我们需要深拷贝</p><h2 id="XML序列化反序列化完成深拷贝"><a href="#XML序列化反序列化完成深拷贝" class="headerlink" title="XML序列化反序列化完成深拷贝"></a>XML序列化反序列化完成深拷贝</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> T DeepCopyByXml&lt;T&gt;(T obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">object</span> result;</span><br><span class="line">    <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">    &#123;</span><br><span class="line">        XmlSerializer xmlSerializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line">        xmlSerializer.Serialize(ms, obj);</span><br><span class="line">        ms.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">        result = xmlSerializer.Deserialize(ms);</span><br><span class="line">        ms.Close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (T)result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用深拷贝之后的结果，很明显，p2的内容不会因为p1的修改而修改<br><img src="https://img-blog.csdnimg.cn/20200611140314223.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="VsCode中CodeRunner插件输出窗口中文乱码"><a href="#VsCode中CodeRunner插件输出窗口中文乱码" class="headerlink" title="VsCode中CodeRunner插件输出窗口中文乱码"></a>VsCode中CodeRunner插件输出窗口中文乱码</h2><p>还是之前的代码,打印”在家玩游戏”和”还是在家打游戏”出现乱码<br><img src="https://img-blog.csdnimg.cn/2020061114060942.jpg" alt="在这里插入图片描述"><br>修改VsCode右下角的通过编码打开，通过编码保存设置为gbk什么的都不行</p><p>网上大多数说的确实是对的，确实是因为cmd的编码格式造成的，但是我只想要VsCode的输出窗口正常，调试也正常，所以我不需要去设置cmd，cmd和我有什么关系？设置cmd或者全部使用utf-8也可能会导致其他的问题</p><h3 id="①网上建议的-CodeRunner使用终端"><a href="#①网上建议的-CodeRunner使用终端" class="headerlink" title="①网上建议的,CodeRunner使用终端"></a>①网上建议的,CodeRunner使用终端</h3><p>确实可以解决,但是我不喜欢终端的字体,我就喜欢输出窗口的风格,和设置的字体统一<br>example:<br><code>&quot;csharp&quot;:&quot;clear &amp;&amp; cd $dir &amp;&amp; csc /nologo $fileName &amp;&amp; ./$fileNameWithoutExt&quot;,</code><br><code>&quot;code-runner.runInTerminal&quot;: true</code></p><h3 id="②如果是Windows平台："><a href="#②如果是Windows平台：" class="headerlink" title="②如果是Windows平台："></a>②如果是Windows平台：</h3><p>SettingJson中code-runner.executorMap里Csharp相关的前面加上chcp 65001，不需要修改cmd只需要修改vscode这里<br>example：<br><code>&quot;csharp&quot;: &quot;chcp 65001 &amp;&amp; cd $dir &amp;&amp; echo= &amp;&amp; csc /nologo /utf8output $fileName &amp;&amp; $fileNameWithoutExt&quot;,</code><br><img src="https://img-blog.csdnimg.cn/20200611141254213.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="③Linux下就不存在乱码-但是如果是RemoteSSH连接到服务器-怎么使用CodeRunner呢"><a href="#③Linux下就不存在乱码-但是如果是RemoteSSH连接到服务器-怎么使用CodeRunner呢" class="headerlink" title="③Linux下就不存在乱码,但是如果是RemoteSSH连接到服务器,怎么使用CodeRunner呢?"></a>③Linux下就不存在乱码,但是如果是RemoteSSH连接到服务器,怎么使用CodeRunner呢?</h3><p>还是刚才的设置,服务器提前安装mono<br>example:<br><code>&quot;csharp&quot;: &quot;csc /nologo /utf8output $fileName &amp;&amp; mono $fileNameWithoutExt.exe&quot;,</code></p><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><p>经过上面的操作，C#的话，无论CodeRunner还是F5都没有乱码的问题<br><img src="https://img-blog.csdnimg.cn/20200612180337375.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200612180337310.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是C++的话，CodeRunner没有问题，但是调试会乱码<br><img src="https://img-blog.csdnimg.cn/202006121810443.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200612181102410.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="①cpp代码中加入控制台代码"><a href="#①cpp代码中加入控制台代码" class="headerlink" title="①cpp代码中加入控制台代码"></a>①cpp代码中加入控制台代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">system(<span class="string">"chcp 65001"</span>);</span><br><span class="line">   system(<span class="string">"cls"</span>);</span><br></pre></td></tr></table></figure><p>虽然能解决，但是这么麻烦所以一般都不会这么做的，想一个办法把这两句代码自动先运行</p><h3 id="②使用attribute-constructor"><a href="#②使用attribute-constructor" class="headerlink" title="②使用attribute((constructor))"></a>②使用<strong>attribute</strong>((constructor))</h3><p>使用<strong>attribute</strong>((constructor)),放在函数声明后，表示在main函数调用前，先调用此函数，同样的还有<strong>attribute</strong>((destructor))，表示在main函数调用exit（）之后调用此函数</p><p>在.vscode文件夹下创建一个head.h头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(<span class="keyword">void</span>)</span> __<span class="title">attribute__</span><span class="params">((constructor))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">"chcp 65001"</span>); </span><br><span class="line">    system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把task.json中的参数修改一下<br><code>&quot;args&quot;: [&quot;-g&quot;,&quot;${file}&quot;,&quot;-include&quot;,&quot;${workspaceRoot}\\.vscode\\head.h&quot;,&quot;-o&quot;,&quot;${fileBasenameNoExtension}.exe&quot;],</code><br>其他不需要什么操作了，直接F5试一下<br><img src="https://img-blog.csdnimg.cn/20200612182705946.jpg" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C#三维坐标转换为二维坐标</title>
      <link href="/2020/03/10/CSharp-translate/"/>
      <url>/2020/03/10/CSharp-translate/</url>
      
        <content type="html"><![CDATA[<p>刚开始学习图形跟随模块的时候,观察不仔细,只想着平面实现,导致以后的实现越来越困难,代码量越来越多,其实本来不需要那么麻烦,输入的都是三维的坐标,呈现上界面上的才是二维坐标…</p><a id="more"></a><h2 id="三维坐标转换为二维坐标"><a href="#三维坐标转换为二维坐标" class="headerlink" title="三维坐标转换为二维坐标"></a>三维坐标转换为二维坐标</h2><p><strong>矩阵变换什么的最烦了…我先写下来以防以后忘记…</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mixtrl是一个矩阵</span><br><span class="line">[1 0 0</span><br><span class="line"> 0 1 0 </span><br><span class="line"> 0 0 1]</span><br><span class="line"></span><br><span class="line">下面这个函数是我用来画三维坐标系的</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> POINT2D <span class="title">Transform3DTo2D</span>(<span class="params">POINT3D pt3d</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    POINT2D result = <span class="keyword">new</span> POINT2D();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> x = pt3d.x;</span><br><span class="line">    <span class="keyword">double</span> y = pt3d.y;</span><br><span class="line">    <span class="keyword">double</span> z = pt3d.z;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> xTOx = (mixtrl[<span class="number">0</span>] * x + mixtrl[<span class="number">1</span>] * y + mixtrl[<span class="number">2</span>] * z) * needXReverxe;</span><br><span class="line">    <span class="keyword">double</span> yTox = (mixtrl[<span class="number">3</span>] * x + mixtrl[<span class="number">4</span>] * y + mixtrl[<span class="number">5</span>] * z) * needYReverxe;</span><br><span class="line">    <span class="keyword">double</span> zTox = (mixtrl[<span class="number">6</span>] * x + mixtrl[<span class="number">7</span>] * y + mixtrl[<span class="number">8</span>] * z) * needZReverxe;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> xx = <span class="number">-1</span> * Math.Cos(<span class="number">150</span> * <span class="number">0.017453</span>) * xTOx - Math.Cos(<span class="number">150</span> * <span class="number">0.017453</span>) * yTox;</span><br><span class="line">    <span class="keyword">double</span> yy = Math.Sin(<span class="number">150</span> * <span class="number">0.017453</span>) * xTOx - Math.Sin(<span class="number">150</span> * <span class="number">0.017453</span>) * yTox - zTox;</span><br><span class="line"></span><br><span class="line">    result.x = orginPoint.X + xx;</span><br><span class="line">    result.y = orginPoint.Y + yy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三维坐标-或二维坐标-的旋转"><a href="#三维坐标-或二维坐标-的旋转" class="headerlink" title="三维坐标(或二维坐标)的旋转"></a>三维坐标(或二维坐标)的旋转</h2><p><strong>以某个轴为旋转轴,实际上,只在垂直于坐标轴的平面做二维旋转</strong></p><ul><li>二维<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; xcosα - ysinα</span><br><span class="line">y &#x3D; xsinα + ycosα</span><br></pre></td></tr></table></figure></li><li>三维<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">绕x轴旋转</span><br><span class="line">x1 &#x3D; x;</span><br><span class="line">y1 &#x3D; ycosα - zsinα;</span><br><span class="line">z1 &#x3D; zcosα + ysinα;</span><br><span class="line"></span><br><span class="line">绕y轴旋转</span><br><span class="line">x1 &#x3D; xcosα - zsinα;</span><br><span class="line">y1 &#x3D; y;</span><br><span class="line">z1 &#x3D; zcosα + xsinα;</span><br><span class="line"></span><br><span class="line">绕z轴旋转</span><br><span class="line">x1 &#x3D; xcosα - ysinα;</span><br><span class="line">y1 &#x3D; ycosα + xsinα;</span><br><span class="line">z1 &#x3D; z;</span><br></pre></td></tr></table></figure></li></ul><p><strong>角度自己设定,我自己设置每次转20°</strong></p><p><strong>C#中的三角函数计算传入的参数为弧度…</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> POINT3D <span class="title">TransRoll</span>(<span class="params">POINT3D pt3d,<span class="keyword">int</span> RollFlag,<span class="keyword">double</span> angle</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    POINT3D result = <span class="keyword">new</span> POINT3D();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> x = pt3d.x;</span><br><span class="line">    <span class="keyword">double</span> y = pt3d.y;</span><br><span class="line">    <span class="keyword">double</span> z = pt3d.z;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> cos = Math.Cos(angle * (Math.PI / <span class="number">180</span>));</span><br><span class="line">    <span class="keyword">double</span> sin = Math.Sin(angle * (Math.PI / <span class="number">180</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绕x轴</span></span><br><span class="line">    <span class="keyword">if</span> (RollFlag == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> x1 = x;</span><br><span class="line">        <span class="keyword">double</span> y1 = y * cos - z * sin;</span><br><span class="line">        <span class="keyword">double</span> z1 = z * cos + y * sin;</span><br><span class="line"></span><br><span class="line">        result.x = x1;</span><br><span class="line">        result.y = y1;</span><br><span class="line">        result.z = z1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(RollFlag == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> x1 = x * cos - z * sin;</span><br><span class="line">        <span class="keyword">double</span> y1 = y;</span><br><span class="line">        <span class="keyword">double</span> z1 = z * cos + x * sin;</span><br><span class="line"></span><br><span class="line">        result.x = x1;</span><br><span class="line">        result.y = y1;</span><br><span class="line">        result.z = z1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> x1 = x * cos - y * sin;</span><br><span class="line">        <span class="keyword">double</span> y1 = y * cos + x * sin;</span><br><span class="line">        <span class="keyword">double</span> z1 = z;</span><br><span class="line"></span><br><span class="line">        result.x = x1;</span><br><span class="line">        result.y = y1;</span><br><span class="line">        result.z = z1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘制椎体"><a href="#绘制椎体" class="headerlink" title="绘制椎体"></a>绘制椎体</h2><p><strong>一条由坐标原点到空间某点的线段，绕某个轴旋转一周，就形成了一个圆锥体</strong></p><p><strong>画圆同理，BresenHam画圆算法也可以</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paintCone</span>(<span class="params">POINT3D pt3d</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    POINT2D pt2d = <span class="keyword">new</span> POINT2D();</span><br><span class="line"></span><br><span class="line">    Graphics graphics = <span class="keyword">this</span>.CreateGraphics();</span><br><span class="line">    Pen pen = <span class="keyword">new</span> Pen(Color.Yellow, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">double</span> i = <span class="number">1</span>; i &lt;= <span class="number">360</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    pt2d = Transform3DTo2D(TransRoll(pt3d, <span class="number">2</span>, i));</span><br><span class="line">    graphics.DrawLine(pen, orginPoint, <span class="keyword">new</span> Point((<span class="keyword">int</span>)pt2d.x, (<span class="keyword">int</span>)pt2d.y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pen = <span class="keyword">new</span> Pen(Color.Red, <span class="number">2</span>);</span><br><span class="line">    POINT3D circlePT3D = <span class="keyword">new</span> POINT3D(<span class="number">0</span>, pt3d.y, pt3d.z);</span><br><span class="line">    POINT2D circlePT2D = <span class="keyword">new</span> POINT2D();</span><br><span class="line"></span><br><span class="line">    circlePT2D = Transform3DTo2D(circlePT3D);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">double</span> i = <span class="number">1</span>; i &lt;= <span class="number">360</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    pt2d = Transform3DTo2D(TransRoll(circlePT3D, <span class="number">2</span>, i));</span><br><span class="line">    graphics.DrawLine(pen, <span class="keyword">new</span> Point((<span class="keyword">int</span>)circlePT2D.x, (<span class="keyword">int</span>)circlePT2D.y), </span><br><span class="line"><span class="keyword">new</span> Point((<span class="keyword">int</span>)pt2d.x, (<span class="keyword">int</span>)pt2d.y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    graphics.Dispose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><strong>x，y轴反向</strong></p><p><img src="https://img-blog.csdnimg.cn/2020031022103085.gif" alt="在这里插入图片描述"></p><p><strong>绕z轴旋转20°和绕z轴旋转-20°</strong></p><p><img src="https://img-blog.csdnimg.cn/20200310221048320.gif" alt="在这里插入图片描述"><br><strong>三角形绕z轴旋转</strong><br><img src="https://img-blog.csdnimg.cn/20200311090028459.gif" alt="在这里插入图片描述"><br><strong>z轴反向（带椎体）</strong></p><p><img src="https://img-blog.csdnimg.cn/20200311115322586.gif" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C#聊天气泡框</title>
      <link href="/2020/02/23/CSarp-chatmessagebox/"/>
      <url>/2020/02/23/CSarp-chatmessagebox/</url>
      
        <content type="html"><![CDATA[<p>气泡虽然是用的别人写好的方法,自己做的东西很少,大多是学习<br>但是完成了学习编程以来一直的梦想,做一个好看点的聊天界面…</p><a id="more"></a><h2 id="思路：借鉴自C-winform-socket-初学者示例"><a href="#思路：借鉴自C-winform-socket-初学者示例" class="headerlink" title="思路：借鉴自C# winform socket 初学者示例"></a>思路：借鉴自C# winform socket 初学者示例</h2><p><font  color=red size=5><strong>大佬的示例下载链接:</strong></font><br><font  color=red size=5> <strong><a href="https://pan.baidu.com/s/1i6r0Sa1JNp0-BCMEX1L6Hw" target="_blank" rel="noopener">https://pan.baidu.com/s/1i6r0Sa1JNp0-BCMEX1L6Hw</a></strong></font></p><p><strong>提取码:v751</strong></p><p><font  color=red size=5><strong>注释及说明:<a href="https://www.cnblogs.com/qiaoke/p/6358050.html" target="_blank" rel="noopener">https://www.cnblogs.com/qiaoke/p/6358050.html</a></strong></font></p><h3 id="界面组成：头像-气泡"><a href="#界面组成：头像-气泡" class="headerlink" title="界面组成：头像+气泡"></a>界面组成：头像+气泡</h3><p>头像使用PictureBox，绘制成圆形图片<br>气泡使用圆角矩形+尖角，创建panel使用bitemap填充</p><p><strong>最终效果：</strong><br><img src="https://img-blog.csdnimg.cn/20200223153830313.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="界面布局：panel-pictureBox"><a href="#界面布局：panel-pictureBox" class="headerlink" title="界面布局：panel+pictureBox"></a>界面布局：panel+pictureBox</h3><p><img src="https://img-blog.csdnimg.cn/20200223153607197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法:"></a>主要方法:</h3><h4 id="绘制圆角矩形和圆图片-学习自上面示例"><a href="#绘制圆角矩形和圆图片-学习自上面示例" class="headerlink" title="绘制圆角矩形和圆图片:(学习自上面示例)"></a>绘制圆角矩形和圆图片:(学习自上面示例)</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GraphicsPath <span class="title">DrawRoundRect</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> radius</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//四边圆角</span></span><br><span class="line">    GraphicsPath gp = <span class="keyword">new</span> GraphicsPath();</span><br><span class="line">    gp.AddArc(x, y, radius, radius, <span class="number">180</span>, <span class="number">90</span>);</span><br><span class="line">    gp.AddArc(width - radius, y, radius, radius, <span class="number">270</span>, <span class="number">90</span>);</span><br><span class="line">    gp.AddArc(width - radius, height - radius, radius, radius, <span class="number">0</span>, <span class="number">90</span>);</span><br><span class="line">    gp.AddArc(x, height - radius, radius, radius, <span class="number">90</span>, <span class="number">90</span>);</span><br><span class="line">    gp.CloseAllFigures();</span><br><span class="line">    <span class="keyword">return</span> gp;</span><br><span class="line">&#125;      </span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制圆图片</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Image <span class="title">CutEllipse</span>(<span class="params">Image img, Rectangle rec, Size size</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bitmap bitmap = <span class="keyword">new</span> Bitmap(size.Width, size.Height);</span><br><span class="line">    <span class="keyword">using</span> (Graphics g = Graphics.FromImage(bitmap))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (TextureBrush br = <span class="keyword">new</span> TextureBrush(img, System.Drawing.Drawing2D.WrapMode.Clamp, rec))</span><br><span class="line">        &#123;</span><br><span class="line">            br.ScaleTransform(bitmap.Width / (<span class="keyword">float</span>)rec.Width, bitmap.Height / (<span class="keyword">float</span>)rec.Height);</span><br><span class="line">            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;</span><br><span class="line">            g.FillEllipse(br, <span class="keyword">new</span> Rectangle(Point.Empty, size));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">return</span> bitmap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="搜索框界面思路"><a href="#搜索框界面思路" class="headerlink" title="搜索框界面思路:"></a>搜索框界面思路:</h3><p>窗体的resize属性修改窗体大小<br>根据目前的窗体大小调整</p><p><strong>窗体大小先设置为不可更改,以后在完善</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">          <span class="keyword">if</span>(Form1.form1.Size.Width == <span class="number">654</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              Form1.form1.Size = <span class="keyword">new</span> System.Drawing.Size(<span class="number">954</span>, <span class="number">558</span>);</span><br><span class="line">              Form1.form1.REDI_HISTORY.Visible = <span class="literal">true</span>;</span><br><span class="line">              Form1.form1.LAB_SEARCH.Visible = <span class="literal">true</span>;</span><br><span class="line">              Form1.form1.EDI_SEARCH.Visible = <span class="literal">true</span>;</span><br><span class="line">              Form1.form1.BTN_SEARCH.Visible = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">              Form1.form1.EDI_SEARCH.Focus();</span><br><span class="line"></span><br><span class="line">              <span class="comment">//显示在最下方</span></span><br><span class="line">              Form1.form1.REDI_HISTORY.Select(Form1.form1.REDI_HISTORY.TextLength, <span class="number">0</span>);</span><br><span class="line">              Form1.form1.REDI_HISTORY.ScrollToCaret();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">              Form1.form1.REDI_HISTORY.Visible = <span class="literal">false</span>;</span><br><span class="line">              Form1.form1.LAB_SEARCH.Visible = <span class="literal">false</span>;</span><br><span class="line">              Form1.form1.EDI_SEARCH.Visible = <span class="literal">false</span>;</span><br><span class="line">              Form1.form1.BTN_SEARCH.Visible = <span class="literal">false</span>;</span><br><span class="line">              Form1.form1.Size = <span class="keyword">new</span> System.Drawing.Size(<span class="number">654</span>, <span class="number">558</span>);</span><br><span class="line"></span><br><span class="line">              EDI_SEARCH.Clear();</span><br><span class="line">              Form1.form1.REDI_MESSAGE.Focus();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h4 id="搜索框界面布局"><a href="#搜索框界面布局" class="headerlink" title="搜索框界面布局:"></a>搜索框界面布局:</h4><p><img src="https://img-blog.csdnimg.cn/20200223160838163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="搜索框最终效果"><a href="#搜索框最终效果" class="headerlink" title="搜索框最终效果:"></a>搜索框最终效果:</h4><p><strong>服务端使用mono放在Linux下</strong><br><img src="https://img-blog.csdnimg.cn/2020022316145945.png" alt="在这里插入图片描述"><br><strong>文字搜索</strong><br><img src="https://img-blog.csdnimg.cn/20200223161638473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>数字搜索</strong><br><img src="https://img-blog.csdnimg.cn/20200223161713764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="搜索框代码实现"><a href="#搜索框代码实现" class="headerlink" title="搜索框代码实现:"></a>搜索框代码实现:</h3><p>倒排索引什么的不会弄,所以只能用正则将就一下了…</p><p><strong>数字的搜素区别不大,只是正则表达式变一下</strong><br><strong>“\w{3}:\d{4}/\d{1,2}/\d{1,2} \d{1,2}:\d{2}:\d{2}”</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">string</span>&gt; info = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">            <span class="comment">//string pattern = @"\w&#123;0,&#125;[" + searchInfo + @"]&#123;" + searchInfo.Length + @"&#125;\w&#123;0,&#125;";</span></span><br><span class="line">            <span class="keyword">string</span> pattern = <span class="string">@"\w&#123;0,&#125;"</span> + searchInfo + <span class="string">@"\w&#123;0,&#125;"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (Match each <span class="keyword">in</span> Regex.Matches(history, pattern))</span><br><span class="line">            &#123;</span><br><span class="line">                info.Add(each.Value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取索引</span></span><br><span class="line">            List&lt;<span class="keyword">int</span>&gt; indexList = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;info.Count;++i)</span><br><span class="line">            &#123;</span><br><span class="line">                indexList.Add(getIndex(info[i], history));</span><br><span class="line">            &#125;                     </span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取用户名和时间信息</span></span><br><span class="line">            ArrayList nameAndTime = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            ArrayList tempList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; indexList.Count; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((<span class="keyword">int</span>)indexList[i] == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">string</span> temp = history.Substring(<span class="number">0</span>, (<span class="keyword">int</span>)indexList[i]);</span><br><span class="line">                <span class="keyword">foreach</span> (Match each <span class="keyword">in</span> Regex.Matches(temp, <span class="string">@"\w&#123;3&#125;\:\d&#123;4&#125;\/\d&#123;1,2&#125;\/\d&#123;1,2&#125; \d&#123;2&#125;\:\d&#123;2&#125;\:\d&#123;2&#125;"</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    tempList.Add(each.Value);</span><br><span class="line">                &#125;</span><br><span class="line">                nameAndTime.Add(tempList[tempList.Count - <span class="number">1</span>]);</span><br><span class="line">                tempList.Clear();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//刷新历史记录框</span></span><br><span class="line">            REDI_HISTORY.Clear();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;info.Count;++i)</span><br><span class="line">            &#123;</span><br><span class="line">                REDI_HISTORY.AppendText(nameAndTime[i].ToString() + <span class="string">"\r\n"</span>);</span><br><span class="line">                REDI_HISTORY.AppendText(info[i] + <span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (nameAndTime[i].ToString().Substring(<span class="number">0</span>, <span class="number">3</span>) == user.username)</span><br><span class="line">                &#123;</span><br><span class="line">                    chatm.changeColorHistory(nameAndTime[i].ToString(), Color.Green);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    chatm.changeColorHistory(nameAndTime[i].ToString(), Color.Blue);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                chatm.changeColorHistory(searchInfo, Color.Red);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C#中调用C++dll</title>
      <link href="/2019/12/20/CSarp-interaction/"/>
      <url>/2019/12/20/CSarp-interaction/</url>
      
        <content type="html"><![CDATA[<p>校招是肯定没戏了..19年是20界的校招…</p><a id="more"></a><h2 id="C-中调用C-dll"><a href="#C-中调用C-dll" class="headerlink" title="C#中调用C++dll"></a>C#中调用C++dll</h2><ul><li><p>C++代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MATH_EXPORTS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MATH_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MATH_API __declspec(dllimport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MATH_API</span> <span class="title">CMath</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CMath(<span class="keyword">void</span>);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Math_Add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Math_Sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Math_Col</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Math_Dev</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> MATH_API <span class="keyword">int</span> nMath;</span><br><span class="line"></span><br><span class="line"><span class="function">MATH_API <span class="keyword">int</span> <span class="title">fnMath</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>C#代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">func</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DllImport(@<span class="meta-string">"C:\Users\Austin_Yan\Documents\Visual Studio 2013\Projects\Math\Debug\Math.dll"</span>,EntryPoint=<span class="meta-string">"?Math_Add@CMath@@QAEHHH@Z"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Math_Add</span>(<span class="params"><span class="keyword">int</span> a,<span class="keyword">int</span> b</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(@<span class="meta-string">"C:\Users\Austin_Yan\Documents\Visual Studio 2013\Projects\Math\Debug\Math.dll"</span>, EntryPoint = <span class="meta-string">"?Math_Sub@CMath@@QAEHHH@Z"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Math_Sub</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(@<span class="meta-string">"C:\Users\Austin_Yan\Documents\Visual Studio 2013\Projects\Math\Debug\Math.dll"</span>, EntryPoint = <span class="meta-string">"?Math_Col@CMath@@QAEHHH@Z"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Math_Col</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(@<span class="meta-string">"C:\Users\Austin_Yan\Documents\Visual Studio 2013\Projects\Math\Debug\Math.dll"</span>, EntryPoint = <span class="meta-string">"?Math_Dev@CMath@@QAEHHH@Z"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Math_Dev</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">int</span> a = func.Math_Add(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">            Console.WriteLine(a);</span><br><span class="line">            a = func.Math_Sub(<span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line">            Console.WriteLine(a);</span><br><span class="line">            a = func.Math_Col(<span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line">            Console.WriteLine(a);</span><br><span class="line">            a = func.Math_Dev(<span class="number">12</span>, <span class="number">3</span>);</span><br><span class="line">            Console.WriteLine(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2></li><li><p>dll引用添加不成功,报错如下：无法加载DLL”**.dll”:找不到指定的模块</p><blockquote><p>建议使用vs 2013创建win32程序—&gt;下一步—&gt;dll,然后编辑,不要创建windows控制台程序然后修改配置类型为动态库,如果不成功,调到第三个问题</p></blockquote></li><li><p>找不到程序入口点</p><blockquote><p>使用dumpbin工具查看C++中函数编译之后的名称,C#中EntryPoint中填入<br><img src="https://img-blog.csdnimg.cn/20191220002026781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote></li><li><p>引用添加不成功</p><blockquote><p>有效解决办法就是使用DllImport,不要添加引用了<br><img src="https://img-blog.csdnimg.cn/20191220002355686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>[DllImport(@”C:\Users\Austin_Yan\Documents\Visual Studio 2013\Projects\Math\Debug\Math.dll”,EntryPoint=”?Math_Add@CMath@@QAEHHH@Z”)]<br>正常应该放在bin目录下,这里是错误的编码习惯,懒</p></blockquote></li></ul><p>很久没写了,偶尔来两篇吧,都懒得改颜色了,想想以前,唉</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【反思与总结】在线OJ中的不定长数组输入问题</title>
      <link href="/2019/10/19/OJ-Skill/"/>
      <url>/2019/10/19/OJ-Skill/</url>
      
        <content type="html"><![CDATA[<p>OJ练习题遇到的不定长数组输入问题…</p><a id="more"></a><p>按照正常套路出题的要求，应该是第一行输入一个正整数N，表示数组有几个数</p><p>第二行则是输入数组的数据</p><p>比如</p><p>4<br>1 2 3 4</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;N)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(N)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;v[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了那个N，可以初始化数组长度，也可以设置循环的次数，输入就变得很简单</p><p>但是，有些出题者不告诉那个N是多少，直接说输入两组数据，空格隔开</p><p>比如，</p><p>1 2 3 4<br>4 3 2 1</p><p>这种不定长的数组，数组长度取决于输入的数据有多少，所以不能自己设置（设置太多浪费空间，设置太少会越界），只能使用push_back，让编译器自动扩容</p><p>不告知数据有多少个带来的主要问题就是输入的循环如何结束，cin从流中提取数据会跳过空格，所以只要输入的最后一个字符不是空格，说明输入结束了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">int</span> value1;</span><br><span class="line"><span class="keyword">int</span> value2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; value1)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(value1);</span><br><span class="line">c = <span class="built_in">cin</span>.get();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (c != <span class="string">' '</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; value2)</span><br><span class="line">&#123;</span><br><span class="line">v2.push_back(value2);</span><br><span class="line">c = <span class="built_in">cin</span>.get();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (c != <span class="string">' '</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以达到空格间隔，回车结束的不定长数组输入</p><p>效果图：<br><img src="https://img-blog.csdnimg.cn/20191019110951319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> ReView </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【针对性复习】数据结构</title>
      <link href="/2019/09/05/DS-Review/"/>
      <url>/2019/09/05/DS-Review/</url>
      
        <content type="html"><![CDATA[<p>学完数据结构后的一个整体的复习…</p><a id="more"></a><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BinFind</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> data, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> right = size - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (data&lt;<span class="built_in">array</span>[mid])</span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data&gt;<span class="built_in">array</span>[mid])</span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; data &lt;&lt; <span class="string">" 存在!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; data &lt;&lt; <span class="string">" 不存在!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190905134758440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="链表面试题"><a href="#链表面试题" class="headerlink" title="链表面试题"></a>链表面试题</h2><p>前面已经写过博客了,这次是复习,多敲代码总没坏处</p><p>在带头节点的链表中头结点存放节点个数不合理，char的表示范围不够-128~127</p><p>面试题不特殊说明，就是不带头结点的单链表</p><p>不需要给出节点的定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写一个尾插</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushBack</span><span class="params">(ListNode*&amp; pHead, <span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pHead == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">pHead = <span class="keyword">new</span> ListNode(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ListNode* pCur = pHead;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pCur-&gt;pNext != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">pCur = pCur-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pCur-&gt;pNext = <span class="keyword">new</span> ListNode(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写一个链表(不带环)逆置</span></span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode* result = <span class="literal">nullptr</span>;</span><br><span class="line">ListNode* pCur = pHead;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pCur != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">ListNode* next = pCur-&gt;pNext;</span><br><span class="line"></span><br><span class="line">pCur-&gt;pNext = result;</span><br><span class="line">result = pCur;</span><br><span class="line">pCur = next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找链表的中间节点</span></span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">FindMidNode</span><span class="params">(ListNode* pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pHead == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode* pFast = pHead;</span><br><span class="line">ListNode* pSlow = pHead;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pFast!= <span class="literal">nullptr</span> &amp;&amp; pFast-&gt;pNext != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">pFast = pFast-&gt;pNext-&gt;pNext;</span><br><span class="line">pSlow = pSlow-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pSlow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找倒数第K个节点</span></span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">FindLastKNode</span><span class="params">(ListNode* pHead,<span class="keyword">size_t</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pHead == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode* pFast = pHead;</span><br><span class="line">ListNode* pSlow = pHead;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (k--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//K大于链表长度</span></span><br><span class="line"><span class="keyword">if</span> (pFast == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pFast = pFast-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pFast != <span class="literal">nullptr</span> &amp;&amp; pFast-&gt;pNext != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">pFast = pFast-&gt;pNext-&gt;pNext;</span><br><span class="line">pSlow = pSlow-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pSlow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2019090513542675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//合并两个有序链表</span></span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">MergeList</span><span class="params">(ListNode* pHead1, ListNode* pHead2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pHead1 == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> pHead2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pHead2 == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> pHead1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode* result = <span class="literal">nullptr</span>;</span><br><span class="line">ListNode* last = <span class="literal">nullptr</span>;</span><br><span class="line">ListNode* pCur1 = pHead1;</span><br><span class="line">ListNode* pCur2 = pHead2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pCur1 != <span class="literal">nullptr</span> &amp;&amp; pCur2 != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pCur1-&gt;_data &lt; pCur2-&gt;_data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">result = last = pCur1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">last-&gt;pNext = pCur1;</span><br><span class="line">last = pCur1;</span><br><span class="line">&#125;</span><br><span class="line">pCur1 = pCur1-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">result = last = pCur2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">last-&gt;pNext = pCur2;</span><br><span class="line">last = pCur2;</span><br><span class="line">&#125;</span><br><span class="line">pCur2 = pCur2-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pCur1 != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">last-&gt;pNext = pCur1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pCur2 != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">last-&gt;pNext = pCur2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190905135547411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找两个链表相交的节点(不带环)</span></span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">getIntersectionNode</span><span class="params">(ListNode* pHead1, ListNode* pHead2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pHead1 == <span class="literal">nullptr</span> || pHead2 == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* pCur1 = pHead1;</span><br><span class="line">        ListNode* pCur2 = pHead2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">size_t</span> size1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">size_t</span> size2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (pCur1 != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            size1++;</span><br><span class="line">            pCur1 = pCur1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (pCur2 != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            size2++;</span><br><span class="line">            pCur2 = pCur2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pCur1 = pHead1;</span><br><span class="line">        pCur2 = pHead2;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (size1 &gt; size2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (size1 &gt; size2)</span><br><span class="line">            &#123;</span><br><span class="line">                pCur1 = pCur1-&gt;next;</span><br><span class="line">                size1--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (size2 &gt; size1)</span><br><span class="line">            &#123;</span><br><span class="line">                pCur2 = pCur2-&gt;next;</span><br><span class="line">                size2--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (pCur1 != <span class="literal">nullptr</span> &amp;&amp; pCur2 != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pCur1 == pCur2)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> pCur1;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pCur1 = pCur1-&gt;next;</span><br><span class="line">            pCur2 = pCur2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>慢指针:L+X<br>快指针:L+X+nr</p><p>2*(L+X)=L+X+nr</p><p>L=nr-X,n=1,2,3…</p><h2 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a>复杂链表的复制</h2><ul><li>在每个节点后面插入值相同的新节点</li><li>给新节点的随机指针域赋值<ul><li>p2放在p1的next,p2指向p1随机指针域的next</li><li>p1放在p2的next,p2放在p1的next</li></ul></li><li>把新链表拆分出去<ul><li>p1-&gt;next指向p2-&gt;next</li><li>p1放在p2,p2指向p1-&gt;next</li></ul></li></ul><h2 id="顺序表和链表的区别"><a href="#顺序表和链表的区别" class="headerlink" title="顺序表和链表的区别"></a>顺序表和链表的区别</h2><ul><li>空间:<ul><li>一段连续的空间<ul><li>插入可能需要扩容</li></ul></li><li>底层空间不连续(逻辑顺序通过指针连接顺序)<ul><li>不需要扩容(New节点)</li></ul></li></ul></li><li>效率:<ul><li>插入和删除效率低(需要搬移元素,O(N))</li><li>插入和删除效率高(O(1))</li></ul></li><li>空间利用率:<ul><li>一整块空间</li><li>小的节点<ul><li>内存碎片,效率低,额外空间浪费(保存的有结构体)</li></ul></li></ul></li><li>应用场景:<ul><li>插入和删除操作不多</li><li>插入和删除操作频繁</li></ul></li><li>缓存利用率:<ul><li>利用率高</li><li>利用率低</li></ul></li></ul><h2 id="vector和list的区别"><a href="#vector和list的区别" class="headerlink" title="vector和list的区别"></a>vector和list的区别</h2><ul><li>底层结构<ul><li>动态顺序表,一段连续的空间</li><li>带头结点的双向循环链表</li></ul></li><li>随机访问能力<ul><li>支持,访问某个元素O(1)</li><li>不支持,访问某个元素O(N)</li></ul></li><li>插入和删除<ul><li>插入和删除需要搬移元素,时间复杂度O(N),可能还需要增容,开辟新空间,拷贝元素,释放旧空间</li><li>插入和删除方便,时间复杂度O(1)</li></ul></li><li>空间利用率<ul><li>底层是连续的空间,不容易造成内存碎片,空间利用率高,缓存利用率高</li><li>底层节点动态开辟,容易造成内存碎片,空间利用率低,缓存利用率低</li></ul></li><li>迭代器<ul><li>原生态指针</li><li>对原生态指针的封装</li></ul></li><li>迭代器失效<ul><li>插入时,要给所有的迭代器重新赋值(因为插入有可能会导致扩容),删除时,当前迭代器失效,需要重新赋值</li><li>插入时,不会导致迭代器失效,删除时,只会导致当前迭代器失效,其他迭代器不受影响</li></ul></li><li>应用场景<ul><li>需要高效存储,支持随机访问,不关心插入删除效率低</li><li>大量插入和删除操作,不关心随机访问</li></ul></li></ul><h2 id="环形队列队满和队空"><a href="#环形队列队满和队空" class="headerlink" title="环形队列队满和队空"></a>环形队列队满和队空</h2><ul><li>空链表:<ul><li>front==rear</li></ul></li><li>标记<ul><li>flag == 0 &amp;&amp; rear==front,队列空</li><li>flag == 1 &amp;&amp; rear==front,队列满</li></ul></li><li>少存一个元素<ul><li>(rear+1)%capacity==front,可能会越界</li></ul></li><li>取模<ul><li>rear%=capacity,效率不高</li><li>if(rear==capacity){rear=0;}</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//队列模拟实现栈</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最好按照模板来写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackByQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (q1.empty() == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">q2.push(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">q1.push(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (q1.size() &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">q2.push(q1.front());</span><br><span class="line">q1.pop();</span><br><span class="line">&#125;</span><br><span class="line">q1.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T&amp; <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (q1.empty() == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> q2.back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> q1.back();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (q1.empty() == <span class="literal">true</span> &amp;&amp; q2.empty() == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">queue</span>&lt;T&gt; q1;</span><br><span class="line"><span class="built_in">queue</span>&lt;T&gt; q2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写一个最小栈</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.使用两个栈</span></span><br><span class="line"><span class="comment">//2.一次存两个值,一个正常插入的一个最小值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MinStack()</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法二，一次存入两个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//插入数据到s中</span></span><br><span class="line"><span class="keyword">if</span>(s.empty()==<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.push(data);</span><br><span class="line">s.push(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a=s.top();</span><br><span class="line">s.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Min=s.top();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(data&lt;=Min)</span><br><span class="line">&#123;</span><br><span class="line">s.push(a);</span><br><span class="line"></span><br><span class="line">s.push(data);</span><br><span class="line">s.push(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">s.push(a);</span><br><span class="line"></span><br><span class="line">s.push(Min);</span><br><span class="line">s.push(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s.pop();</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.top();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a=s.top();</span><br><span class="line">s.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Min=s.top();</span><br><span class="line">s.push(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s.empty()==<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190905203632625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逆波兰表达式(Reverse Polish Notation)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(1+2)*(3+4)---&gt;12+34+*</span></span><br></pre></td></tr></table></figure><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ul><li><p>树相关的概念:</p><ul><li>双亲:若一个节点含有子节点,则这个节点是这个子节点的双亲节点</li><li>高度:树中节点的最大层次</li><li>兄弟:有相同双亲节点的被称为兄弟节点</li><li>节点的度:结点子树的个数</li><li>叶子节点:度为0的节点被称为叶节点</li></ul></li><li><p>表示方式:</p><ul><li>孩子表示法</li><li>双亲表示法</li><li>孩子双亲表示法</li><li>孩子兄弟表示法</li></ul></li><li><p>二叉树概念:</p><ul><li>空树，根+根的左子树+根的右子树</li></ul></li><li><p>特殊二叉树:</p><ul><li>满二叉树:每一层节点都达到了最大值</li><li>完全二叉树:前N个节点与满二叉树的前N个节点分布形式完全相同</li></ul></li><li><p>二叉树的五条性质:</p><ul><li><p>1.若规定根节点的层次为1,则一颗非空二叉树的第i层最多有2^(i-1)个节点</p></li><li><p>2.若规定只有根节点的二叉树深度为1,则深度为k的二叉树最大节点数是2^k-1</p></li><li><p>3.对任意一颗二叉树,如果其叶节点个数为n0,度为2的非叶节点个数为n2,则有n0=n2+1</p></li><li><p>4.具有n个节点的完全二叉树的深度k为log2(n+1)向上取整</p></li><li><p>5.对于有n个节点的完全二叉树,如果按照从上至下从左至右的顺序对所有节点从0进行编号</p><ul><li><p>则对于序号为i的节点有:</p><ul><li><p>&lt;1&gt;.若i&gt;0,双亲序号:(i-1)/2i=0,i为根节点编号,无双亲节点</p></li><li><p>&lt;2&gt;.若2i+1&lt;n,左孩子序号:2i+1,否则无左孩子</p></li><li><p>&lt;3&gt;.若2i+2&lt;n,右孩子序号:2i+2,否则无右孩子</p></li></ul></li></ul></li></ul></li></ul><p>一个完全二叉树1000个节点,____个叶子节点,____个非叶子节点,____个只有左孩子,____个只有右孩子</p><p>假设二叉树总共有N个节点,n0,n1,n2,N=n0+n1+n2</p><p>完全二叉树—&gt;n0+1+n2=1000—&gt;2*n2=998—&gt;n2=499—&gt;n0=500</p><p>1个只有左孩子,0个只有右孩子</p><h2 id="二叉树的存储"><a href="#二叉树的存储" class="headerlink" title="二叉树的存储"></a>二叉树的存储</h2><p><a href="https://blog.csdn.net/Austin\_Yan/article/details/97931649" target="_blank" rel="noopener">https://blog.csdn.net/Austin\_Yan/article/details/97931649</a></p><ul><li><p>顺序结构</p><ul><li><p>堆,只适合完全二叉树,否则空间会大量浪费</p></li><li><p>向下调整</p><ul><li>看是否调整到最后一个节点,while (child &lt; size)</li><li>优先找到左孩子</li><li>左右孩子中较小的(右孩子必须存在),用child标记</li><li>双亲与孩子交换,swap(C++标准库提供)</li><li>parent放在child位置,child重新计算</li><li>如果随机数组一开始就不满足堆的性质,先找到倒数第一个非叶子节点</li><li>lastleaf = (size - 2) &gt;&gt; 1;</li><li>在处理上一个叶子节点,直到全处理完</li></ul></li><li><p>向上调整(插入)</p><ul><li>通过孩子找双亲,parent=(child-1)&gt;&gt;1</li><li>孩子如果比双亲小,交换位置swap(C++标准库提供)</li><li>child放在parent位置,parent重新计算</li><li>看是否调整到第一个节点,while (child != 0)</li></ul></li><li><p>堆的删除</p><ul><li>把堆顶元素和最后一个元素互换</li><li>更新元素个数,size–;</li><li>使用向下调整</li></ul></li><li><p>堆排</p><ul><li>创建堆(向下调整),从倒数第一个叶子节点</li><li>首末元素交换,size–</li><li>重复过程</li></ul></li><li><p>链式结构</p></li><li><p>获取树的高度</p><ul><li>空树,返回0</li><li>只有根节点,返回1</li><li>返回根的左子树的高度+根的右子树高度</li></ul></li><li><p>获取叶子节点的个数</p><ul><li>空树,返回0</li><li>只有根节点,返回1</li><li>返回根的左子树叶子节点个数+根的右子树叶子节点个数</li></ul></li><li><p>获取K层的节点数</p><ul><li>如果空树,或者K=0,返回0</li><li>如果只有K=1,只有根节点,返回1</li><li>返回K-1的左子树作为根节点的节点个数+K-1的右子树作为根节点的节点个数</li></ul></li><li><p>获取节点的双亲</p><ul><li>树不存在,或者节点为根节点,返回nullptr</li><li>节点若是根节点左孩子或者右孩子,返回根节点</li><li>去根的左子树中查找,存在就返回,否则去根的右子树中查找</li></ul></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写一个堆排(向下调整)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> Compare&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapAdjust</span><span class="params">(T* <span class="built_in">array</span>, <span class="keyword">int</span> size, <span class="keyword">int</span> parent,Compare com)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> child = parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (child &lt; size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (child + <span class="number">1</span> &lt; size &amp;&amp; com(<span class="built_in">array</span>[child + <span class="number">1</span>] , <span class="built_in">array</span>[child]))</span><br><span class="line">child += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (com(<span class="built_in">array</span>[child] , <span class="built_in">array</span>[parent]))</span><br><span class="line">&#123;</span><br><span class="line">swap(<span class="built_in">array</span>[child], <span class="built_in">array</span>[parent]);</span><br><span class="line">parent = child;</span><br><span class="line">child = parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> Compare&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(T* <span class="built_in">array</span>, <span class="keyword">int</span> size,Copmare com)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> root = ((size - <span class="number">1</span> - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (root; root &gt;= <span class="number">0</span>; --root)</span><br><span class="line">&#123;</span><br><span class="line">HeapAdjust(<span class="built_in">array</span>, size, root,com);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> end = size - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (end != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">swap(<span class="built_in">array</span>[<span class="number">0</span>], <span class="built_in">array</span>[end]);</span><br><span class="line">HeapAdjust(<span class="built_in">array</span>, end, <span class="number">0</span>);</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190905135944256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="二叉树的创建"><a href="#二叉树的创建" class="headerlink" title="二叉树的创建"></a>二叉树的创建</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">BTNode(<span class="keyword">int</span> data):_data(data),_pLeft(<span class="literal">nullptr</span>),_pRight(<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BTNode* _pLeft;</span><br><span class="line">BTNode* _pRight;</span><br><span class="line"><span class="keyword">int</span> _data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">BTNode* <span class="title">CreateBinTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v,<span class="keyword">int</span>&amp; index,<span class="keyword">int</span> mark)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index&gt;=v.size() || v[index]==mark)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BTNode* pRoot=<span class="keyword">new</span> BTNode(v[index]);</span><br><span class="line"></span><br><span class="line">index++;</span><br><span class="line">pRoot-&gt;_pLeft=CreateBinTree(v,index,mark);</span><br><span class="line"></span><br><span class="line">index++;</span><br><span class="line">pRoot-&gt;_pRight=CreateBinTree(v,index,mark);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pRoot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非递归前、中、后序遍历"><a href="#非递归前、中、后序遍历" class="headerlink" title="非递归前、中、后序遍历"></a>非递归前、中、后序遍历</h2><ul><li>前序遍历<ul><li>检测栈是否为空</li><li>获取栈顶元素,遍历</li><li>如果有左右子树,压栈先放入右子树,在放入左子树</li></ul></li><li>中序遍历<ul><li>找到根节点最左侧的待遍历节点</li><li>保存路径上所有节点</li><li>获取栈顶元素,遍历,pop出栈</li><li>把最左侧节点的右子树当成一棵单独的树处理</li></ul></li><li>后序遍历<ul><li>找到根节点最左侧的待遍历节点</li><li>保存路径上所有节点</li><li>获取栈顶元素,最左侧节点,如果其没有右孩子,或者右孩子被遍历过(判断ptop-&gt;right==prev),遍历此节点</li><li>如果有右孩子,pcur=ptop-&gt;right,循环继续</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderNor</span><span class="params">(BTNode* pRoot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pRoot==<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;BTNode*&gt; s;</span><br><span class="line">s.push(pRoot);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(s.empty()!=<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">BTNode* pCur=s.top();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;pCur-&gt;_data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">s.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pCur-&gt;_pRight!=<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.push(pCur-&gt;_pRight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pCur-&gt;_pLeft!=<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.push(pCur-&gt;_pLeft);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InorderNor</span><span class="params">(BTNode* pRoot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pRoot==<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;BTNode*&gt; s;</span><br><span class="line">BTNode* pCur=pRoot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(s.empty()!=<span class="literal">true</span> || pCur!=<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(pCur!=<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.push(pCur);</span><br><span class="line">pCur=pCur-&gt;_pLeft;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pCur=s.top();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;pCur-&gt;_data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">s.pop();</span><br><span class="line">pCur=pCur-&gt;_pRight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderNor</span><span class="params">(BTNode* pRoot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pRoot==<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;BTNode*&gt; s;</span><br><span class="line">BTNode* pCur=pRoot;</span><br><span class="line">BTNode* pPrev=<span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(s.empty()!=<span class="literal">true</span> || pCur!=<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(pCur!=<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.push(pCur);</span><br><span class="line">pCur=pCur-&gt;_pLeft;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BTNode* pTop=s.top();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pTop-&gt;_pRight==<span class="literal">nullptr</span> || pTop-&gt;_pRight==pPrev)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;pTop-&gt;_data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">pPrev=pTop;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pCur=pTop-&gt;_pRight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190906125622218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h2><ul><li>从前序遍历结果拿到根节点</li><li>从中序遍历结果确认根的左右子树</li><li>建立区间,[left,Inindex),[Inindex+1,right)</li><li>前段区间递归建立左子树,后段区间递归建立右子树</li><li>递归前注意++index,根节点创建完之后索引朝后走</li><li>注意Inindex防止越界,if(left&lt;Inindex),if(Inindex+1&lt;right)</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BTNode* <span class="title">ReBuildBinTree</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; pre, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; in, <span class="keyword">int</span>&amp; index, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BTNode* pRoot = <span class="keyword">new</span> BTNode(pre[index]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Inindex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (in[Inindex] != pre[index])</span><br><span class="line">&#123;</span><br><span class="line">Inindex++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (left &lt; Inindex)</span><br><span class="line">&#123;</span><br><span class="line">pRoot-&gt;_pLeft = ReBuildBinTree(pre, in, ++index, left, Inindex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Inindex + <span class="number">1</span> &lt; right)</span><br><span class="line">&#123;</span><br><span class="line">pRoot-&gt;_pRight = ReBuildBinTree(pre, in, ++index, Inindex + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pRoot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190906140120358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> DS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VSCodeRemote SSH公钥免密登录，远离xshell，摆脱vim</title>
      <link href="/2019/08/31/VSCode-remotessh/"/>
      <url>/2019/08/31/VSCode-remotessh/</url>
      
        <content type="html"><![CDATA[<p>比起VIM的纯键盘操作,我更喜欢鼠标加键盘的操作方式…<br>所以能想办法替代VIM就想办法替代..虽然我也不是服务器开发..</p><a id="more"></a><h2 id="安装插件："><a href="#安装插件：" class="headerlink" title="安装插件："></a>安装插件：</h2><p>微软的宇宙第一IDE让人使用之后欲罢不能，那么Linux编程有没有好用的IDE呢？</p><p>最近VS Code出了一个插件，对我这种vim使用很不舒服的人来说简直是爱极了！~</p><p>注意：</p><ul><li>要想完全不使用xshell，vs code必须安装编译器</li><li>否则写完代码无法编译，毕竟vs code只是编辑器</li><li>要想让vs code的C/C++自动补全更加智能，需要安装llvm</li></ul><p>但是，萝卜青菜，各有所爱，vs code对我而言只是一款编辑代码的工具，我不想为了编译代码再花更多时间，我只是不喜欢vim而已，xshell上使用gcc和g++那么方便为什么不呢？</p><p>首先，搜索Remote SSH，安装<br><img src="https://img-blog.csdnimg.cn/20190831190034285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后左下角多了一个按钮<br><img src="https://img-blog.csdnimg.cn/20190831190148892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="生成公钥："><a href="#生成公钥：" class="headerlink" title="生成公钥："></a>生成公钥：</h2><p>配置好之后，就可以连接服务器了，但是问题来了，每次都要输入两次密码很烦</p><p>所以我们使用ssh生成一份公钥，openssh组件是windows 1809之后的版本推出的</p><p>如果不想升级系统，也不想安装openssh，那么请往下看~</p><p>使用过github的小伙伴看到下面这个东西是不是很亲切？</p><p><img src="https://img-blog.csdnimg.cn/20190831190543733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>git 安装完后，bash 、 ssh 、 ssh-keygen 等一些常用的 linux 命令工具都已经安装</p><ul><li>打开Git Bash Here进入命令行</li><li>切换到目录 cd C:/Users/你电脑的用户名/.ssh/</li><li>生成密钥 ssh-keygen -t rsa -b 4096，回车表示存到当前文件夹</li><li>pub文件就是生成的公钥</li></ul><p><img src="https://img-blog.csdnimg.cn/20190831190847170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到这个时候，就快要和vim说拜拜了~</p><h2 id="服务器操作："><a href="#服务器操作：" class="headerlink" title="服务器操作："></a>服务器操作：</h2><p>rz或者直接拖动，将公钥上传到服务器，然后cat显示在屏幕上，复制</p><p>然后在服务器键入如下命令：(来源于：<a href="https://blog.csdn.net/zhangpeterx/article/details/97375233）" target="_blank" rel="noopener">https://blog.csdn.net/zhangpeterx/article/details/97375233）</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~&#x2F;.ssh </span><br><span class="line"></span><br><span class="line">chmod 700 ~&#x2F;.ssh </span><br><span class="line"></span><br><span class="line">nano ~&#x2F;.ssh&#x2F;authorized_keys </span><br><span class="line"></span><br><span class="line">在nano界面 ctrl+v，然后ctrl+x退出，回车表示不更改文件名</span><br><span class="line"></span><br><span class="line">chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><p>可以把xshell关闭了，打开vs code，就会连接服务器，不需要手动输密码</p><h2 id="效果截图："><a href="#效果截图：" class="headerlink" title="效果截图："></a>效果截图：</h2><p><img src="https://img-blog.csdnimg.cn/20190831191516459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> VsCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【Linux小项目---1】jsonCpp库和数据库接口的使用</title>
      <link href="/2019/08/29/LinuxProject-1/"/>
      <url>/2019/08/29/LinuxProject-1/</url>
      
        <content type="html"><![CDATA[<p>学习Linux下的jsonCpp库和MySql数据库的接口的使用…</p><a id="more"></a><h2 id="Insert"><a href="#Insert" class="headerlink" title="Insert:"></a>Insert:</h2><p><img src="https://img-blog.csdnimg.cn/20190828235135580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190828235155792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="selectAll"><a href="#selectAll" class="headerlink" title="selectAll:"></a>selectAll:</h2><p><img src="https://img-blog.csdnimg.cn/20190828234606190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="selectOne-1"><a href="#selectOne-1" class="headerlink" title="selectOne(1):"></a>selectOne(1):</h2><p><img src="https://img-blog.csdnimg.cn/20190828234013657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Delete-6"><a href="#Delete-6" class="headerlink" title="Delete(6):"></a>Delete(6):</h2><p><img src="https://img-blog.csdnimg.cn/20190829000052143.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190829000102819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【C++小项目---6】庄周:啦啦啦啦啦~</title>
      <link href="/2019/08/22/C++Project-6/"/>
      <url>/2019/08/22/C++Project-6/</url>
      
        <content type="html"><![CDATA[<p>对于程序的逻辑进行完善…</p><a id="more"></a><h2 id="完善登陆界面逻辑"><a href="#完善登陆界面逻辑" class="headerlink" title="完善登陆界面逻辑:"></a>完善登陆界面逻辑:</h2><p>我发现,在用户不输入用户名和密码的情况下,依次弹窗提醒,但是提醒结束之后,程序还是往下执行了,导致登陆界面隐藏了,这与正常情况不符,正常的应该是弹窗完登陆按钮响应完毕,等待用户继续输入<br><img src="https://img-blog.csdnimg.cn/20190822174056184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h2 id="完善售货员界面OK按钮的逻辑"><a href="#完善售货员界面OK按钮的逻辑" class="headerlink" title="完善售货员界面OK按钮的逻辑:"></a>完善售货员界面OK按钮的逻辑:</h2><p>购买商品的数量大于库存,应该提示购买失败,清空输入的商品数量编辑框,保留查询的商品名称和库存数量,同时应该把商品的库存正确数量再次显示,避免用户再次点击查询才能看到正确的库存数量</p><ul><li>库存为2,但是购买数量为3,虽然现实中不可能存在,但是软件中一切皆有可能<br><img src="https://img-blog.csdnimg.cn/2019082217510362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>重新显示库存数量,并且商品数量编辑框置零<br><img src="https://img-blog.csdnimg.cn/2019082217524283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>这里直接调用SelectGood方法的前提是输入的商品名称不清空<br><img src="https://img-blog.csdnimg.cn/2019082217533650.png" alt="在这里插入图片描述"></li></ul><hr><h2 id="完善售货员界面-按钮的逻辑"><a href="#完善售货员界面-按钮的逻辑" class="headerlink" title="完善售货员界面+ -按钮的逻辑:"></a>完善售货员界面+ -按钮的逻辑:</h2><p>商品数量为0时,不可以-号操作,弹窗提示,置零商品数量编辑框</p><ul><li>商品数量大于等于1的时候,-号按钮才可以操作,否则报错</li></ul><p><img src="https://img-blog.csdnimg.cn/2019082217574859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190822175941184.png" alt="在这里插入图片描述"></p><hr><h1 id="庄周表示-未完待续"><a href="#庄周表示-未完待续" class="headerlink" title="庄周表示,未完待续!~"></a>庄周表示,未完待续!~</h1>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【针对性复习】选择排序和归并排序</title>
      <link href="/2019/08/15/Cpp-sort1/"/>
      <url>/2019/08/15/Cpp-sort1/</url>
      
        <content type="html"><![CDATA[<p>之前相关内容的博客,只有简略的思路和代码,起不到复习的作用…<br>现在把思路整理清楚,过程图示也画出来,再把代码重新写一遍,争取把排序遗留的问题彻底解决…</p><a id="more"></a><h2 id="选择排序的思路"><a href="#选择排序的思路" class="headerlink" title="选择排序的思路:"></a>选择排序的思路:</h2><p><strong>从头到尾遍历,找最大的元素<font color=red>的下标</font>,找到之后把最大的元素和最后一个位置的元素交换</strong></p><p><font color=0099ff><strong>易错点:</strong></font></p><ul><li>max作为保存最大元素下标的存在,每次使用完应该清零</li><li>找到值去交换,最大的元素位置是没有发生变化的</li></ul><h2 id="过程图示"><a href="#过程图示" class="headerlink" title="过程图示:"></a>过程图示:</h2><p><img src="https://img-blog.csdnimg.cn/20190815131320255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例:"></a>代码示例:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通的未经过优化的选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> end = size - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (end != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> begin =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (begin; begin &lt;= end; ++begin)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[max] &lt; <span class="built_in">array</span>[begin])</span><br><span class="line">&#123;</span><br><span class="line">max = begin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swap(<span class="built_in">array</span>[max], <span class="built_in">array</span>[end]);</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化后的选择排序"><a href="#优化后的选择排序" class="headerlink" title="优化后的选择排序:"></a>优化后的选择排序:</h2><p><strong>将一次选择一个最大值变为<font color=red>一次选择一个最大值和最小值</font></strong></p><p><strong>最大值放在最后面的end位置,最小值放在最前面的begin位置</strong></p><p><font color=0099ff><strong>普通选择排序缺陷:</strong></font></p><ul><li>存在大量的重复比较</li></ul><p><font color=0099ff><strong>易错点:</strong></font></p><ul><li>index的值每次遍历查找前要重置</li><li>minpos和maxpos使用完之后的值也要重置</li></ul><h2 id="过程图示-1"><a href="#过程图示-1" class="headerlink" title="过程图示:"></a>过程图示:</h2><p><img src="https://img-blog.csdnimg.cn/20190815134605454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例:"></a>代码示例:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSortD</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> end = size - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> index = begin + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> minpos = begin;</span><br><span class="line"><span class="keyword">int</span> maxpos = begin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (index; index &lt;= end; ++index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[index]&gt;<span class="built_in">array</span>[maxpos])</span><br><span class="line">&#123;</span><br><span class="line">maxpos = index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[index] &lt; <span class="built_in">array</span>[minpos])</span><br><span class="line">&#123;</span><br><span class="line">minpos = index;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果minpos在最后的位置,把minpos的位置与maxpos互换即可</span></span><br><span class="line"><span class="keyword">if</span> (minpos == end)</span><br><span class="line">&#123;</span><br><span class="line">minpos = maxpos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swap(<span class="built_in">array</span>[begin], <span class="built_in">array</span>[minpos]);</span><br><span class="line"></span><br><span class="line">swap(<span class="built_in">array</span>[end], <span class="built_in">array</span>[maxpos]);</span><br><span class="line"></span><br><span class="line">begin++;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序-递归-的思路"><a href="#归并排序-递归-的思路" class="headerlink" title="归并排序(递归)的思路:"></a>归并排序(递归)的思路:</h2><p><strong>对一组数据,一直均分到一组只有一个元素,然后将其归并,逐步变为有序</strong></p><p><font color=0099ff><strong>易错点:</strong></font></p><ul><li>只有元素有序才可以归并</li><li><font color=red>begin2是以mid开始,如果以mid+1开始,会越界</font></li><li>先处理左半部分,在处理右半部分,都有序之后,归并,写回原数组</li><li>归并的时候申请辅助空间如果是在函数里,函数调用结束会释放,所以使用参数传递进去</li><li>空间只需要一份,所以不能当作mergeData的参数,因为递归进来每次都会创建</li></ul><h2 id="归并数据过程图示"><a href="#归并数据过程图示" class="headerlink" title="归并数据过程图示:"></a>归并数据过程图示:</h2><p><img src="https://img-blog.csdnimg.cn/20190815160025917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>长短不一时,一方写完,另一方还未完,直接把另一方直接写入到后面</strong></p><h2 id="归并数据思路"><a href="#归并数据思路" class="headerlink" title="归并数据思路:"></a>归并数据思路:</h2><ul><li><p>使用两个指针来依次对比左半部分和右半部分的第一个元素,先把小的放进去</p></li><li><p>放进去的那部分指针后移,继续比较,一直比到放完为止,长度不一致的情况循环结束单独处理</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeData</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>,<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right,<span class="keyword">int</span>* tmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> begin1 = left;</span><br><span class="line"><span class="keyword">int</span> end1 = mid;</span><br><span class="line"><span class="keyword">int</span> begin2 = mid;</span><br><span class="line"><span class="keyword">int</span> end2 = right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = left;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin1 &lt; end1 &amp;&amp; begin2&lt;end2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[begin1] &lt; <span class="built_in">array</span>[begin2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = <span class="built_in">array</span>[begin1];</span><br><span class="line">begin1++;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = <span class="built_in">array</span>[begin2];</span><br><span class="line">begin2++;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理长度不一致的情况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin1 &lt; end1)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = <span class="built_in">array</span>[begin1];</span><br><span class="line">begin1++;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin2&lt;end2)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = <span class="built_in">array</span>[begin2];</span><br><span class="line">begin2++;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为了方便调用,进行一下封装,其实不封装也无所谓,那时候还没学C++所以用malloc,现在自然用new</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* tmp = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line"></span><br><span class="line">_mergeSort(<span class="built_in">array</span>, <span class="number">0</span>, size, tmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[] tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=red><strong>说真的,我不是很喜欢递归的归并排序代码,我觉得memcpy那里需要加left真的很难理解</strong></font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _mergeSort(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> left, <span class="keyword">int</span> right,<span class="keyword">int</span>* tmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (right - left &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">_mergeSort(<span class="built_in">array</span>, left, mid, tmp);</span><br><span class="line">_mergeSort(<span class="built_in">array</span>, mid, right, tmp);</span><br><span class="line"></span><br><span class="line">mergeData(<span class="built_in">array</span>, left, mid, right, tmp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(<span class="built_in">array</span> + left, tmp + left, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(right - left));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不加left每次拷贝都会拷贝到左半部分,右半部分永远是空的</strong><br><img src="https://img-blog.csdnimg.cn/20190815171253789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>0-5这一整体,分组0-1 2-5,<font color=red>处理右边的部分的时候left是2</font>,如果处理完了往回拷贝的时候不加left</li><li>array默认指向数组第一个元素,等于2-5这边的数据没有接在前两个元素后面,而是有两个把之前的左半部分覆盖了</li></ul><h2 id="归并排序-递归-过程图示"><a href="#归并排序-递归-过程图示" class="headerlink" title="归并排序(递归)过程图示:"></a>归并排序(递归)过程图示:</h2><p><font color=0099ff><strong>其实应该34一组,291一组,但是看思路就行了,这里画的严格按照代码来说是有问题的</strong></font><br><img src="https://img-blog.csdnimg.cn/20190815173059897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="归并排序-循环-的思路"><a href="#归并排序-循环-的思路" class="headerlink" title="归并排序(循环)的思路:"></a>归并排序(循环)的思路:</h2><p><strong>与递归不同的是,循环不需要先分组了,因为每个元素都是单独的,<font color=0099ff>可以看作已经分好组了,直接开始归并</font></strong></p><p><font color=0099ff><strong>易错点:</strong></font></p><ul><li>需要在循环里手动赋予left的值</li><li>i应该+=2*gap</li><li>gap可以看作一组元素的个数,所以left,mid,right的值用gap表示</li><li><font color=red>mid和right有可能会超出size的范围造成越界</font>,需要单独处理</li></ul><p><img src="https://img-blog.csdnimg.cn/20190815180158333.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190815180449527.png" alt="在这里插入图片描述"></p><h2 id="归并排序-循环-过程图示"><a href="#归并排序-循环-过程图示" class="headerlink" title="归并排序(循环)过程图示:"></a>归并排序(循环)过程图示:</h2><p><img src="https://img-blog.csdnimg.cn/20190815174333944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="归并排序-循环-代码"><a href="#归并排序-循环-代码" class="headerlink" title="归并排序(循环)代码:"></a>归并排序(循环)代码:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSortN</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* tmp = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> gap = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (gap &lt; size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i += <span class="number">2</span> * gap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> left = i;</span><br><span class="line"><span class="keyword">int</span> mid = left + gap;</span><br><span class="line"><span class="keyword">int</span> right = mid + gap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mid &gt; size)</span><br><span class="line">&#123;</span><br><span class="line">mid = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (right &gt; size)</span><br><span class="line">&#123;</span><br><span class="line">right = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mergeData(<span class="built_in">array</span>, left, mid, right, tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(<span class="built_in">array</span>, tmp, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*size);</span><br><span class="line"></span><br><span class="line">gap *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[] tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>至此,排序所有的内容基本都搞清楚了,短时间也不太可能会忘,忘了再过来看看就行了,开始新的篇章~</strong></p>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【C++小项目---3】连接数据库检测用户名密码、实现登录</title>
      <link href="/2019/08/09/C++Project-3/"/>
      <url>/2019/08/09/C++Project-3/</url>
      
        <content type="html"><![CDATA[<p>C++小项目学习数据库读取密码和实现登录窗口（学习多窗口的创建）…</p><a id="more"></a><h2 id="数据库中插入信息："><a href="#数据库中插入信息：" class="headerlink" title="数据库中插入信息："></a>数据库中插入信息：</h2><p><img src="https://img-blog.csdnimg.cn/20190809165849441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="实现检测功能："><a href="#实现检测功能：" class="headerlink" title="实现检测功能："></a>实现检测功能：</h2><p><strong>利用DuiLib库中的方法,拿到编辑框中的用户名和密码,想办法转为string类型</strong></p><p><strong>CDuistring类方法中GetData()可以将Cduistring类型转为LPCTSTR</strong></p><p><strong>再写一个转换函数,将为string类型,函数我不会写,我是百度查的,代码如下:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">StringFromLPCTSTR</span><span class="params">(LPCTSTR str)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _UNICODE</span></span><br><span class="line"><span class="keyword">int</span> size_str = WideCharToMultiByte(CP_UTF8, <span class="number">0</span>, str, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* point_new_array = <span class="keyword">new</span> <span class="keyword">char</span>[size_str];</span><br><span class="line"></span><br><span class="line">WideCharToMultiByte(CP_UTF8, <span class="number">0</span>, str, <span class="number">-1</span>, point_new_array, size_str, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">return_string</span><span class="params">(point_new_array)</span></span>;</span><br><span class="line"><span class="keyword">delete</span>[] point_new_array;</span><br><span class="line">point_new_array = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> return_string;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">string</span>(str);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后连接数据库,拿到用户名和密码,使用mysql_query在数据库中查询</strong></p><p><code>MYSQL_RES* result = mysql_store_result(_mySql);</code></p><p><strong>保存结果集,在判断是否在数据库中能查到用户名和对应的密码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(mysql_num_rows(result))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h2 id="代码运行测试图："><a href="#代码运行测试图：" class="headerlink" title="代码运行测试图："></a>代码运行测试图：</h2><p><strong>输入用户名123，密码123，登录失败</strong><br><img src="https://img-blog.csdnimg.cn/20190809165950334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入用户名1,密码123</strong><br><img src="https://img-blog.csdnimg.cn/20190809170119543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>登陆成功:</strong><br><img src="https://img-blog.csdnimg.cn/20190809170215184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【C++小项目---2】C++连接MySQL数据库、DuLib绘制登录界面</title>
      <link href="/2019/08/07/C++Project-2/"/>
      <url>/2019/08/07/C++Project-2/</url>
      
        <content type="html"><![CDATA[<p>C++小项目的数据库的连接（本地）学习，学习界面的绘制…</p><a id="more"></a><h2 id="连接MySQL数据库："><a href="#连接MySQL数据库：" class="headerlink" title="连接MySQL数据库："></a>连接MySQL数据库：</h2><p><strong>将常用的操作封装起来,方便调用 环境:VS 2013 数据库版本8.0.7,使用C++接口</strong></p><p><strong>MySQL.h</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MySQL();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ConnectMysql</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* host, <span class="keyword">const</span> <span class="keyword">char</span>* user, <span class="keyword">const</span> <span class="keyword">char</span>* password, <span class="keyword">const</span> <span class="keyword">char</span>* dbname)</span></span>;</span><br><span class="line"></span><br><span class="line">~MySQL();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">Select</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; strSQL)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Insert</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; strSQL)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Delete</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; strSQL)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">UpDate</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; strSQL)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">MYSQL* _mySql;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>MySQL.cpp</strong></p><p><strong>Select写的目前还存在问题,日后修改</strong></p><p><strong>Insert目前没测,但想必也不可能是对的</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"MySQL.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">MySQL::MySQL()</span><br><span class="line">&#123;</span><br><span class="line">_mySql = mysql_init(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置数据库编码方式</span></span><br><span class="line">mysql_options(_mySql, MYSQL_SET_CHARSET_NAME, <span class="string">"gbk"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MySQL::~MySQL()</span><br><span class="line">&#123;</span><br><span class="line">mysql_close(_mySql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MySQL::ConnectMysql</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* host, <span class="keyword">const</span> <span class="keyword">char</span>* user, <span class="keyword">const</span> <span class="keyword">char</span>* password, <span class="keyword">const</span> <span class="keyword">char</span>* dbname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mysql_real_connect(_mySql, host, user, password, dbname, <span class="number">3306</span>, <span class="literal">nullptr</span>, <span class="number">0</span>) == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据库连接失败!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">MySQL::Select</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; strSQL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vRet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mysql_query(_mySql, strSQL.c_str()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mysql_error(_mySql) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> vRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取查询的记录集</span></span><br><span class="line">MYSQL_RES* mySQLRES = mysql_store_result(_mySql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mySQLRES == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mysql_error(_mySql) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> vRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取字段</span></span><br><span class="line"><span class="keyword">int</span> itemCount = mysql_num_fields(mySQLRES);</span><br><span class="line"></span><br><span class="line">MYSQL_ROW mySQLROW;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (mySQLROW = mysql_fetch_row(mySQLRES))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; itemCount; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//vRet.push_back(mySQLROW[i]);</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mySQLROW[i] &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysql_free_result(mySQLRES);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> vRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MySQL::Insert</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; strSQL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mysql_query(_mySql, strSQL.c_str()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mysql_error(_mySql) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bool MySQL::Delete(const string&amp; strSQL)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//bool MySQL::UpDate(const string&amp; strSQL)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Main.cpp</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MySQL.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MySQL mysql;</span><br><span class="line"></span><br><span class="line">mysql.ConnectMysql(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"123123"</span>, <span class="string">"supmarket"</span>);</span><br><span class="line"></span><br><span class="line">mysql.Select(<span class="string">"select * from employee;"</span>);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码运行测试图"><a href="#代码运行测试图" class="headerlink" title="代码运行测试图:"></a>代码运行测试图:</h3><p><img src="https://img-blog.csdnimg.cn/20190807141330883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="绘制登录界面："><a href="#绘制登录界面：" class="headerlink" title="绘制登录界面："></a>绘制登录界面：</h2><p><img src="https://img-blog.csdnimg.cn/20190807141707366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>注意水平布局和垂直布局的层次关系，不然会出现编辑框无法鼠标选中等问题</strong></p><p><strong>而且，使用中文的最小化和关闭好low的感觉，等找到素材之后把它换掉</strong></p><h3 id="消息响应："><a href="#消息响应：" class="headerlink" title="消息响应："></a>消息响应：</h3><p><strong>登录窗口只有三个按钮，分别是最小化，关闭以及登录</strong></p><p><strong>最小化调用win32的函数::SendMessage完成，要加作用域限定符</strong></p><p><strong>关闭直接调用Close函数完成</strong></p><p><strong>登录的话，触发响应调用Login函数，**</strong>Login函数的主要功能是判断用户输入是否合**</p><p><strong>法，以及登录成功后隐藏登录界面创建主界面</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoginWind::Notify</span><span class="params">(TNotifyUI&amp; msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (msg.sType == _T(<span class="string">"click"</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (msg.pSender-&gt;GetName() == _T(<span class="string">"btnClose"</span>))</span><br><span class="line">&#123;</span><br><span class="line">Close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (msg.pSender-&gt;GetName() == _T(<span class="string">"btnMin"</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//MessageBox(NULL, _T("最小化"), _T("提示信息"), IDOK);</span></span><br><span class="line">::SendMessage(m_hWnd,WM_SYSCOMMAND,SC_MINIMIZE,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (msg.pSender-&gt;GetName() == _T(<span class="string">"btnLogin"</span>))</span><br><span class="line">&#123;</span><br><span class="line">LoginWind::Login();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码运行测试图-1"><a href="#代码运行测试图-1" class="headerlink" title="代码运行测试图:"></a>代码运行测试图:</h3><p><strong>虽说丑到极致,弱到爆炸…但是毕竟也是人生中第一个界面程序,总算脱离控制台了…</strong></p><p><img src="https://img-blog.csdnimg.cn/20190807142754324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="更换图标"><a href="#更换图标" class="headerlink" title="更换图标:"></a>更换图标:</h2><p><strong>用户名和密码来自QQ登陆界面,最小化和关闭来自QQ聊天窗口,选中后图标颜色变化也来自聊天窗口</strong></p><p><strong>目前标题栏还是无法拖动…有待解决…</strong><br><img src="https://img-blog.csdnimg.cn/2019080715562745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/201908071558100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="修改window属性"><a href="#修改window属性" class="headerlink" title="修改window属性:"></a>修改window属性:</h2><p><strong>通过修改caption和sizebox两项属性可以解决标题栏无法拖动的问题,也可以使得窗口大小可以调整</strong></p><p><strong>千万不要手动往xml文件里写入,否则你的图片会全部失效</strong><br><img src="https://img-blog.csdnimg.cn/20190807194741140.png" alt="在这里插入图片描述"></p><p><strong>未完待续~</strong></p>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【C++小项目---1】windows版本MySQL安装、DuiLib界面库编译及配置</title>
      <link href="/2019/08/06/C++Project-1/"/>
      <url>/2019/08/06/C++Project-1/</url>
      
        <content type="html"><![CDATA[<p>C++的小项目的前期环境搭建和准备工作…</p><a id="more"></a><h2 id="下载MySQL："><a href="#下载MySQL：" class="headerlink" title="下载MySQL："></a>下载MySQL：</h2><p><a href="https://dev.mysql.com/downloads" target="_blank" rel="noopener">下载传送门：MySQL8.07版本</a></p><p><strong>也可以去百度搜索5.7版本，反正结果都是一样的</strong></p><h2 id="安装MySQL："><a href="#安装MySQL：" class="headerlink" title="安装MySQL："></a>安装MySQL：</h2><p><img src="https://img-blog.csdnimg.cn/20190806130309886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>推荐使用用户自定义安装，开发者选项仅适合网络速度良好的小伙伴，下载实在太慢了…</strong></p><p><strong>之后的选择产品界面，选择MySQL SERVER8.0.7，添加到右边</strong></p><p><strong>剩下的就是一路下一步，保持默认，直到安装结束</strong></p><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><p><strong>8.07版本的MySQL自带客户端工具</strong></p><p><img src="https://img-blog.csdnimg.cn/20190806130749732.png" alt="在这里插入图片描述"></p><p><strong>如果其他版本，或者因为意外什么的导致没有这个东西，也可以使用cmd命令行操作</strong></p><p><strong>先使用命令进入MySQL安装的文件夹下的bin目录，才可以使用mysql的命令进入数据库</strong></p><p><img src="https://img-blog.csdnimg.cn/20190806131133846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>在这里输入mysql的命令就可以识别了，登录成功如下图：</strong><br><img src="https://img-blog.csdnimg.cn/20190806131245101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="编译DuiLib："><a href="#编译DuiLib：" class="headerlink" title="编译DuiLib："></a>编译DuiLib：</h2><p><strong>找到文件夹中的DuiLib文件，类型为sln，双击打开，如果是2013的编译器直接点迁移项目即可</strong></p><p><strong>中途遇到已存在需要覆盖的直接点确定</strong><br><img src="https://img-blog.csdnimg.cn/20190806131448317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>项目加载完毕之后，不需要其他操作，直接点击：项目—&gt;批生成—&gt;全选—&gt;生成</strong></p><p><strong>全部重新生成成功之后，原来的文件夹会多出一个lib文件夹，用于存放静态库文件</strong></p><p><img src="https://img-blog.csdnimg.cn/20190806131902473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>同时，bin文件夹下也会生成dll动态库文件</strong></p><p><img src="https://img-blog.csdnimg.cn/20190806132022931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>至此，所有需要的东西应该是一个都不少了</strong></p><h2 id="环境配置："><a href="#环境配置：" class="headerlink" title="环境配置："></a>环境配置：</h2><p><strong>这个就不用多说了，无论是官方github还是百度上都太多了，直接贴图，照着操作就可以了</strong></p><p><img src="https://img-blog.csdnimg.cn/20190806132809724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190806132818680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="测试DuiLib："><a href="#测试DuiLib：" class="headerlink" title="测试DuiLib："></a>测试DuiLib：</h2><p><strong>从网上找一段代码，测试是否可以生成界面，本质还是win32的，DuiLib只是进行封装操作</strong></p><p><strong>代码来源：</strong> <a href="https://www.cnblogs.com/Alberl/p/3343579.html" target="_blank" rel="noopener">https://www.cnblogs.com/Alberl/p/3343579.html</a></p><p><strong>如果遇到dll文件找不到的，把bin生成的dll文件拷贝到工程的Debug目录下</strong></p><p><strong>不是里层的Debug目录 ，是有着exe程序的那个</strong><br><img src="https://img-blog.csdnimg.cn/20190806133120875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>ok，到这里，借鉴着前人经验，总算是把环境弄好了，可以进行自己的小程序的界面开发了…</strong></p>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【针对性复习】选择排序和归并排序</title>
      <link href="/2019/08/03/Cpp-sort0/"/>
      <url>/2019/08/03/Cpp-sort0/</url>
      
        <content type="html"><![CDATA[<p>针对选择题中排序过程的复习</p><a id="more"></a><h2 id="快排递归框架："><a href="#快排递归框架：" class="headerlink" title="快排递归框架："></a>快排递归框架：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickDSort</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (right - left &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> div = partion(<span class="built_in">array</span>, left, right);</span><br><span class="line">QuickDSort(<span class="built_in">array</span>, left, div);</span><br><span class="line">QuickDSort(<span class="built_in">array</span>, div + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="划分区间"><a href="#划分区间" class="headerlink" title="划分区间:"></a>划分区间:</h2><p><strong>先想办法拿到一个基准值,进而才可以划分,但是直接把right-1的位置的元素作为基准值有可能极端情况下性能爆炸差,所以引入特殊的取值方法</strong></p><h3 id="三值取中法"><a href="#三值取中法" class="headerlink" title="三值取中法:"></a>三值取中法:</h3><p><strong>顾名思义,就是取三个值,选出一个中间值作为基准值,<font color=0099ff>能极大程度避免取的基准值太极端</font></strong></p><p><strong>a  b,如果c比a还小,那a就是中间值</strong></p><p><strong>a  b,如果c比b还大,那b就是中间值</strong></p><p><strong>如果都不是,说明c就是中间值</strong></p><p><strong>b a,情况同上处理</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMidIndex</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//a b</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[left] &lt; <span class="built_in">array</span>[right - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//c&lt;a ,a就是mid</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[mid] &lt; <span class="built_in">array</span>[left])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//c&gt;b,b就是mid</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">array</span>[mid]&gt;<span class="built_in">array</span>[right - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> right - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//b a,c&lt;b,b就是mid</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[mid] &lt; <span class="built_in">array</span>[right - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> right - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//b a,c&gt;a,a就是mid</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">array</span>[mid]&gt;<span class="built_in">array</span>[left])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取好基准值之后,就可以进行元素的比较了,把左侧元素调整为都比基准值小,右侧都比基准值大</p><h3 id="比较方法"><a href="#比较方法" class="headerlink" title="比较方法:"></a>比较方法:</h3><p><strong>定义两个指针,一个在前,一个在后,因为对数组操作,所以可以用数组下标代替</strong></p><p><font color=red><strong>begin从前找比基准值</font><font size=5>大</font>的元素</font>,没有就begin++,直到找到</strong></p><p><font color=red><strong>end同理,从后找比基准值</font><font size=5>小</font>的元素</font>,没有就end–,直到找到</strong></p><p><strong>找到的话,<font color=0099ff>begin和end的位置如果不一样,就交换元素</font></strong></p><p><strong>最终将基准值放好(因为一开始把基准值和right-1位置的元素互换了)</strong></p><p><font color=red><strong>要和right-1位置换,因为end是变化的</strong></font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partion</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = GetMidIndex(<span class="built_in">array</span>, left, right);</span><br><span class="line"></span><br><span class="line">swap(<span class="built_in">array</span>[mid], <span class="built_in">array</span>[right - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> begin = left;</span><br><span class="line"><span class="keyword">int</span> end = right - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> key = <span class="built_in">array</span>[right - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin&lt;end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从左往右找比基准值大的元素</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end&amp;&amp;<span class="built_in">array</span>[begin] &lt;= key)</span><br><span class="line">&#123;</span><br><span class="line">begin++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从右往左找比基准值小的元素</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end&amp;&amp;<span class="built_in">array</span>[end] &gt;= key)</span><br><span class="line">&#123;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到之后</span></span><br><span class="line"><span class="keyword">if</span> (begin != end)</span><br><span class="line">&#123;</span><br><span class="line">swap(<span class="built_in">array</span>[begin], <span class="built_in">array</span>[end]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//放置基准值</span></span><br><span class="line"><span class="keyword">if</span> (begin != right - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">swap(<span class="built_in">array</span>[begin], <span class="built_in">array</span>[right - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流程示意图"><a href="#流程示意图" class="headerlink" title="流程示意图:"></a>流程示意图:</h2><p><img src="https://img-blog.csdnimg.cn/20190803004841485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构---30】鸽巢原理---计数排序</title>
      <link href="/2019/06/01/DS-PigeonholePrinciple/"/>
      <url>/2019/06/01/DS-PigeonholePrinciple/</url>
      
        <content type="html"><![CDATA[<p>学习基础排序算法中的计数排序…</p><a id="more"></a><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析:"></a>思路分析:</h2><blockquote><p>&lt;1&gt;巧妙地借助数组下标<br>&lt;2&gt;如果没有给出范围的话,第一步先找出数据范围<br>&lt;3&gt;统计每个元素出现的次数<br>&lt;4&gt;按照统计的计数对元素进行回收</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CountSort</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//未告知范围的情况下,先找出数据范围</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> minPos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> maxPos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[minPos]&gt;<span class="built_in">array</span>[i])</span><br><span class="line">&#123;</span><br><span class="line">minPos = <span class="built_in">array</span>[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[maxPos] &lt; <span class="built_in">array</span>[i])</span><br><span class="line">&#123;</span><br><span class="line">maxPos = <span class="built_in">array</span>[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> range = maxPos - minPos + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* a = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*range);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*range);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">&#123;</span><br><span class="line">a[<span class="built_in">array</span>[i]-minPos]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; range; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (a[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">array</span>[count++]=j+minPos;</span><br><span class="line">a[j]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line">a = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAll</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,<span class="built_in">array</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">9</span> &#125;;</span><br><span class="line"></span><br><span class="line">CountSort(<span class="built_in">array</span>, <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]));</span><br><span class="line">PrintAll(<span class="built_in">array</span>, <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码运行测试图"><a href="#代码运行测试图" class="headerlink" title="代码运行测试图:"></a>代码运行测试图:</h2><p><img src="https://img-blog.csdnimg.cn/20190601180749356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> DS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构---29】简单排序方法（下）</title>
      <link href="/2019/05/29/DS-SimpleSort2/"/>
      <url>/2019/05/29/DS-SimpleSort2/</url>
      
        <content type="html"><![CDATA[<p>学习基础排序算法…</p><ul><li><p><a href="#_1">对快速排序的优化:</a></p><ul><li><a href="#_12">方法一代码实现:</a></li><li><a href="#_56">方法二代码实现:</a></li></ul></li><li><p><a href="#_71">快速排序的循环写法:</a></p><ul><li><a href="#_78">代码实现:</a></li></ul></li><li><p><a href="#_114">归并排序:</a></p></li><li><p><a href="#_123">归并的代码实现：</a></p><ul><li><a href="#_168">递归框架:</a></li><li><a href="#_205">循环写法:</a></li></ul></li><li><p><a href="#_251">代码测试运行图:</a></p><a id="more"></a></li></ul><h2 id="对快速排序的优化"><a href="#对快速排序的优化" class="headerlink" title="对快速排序的优化:"></a>对快速排序的优化:</h2><p>快排需要设置基准值,基准值的选取会出现两种极端情况,导致排序算法的性能变差</p><blockquote><p>①针对基准值的选取做出优化<br>②针对递归的深度做出优化</p></blockquote><p><strong>方法一:三值取中法</strong></p><blockquote><p>&lt;1&gt;顾名思义就是取出三个基准值,选择值为中间的那一个<br>&lt;2&gt;三个基准值分为是最左边,最右边以及中间,中间位置为left+((right-left)&gt;&gt;1);<br>&lt;3&gt;之前的代码基于基准值key的设定为right-1,为了不做较大改动,将mid位置的元素和right-1位置元素互换</p></blockquote><h3 id="方法一代码实现"><a href="#方法一代码实现" class="headerlink" title="方法一代码实现:"></a>方法一代码实现:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMiddleIndex</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">array</span>[left] &lt; <span class="built_in">array</span>[right - <span class="number">1</span>])</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">array</span>[mid] &lt; <span class="built_in">array</span>[left])</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">return</span> left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">array</span>[mid]&gt;<span class="built_in">array</span>[right - <span class="number">1</span>])</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">return</span> right - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">return</span> mid;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">array</span>[mid] &gt; <span class="built_in">array</span>[left])</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">return</span> left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">array</span>[mid] &lt; <span class="built_in">array</span>[right - <span class="number">1</span>])</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">return</span> right - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">return</span> mid;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二:调整递归深度</strong></p><blockquote><p>&lt;1&gt;不需要递归到只剩下一个元素才返回<br>&lt;2&gt;设置为元素个数小于16的时候,使用适合数据小,接近有序的直接插入排序</p></blockquote><h3 id="方法二代码实现"><a href="#方法二代码实现" class="headerlink" title="方法二代码实现:"></a>方法二代码实现:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (right - left &gt; <span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line"> InsertSort(<span class="built_in">array</span>,right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> div = partion3(<span class="built_in">array</span>, left, right);</span><br><span class="line">QuickSort(<span class="built_in">array</span>, left, div);</span><br><span class="line">QuickSort(<span class="built_in">array</span>, div + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序的循环写法"><a href="#快速排序的循环写法" class="headerlink" title="快速排序的循环写法:"></a>快速排序的循环写法:</h2><blockquote><p>&lt;1&gt;递归的函数调用和数据结构的栈很类似,所以使用栈来辅助完成递归转变为循环<br>&lt;2&gt;首先将右边界压入栈中,在将左边界压入,这样左就在上,右就在下<br>&lt;3&gt;获取栈顶元素的顺序就是先left在right,如果栈中元素不唯一,就继续分组<br>&lt;4&gt;将新的区间压入栈中,顺序和&lt;2&gt;一致</p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QucikSortNor</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> right = size;</span><br><span class="line"> </span><br><span class="line"> Stack s;</span><br><span class="line"> StackInit(&amp;s);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//栈的特性是先入后出,所以反过来压入元素,出栈的顺序就是对的</span></span><br><span class="line"> StackPush(&amp;s, right);</span><br><span class="line"> StackPush(&amp;s, left);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//栈若不空,就对左右部分继续分别分组</span></span><br><span class="line"> <span class="keyword">while</span> (StackEmpty(&amp;s) != <span class="number">-1</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  left = StackTop(&amp;s);</span><br><span class="line">  StackPop(&amp;s);</span><br><span class="line">  right = StackTop(&amp;s);</span><br><span class="line">  StackPop(&amp;s);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (right - left &gt; <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">int</span> div = partion3(<span class="built_in">array</span>, left, right);</span><br><span class="line">   </span><br><span class="line">   StackPush(&amp;s, right);</span><br><span class="line">   StackPush(&amp;s, div + <span class="number">1</span>);</span><br><span class="line">   StackPush(&amp;s, div);</span><br><span class="line">   StackPush(&amp;s, left);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序:"></a>归并排序:</h2><p>递归写法先分组,在排序,有序之后再归并,然后写入临时空间,最后内存拷贝回去</p><blockquote><p>&lt;1&gt;类似于二叉树的后序遍历<br>&lt;2&gt;先对左侧进行递归排序,在对右边进行递归排序,然后归并<br>&lt;3&gt;memcpy拷贝的时候注意参数array和tmp都要加上left,否则只能拷到左边<br>&lt;4&gt;归并的操作就是左边分组和右边分组每个元素分别比大小,小的先放入临时空间<br>&lt;5&gt;长度不一的话单独处理,把剩下的元素直接插到后面</p></blockquote><h2 id="归并的代码实现："><a href="#归并的代码实现：" class="headerlink" title="归并的代码实现："></a>归并的代码实现：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeData</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right,<span class="keyword">int</span>* tmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> begin1 = left;</span><br><span class="line"><span class="keyword">int</span> end1 = mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> begin2 = mid;</span><br><span class="line"><span class="keyword">int</span> end2 = right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = left;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin1 &lt; end1 &amp;&amp; begin2 &lt; end2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[begin1] &lt; <span class="built_in">array</span>[begin2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = <span class="built_in">array</span>[begin1];</span><br><span class="line">begin1++;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = <span class="built_in">array</span>[begin2];</span><br><span class="line">begin2++;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//长短不一样的情况,单独处理</span></span><br><span class="line"><span class="keyword">while</span> (begin1 &lt; end1)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = <span class="built_in">array</span>[begin1];</span><br><span class="line">index++;</span><br><span class="line">begin1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (begin2 &lt; end2)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = <span class="built_in">array</span>[begin2];</span><br><span class="line">index++;</span><br><span class="line">begin2++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归框架"><a href="#递归框架" class="headerlink" title="递归框架:"></a>递归框架:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _MergeSort(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> left, <span class="keyword">int</span> right,<span class="keyword">int</span>* tmp)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">if</span> (right - left &gt; <span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  _MergeSort(<span class="built_in">array</span>, left, mid,tmp);</span><br><span class="line">  _MergeSort(<span class="built_in">array</span>, mid, right,tmp);</span><br><span class="line">  </span><br><span class="line">  MergeData(<span class="built_in">array</span>, left, mid, right,tmp);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">memcpy</span>(<span class="built_in">array</span>+left, tmp+left, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(right - left));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为了方便调用,所以对其封装:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span>* tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*size);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  assert(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> _MergeSort(<span class="built_in">array</span>, <span class="number">0</span>, size, tmp);</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">free</span>(tmp);</span><br><span class="line"> tmp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环写法"><a href="#循环写法" class="headerlink" title="循环写法:"></a>循环写法:</h3><blockquote><p>&lt;1&gt;循环的跳出条件是gap&lt;size,就是一组可以表示所有数据<br>&lt;2&gt;right和mid的取值可能越界,需要单独处理<br>&lt;3&gt;不需要分组,因为开始默认为单独存在,只需要把有序的元素整合为一组</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSortNor</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span>* tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*size);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  assert(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> gap = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">while</span> (gap &lt; size)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i += <span class="number">2</span> * gap)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">int</span> left = i;</span><br><span class="line">   <span class="keyword">int</span> mid = left + gap;</span><br><span class="line">   <span class="keyword">int</span> right = mid + gap;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (right &gt;= size)</span><br><span class="line">   &#123;</span><br><span class="line">    right = size;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (mid &gt;= size)</span><br><span class="line">   &#123;</span><br><span class="line">    mid = size;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   MergeData(<span class="built_in">array</span>, left, mid, right, tmp);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">memcpy</span>(<span class="built_in">array</span>, tmp, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*size);</span><br><span class="line">  gap *= <span class="number">2</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">free</span>(tmp);</span><br><span class="line"> tmp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码测试运行图"><a href="#代码测试运行图" class="headerlink" title="代码测试运行图:"></a>代码测试运行图:</h2><p><img src="https://img-blog.csdnimg.cn/20190529180719426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2019052918073712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190529180753458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190529180813904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> DS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构---25】链式结构二叉树的前、中、后序遍历</title>
      <link href="/2019/05/23/DS-OJBinaryTree/"/>
      <url>/2019/05/23/DS-OJBinaryTree/</url>
      
        <content type="html"><![CDATA[<p>数据结构相关练习题…</p><a id="more"></a><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历:"></a>前序遍历:</h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p><strong>给定一个二叉树，返回它的前序遍历</strong></p><p><strong>示例:</strong></p><p><strong>输入: [1,null,2,3]</strong></p><p>1<br>\<br>2<br>/<br>3</p><p><strong>输出: [1,2,3]</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     struct TreeNode *right;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析:"></a>思路分析:</h2><blockquote><p>1.首先使用递归的方法求出节点的个数,跳出条件是当root==NULL的时候,0个<br>2.对形参的指针修改相当于修改外部实参<br>3.把遍历好的元素存放到数组里,最后返回数组</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> <span class="title">Node</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里的size必须传指针,不然size作为临时变量,作用域和生命周期只有函数段</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(Node* Root,<span class="keyword">int</span> * Res,<span class="keyword">int</span> * size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Root!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Res[*size]=Root-&gt;val;</span><br><span class="line">        (*size)++;</span><br><span class="line">        PreOrder(Root-&gt;left,Res,size);</span><br><span class="line">        PreOrder(Root-&gt;right,Res,size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getsize</span><span class="params">(Node* Root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Root==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Getsize(Root-&gt;left)+Getsize(Root-&gt;right)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对形参的指针修改,相当于修改外部实参</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">preorderTraversal</span><span class="params">(struct TreeNode* root, <span class="keyword">int</span>* returnSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *returnSize=Getsize(root);</span><br><span class="line">    <span class="keyword">int</span>* Res=(<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)* (*returnSize));</span><br><span class="line">    <span class="keyword">if</span>(Res==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        assert(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> size=<span class="number">0</span>;</span><br><span class="line">    PreOrder(root,Res,&amp;size);</span><br><span class="line">    <span class="keyword">return</span> Res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对于中序和后序的处理:只需要修改遍历语句的顺序即可</strong></p><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历:"></a>中序遍历:</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><strong>给定一个二叉树，返回它的中序遍历</strong></p><p><strong>示例:</strong></p><p><strong>输入: [1,null,2,3]</strong><br>1<br>\<br>2<br>/<br>3</p><p><strong>输出: [1,3,2]</strong></p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现:"></a>代码实现:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(Node* Root,<span class="keyword">int</span> * Res,<span class="keyword">int</span> * size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Root!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        inOrder(Root-&gt;left,Res,size);</span><br><span class="line">        Res[*size]=Root-&gt;val;</span><br><span class="line">        (*size)++;</span><br><span class="line">        inOrder(Root-&gt;right,Res,size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历:"></a>后序遍历:</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><strong>给定一个二叉树，返回它的 后序遍历</strong></p><p><strong>示例:</strong></p><p><strong>输入: [1,null,2,3]</strong><br>1<br>\<br>2<br>/<br>3</p><p><strong>输出: [3,2,1]</strong></p><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现:"></a>代码实现:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(Node* Root,<span class="keyword">int</span> * Res,<span class="keyword">int</span> * size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Root!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        PostOrder(Root-&gt;left,Res,size);</span><br><span class="line">        PostOrder(Root-&gt;right,Res,size);</span><br><span class="line">        Res[*size]=Root-&gt;val;</span><br><span class="line">        (*size)++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构---26】树以及二叉树的基本概念</title>
      <link href="/2019/05/23/DS-BinaryTree/"/>
      <url>/2019/05/23/DS-BinaryTree/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#_2">树的概念：</a></li><li><a href="#_5">与树相关的基本概念:</a></li><li><a href="#_18">树的表示方式：</a></li><li><a href="#_22">二叉树：</a></li><li><a href="#_32">二叉树的五条特性:</a></li><li><a href="#_54">二叉树的存储：</a></li><li><a href="#_66">堆序堆的实现:</a></li><li><a href="#_70">调整堆序:</a></li><li><a href="#_91">堆的删除操作:</a></li><li><a href="#_103">堆的插入操作:</a></li><li><a href="#_115">扩容:</a></li><li><a href="#_119">用堆的思想进行排序</a></li><li><a href="#TOP_K_123">TOP K问题(海量数据)</a></li><li><a href="#_135">二叉树的链式存储方式</a></li><li><a href="#_147">求二叉树的节点个数:</a></li><li><a href="#_162">二叉树的创建方式:</a></li><li><a href="#_191">二叉树的销毁方式:</a></li><li><a href="#_199">二叉树的拷贝:</a></li><li><a href="#_203">查看二叉树中的叶子节点:</a></li></ul><a id="more"></a><h2 id="树的概念："><a href="#树的概念：" class="headerlink" title="树的概念："></a>树的概念：</h2><p><strong>一种非线性的数据结构,它是由n个(n&gt;=0)有限节点组成的一个具有层次关系的集合</strong></p><h2 id="与树相关的基本概念"><a href="#与树相关的基本概念" class="headerlink" title="与树相关的基本概念:"></a>与树相关的基本概念:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">深度:树中节点的最大层次</span><br><span class="line"></span><br><span class="line">双亲:若一个节点含有子节点,则这个节点是这个子节点的双亲节点</span><br><span class="line"></span><br><span class="line">子节点:一个节点含有的子树的根节点被称为这个节点的子节点</span><br><span class="line"></span><br><span class="line">兄弟:具有相同双亲节点的被称为兄弟节点</span><br><span class="line"></span><br><span class="line">叶节点:度为0的节点被称为叶节点</span><br></pre></td></tr></table></figure><h2 id="树的表示方式："><a href="#树的表示方式：" class="headerlink" title="树的表示方式："></a>树的表示方式：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">孩子表示法，双亲表示法，孩子双亲表示法，孩子兄弟表示法</span><br></pre></td></tr></table></figure><h2 id="二叉树："><a href="#二叉树：" class="headerlink" title="二叉树："></a>二叉树：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">空树，根+根的左子树+根的右子树</span><br></pre></td></tr></table></figure><p><strong>特殊的二叉树：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">满二叉树:每一层的节点数都达到最大值,这个二叉树就是满二叉树</span><br><span class="line"></span><br><span class="line">完全二叉树:从上之下从左至右一次填满的二叉树,不可能存在只有右孩子没有左孩子</span><br></pre></td></tr></table></figure><h2 id="二叉树的五条特性"><a href="#二叉树的五条特性" class="headerlink" title="二叉树的五条特性:"></a>二叉树的五条特性:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.若规定根节点的层次为1,则一颗非空二叉树的第i层最多有2^(i-1)个节点</span><br><span class="line"></span><br><span class="line">2.若规定只有根节点的二叉树深度为1,则深度为k的二叉树最大节点数是2^k-1</span><br><span class="line"></span><br><span class="line">3.对任意一颗二叉树,如果其叶节点个数为n0,度为2的非叶节点个数为n2,则有n0&#x3D;n2+1</span><br><span class="line"></span><br><span class="line">4.具有n个节点的完全二叉树的深度k为log2(n+1)向上取整</span><br><span class="line"></span><br><span class="line">5.对于有n个节点的完全二叉树,如果按照从上至下从左至右的顺序对所有节点从0进行编号</span><br><span class="line"></span><br><span class="line">则对于序号为i的节点有:</span><br><span class="line"></span><br><span class="line">&lt;1&gt;.若i&gt;0,双亲序号:(i-1)&#x2F;2i&#x3D;0,i为根节点编号,无双亲节点</span><br><span class="line"></span><br><span class="line">&lt;2&gt;.若2i+1&lt;n,左孩子序号:2i+1,否则无左孩子</span><br><span class="line"></span><br><span class="line">&lt;3&gt;.若2i+2&lt;n,右孩子序号:2i+2,否则无右孩子</span><br></pre></td></tr></table></figure><h2 id="二叉树的存储："><a href="#二叉树的存储：" class="headerlink" title="二叉树的存储："></a>二叉树的存储：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">顺序结构：完全二叉树（基本不会增加删除）</span><br><span class="line"></span><br><span class="line">链式结构：通过指针来表示节点与其孩子及双亲之间的关系,常用孩子表示法，孩子双亲表示法</span><br></pre></td></tr></table></figure><p><strong>二叉树顺序存储： 堆（是一棵完全二叉树），堆中的元素存储到一维数组中，对于任意节点如果该节点中小于（大于）其左右孩子，就把这种结构称为小堆（大堆）</strong></p><blockquote><p>堆的特性： 堆顶元素一定是堆中所有元素最大的（最小的）</p></blockquote><h2 id="堆序堆的实现"><a href="#堆序堆的实现" class="headerlink" title="堆序堆的实现:"></a>堆序堆的实现:</h2><p><strong>结构类似于顺序表</strong></p><h2 id="调整堆序"><a href="#调整堆序" class="headerlink" title="调整堆序:"></a>调整堆序:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int child&#x3D;parent*2+1；默认child标记parent的左孩子</span><br><span class="line"></span><br><span class="line">因为完全二叉树某个节点只有一个孩子，该孩子一定是其双亲的左孩子</span><br><span class="line"></span><br><span class="line">向下调整:(调整的是以parent为根的子树)</span><br><span class="line"></span><br><span class="line">找出较小的孩子---左右孩子比较（左右孩子必须都存在，child+1&lt;size）</span><br><span class="line"></span><br><span class="line">左孩子比右孩子大的话，child+&#x3D;1</span><br><span class="line"></span><br><span class="line">双亲比较小的孩子大的话，交换双亲和孩子的顺序</span><br><span class="line"></span><br><span class="line">更新parent&#x3D;child；chil&#x3D;parent*2+1；</span><br><span class="line"></span><br><span class="line">2i+1已经大于size（数组节点个数），说明孩子不存在</span><br></pre></td></tr></table></figure><p><strong>创建堆的时间复杂度Nlog2(N)</strong></p><h2 id="堆的删除操作"><a href="#堆的删除操作" class="headerlink" title="堆的删除操作:"></a>堆的删除操作:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">堆里没有元素不删除</span><br><span class="line"></span><br><span class="line">有的话就删除堆顶元素-----</span><br><span class="line"></span><br><span class="line">堆顶元素和末尾元素交换</span><br><span class="line"></span><br><span class="line">size的值要更新-----对堆顶元素进行向下调整</span><br><span class="line"></span><br><span class="line">AdjustDown(heapdatatype*array,heapdatatype*size,0)</span><br></pre></td></tr></table></figure><h2 id="堆的插入操作"><a href="#堆的插入操作" class="headerlink" title="堆的插入操作:"></a>堆的插入操作:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">考虑空间是否放得下-----插入之后需要调整堆序-----向上调整,传的参数是孩子</span><br><span class="line"></span><br><span class="line">孩子小于双亲,需要交换-----child&#x3D;parent;parent&#x3D;(child-1)&#x2F;2;</span><br><span class="line"></span><br><span class="line">循环终止条件child!&#x3D;0;</span><br><span class="line"></span><br><span class="line">AdjusUp(hp-&gt;array,hp-&gt;size,hp-&gt;size-1);</span><br></pre></td></tr></table></figure><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容:"></a>扩容:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">申请新空间-----拷贝元素</span><br></pre></td></tr></table></figure><h2 id="用堆的思想进行排序"><a href="#用堆的思想进行排序" class="headerlink" title="用堆的思想进行排序"></a>用堆的思想进行排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">降序是小堆,升序是大堆-----HeapSort(array,sizeof(array)&#x2F;sizeof(array[0]))</span><br></pre></td></tr></table></figure><h2 id="TOP-K问题-海量数据"><a href="#TOP-K问题-海量数据" class="headerlink" title="TOP K问题(海量数据)"></a>TOP K问题(海量数据)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">冒泡和堆排的话必须一次拿到所有的数据-----100亿数据需要40G内存空间</span><br><span class="line"></span><br><span class="line">直接遍历K次,需要多次IO,性能太差-----堆-----取前K个数据,建小堆</span><br><span class="line"></span><br><span class="line">从剩余的N-K个数据一次与堆顶的元素进行比较,然后选择是否替换</span><br><span class="line"></span><br><span class="line">比堆顶元素大的替换掉,最后堆里的K个元素都是最大的</span><br></pre></td></tr></table></figure><p><code>堆的应用需要做到正背如流!!!!!!!!</code></p><h2 id="二叉树的链式存储方式"><a href="#二叉树的链式存储方式" class="headerlink" title="二叉树的链式存储方式"></a>二叉树的链式存储方式</h2><blockquote><p>二叉树的遍历: 按照某种特定的规则,对二叉树中的每一个节点进行相应的操作,并且每个节点只能操作一次</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">前序遍历:根---&gt;根的左子树---&gt;根的右子树</span><br><span class="line"></span><br><span class="line">中序遍历:根的左子树---&gt;根---&gt;根的右子树</span><br><span class="line"></span><br><span class="line">后序遍历:根的左子树---&gt;根的右子树---&gt;根</span><br></pre></td></tr></table></figure><blockquote><p>递归遍历,先遍历根,然后继续调用,传的参数是root根节点的左子树,然后继续调用,传root的右子树</p></blockquote><h2 id="求二叉树的节点个数"><a href="#求二叉树的节点个数" class="headerlink" title="求二叉树的节点个数:"></a>求二叉树的节点个数:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(根据二叉树的概念)空树---0个非空就递归求解</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int Getsize(Node*Root)</span><br><span class="line">&#123;</span><br><span class="line">if(Root&#x3D;&#x3D;NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">return Getsize(Root-&gt;left)+Getsize(Root-&gt;right)+1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的创建方式"><a href="#二叉树的创建方式" class="headerlink" title="二叉树的创建方式:"></a>二叉树的创建方式:</h2><p><code>索引必须给地址,因为要把索引的值带出函数外!!!!!!</code></p><blockquote><p>创建链式二叉树—&gt;递归跳出条件(*index&lt;size)—&gt;先创建根节点,在创建根的左子树,在创建根的右子树</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">要把创建的二叉树补全ABDCEF---&gt;ABD###CE##F##</span><br><span class="line"></span><br><span class="line">#是我们给的空的节点的标记</span><br><span class="line"></span><br><span class="line">修改跳出条件为(*index&lt;size&amp;&amp;array[*index]!&#x3D;&#39;#&#39;)</span><br><span class="line"></span><br><span class="line">&#96;跳出条件有先后顺序,不可以写错!!!!!&#96;</span><br><span class="line"></span><br><span class="line">索引遇到#之后还需要往后面走</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建根节点</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;(*index++),创建根的左子树</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;(*index++),创建根的右子树</span><br><span class="line"></span><br><span class="line">递归之后其实创建的都是根节点,所有根节点创建写(*index++);</span><br></pre></td></tr></table></figure><blockquote><p>把创建的函数封装起来,方便用户调用,参数加一个无效参数,避免你设置为#,他输入$</p></blockquote><blockquote><p>Q:根据两个遍历的结果,要求还原出来的二叉树<br>A:TO DO</p></blockquote><h2 id="二叉树的销毁方式"><a href="#二叉树的销毁方式" class="headerlink" title="二叉树的销毁方式:"></a>二叉树的销毁方式:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">最后才可以销毁根节点,所以采用后序遍历规则</span><br><span class="line"></span><br><span class="line">销毁完所有的节点之后要把Root节点置空函数体内部修改形参的值,要传形参的地址</span><br><span class="line"></span><br><span class="line">所以销毁函数中传Root的地址!!!!!</span><br></pre></td></tr></table></figure><h2 id="二叉树的拷贝"><a href="#二叉树的拷贝" class="headerlink" title="二叉树的拷贝:"></a>二叉树的拷贝:</h2><blockquote><p>根据二叉树的概念,和创建的方法一样</p></blockquote><h2 id="查看二叉树中的叶子节点"><a href="#查看二叉树中的叶子节点" class="headerlink" title="查看二叉树中的叶子节点:"></a>查看二叉树中的叶子节点:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">左右子树没有孩子的节点称为叶子节点</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if(Root&#x3D;&#x3D;NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">if(Root-&gt;left&#x3D;&#x3D;NULL&amp;&amp;Root-&gt;right&#x3D;&#x3D;NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">return GetLeatCount(Root-&gt;left)+GetLeatCount(Root-&gt;right);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构---21】用栈实现队列的操作</title>
      <link href="/2019/05/22/DS-StackToList/"/>
      <url>/2019/05/22/DS-StackToList/</url>
      
        <content type="html"><![CDATA[<p>数据结构OJ练习题…</p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><p><strong>使用栈实现队列的下列操作：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push(x) -- 将一个元素放入队列的尾部</span><br><span class="line">pop()-- 从队列首部移除元素</span><br><span class="line">peek()-- 返回队列首部的元素</span><br><span class="line">empty() -- 返回队列是否为空</span><br></pre></td></tr></table></figure><p><strong>示例:</strong><br><strong>MyQueue queue = new MyQueue();<br>queue.push(1);<br>queue.push(2);<br>queue.peek(); // 返回 1<br>queue.pop(); // 返回 1<br>queue.empty(); // 返回 false</strong></p><p><strong>说明:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">你只能使用标准的栈操作 -- 也就是只有 push to top, peek&#x2F;pop from top, size, 和 is empty 操作是合法的</span><br><span class="line">你所使用的语言也许不支持栈</span><br><span class="line">你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可</span><br><span class="line">假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）</span><br></pre></td></tr></table></figure><p><strong>先把需要用到的栈构建好:</strong><a href="https://blog.csdn.net/Austin_Yan/article/details/90210446" target="_blank" rel="noopener">C语言实现一个动态栈</a></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析:"></a>思路分析:</h2><blockquote><p>1.使用两个栈来完成对队列的模拟<br>2.一个栈用来辅助中转元素,一个栈主要用来存放数据<br>3.入队操作全部对于s1进行,出队操作首先将s1中的元素压入s2,然后s2的栈顶就是队头,将值保存后删除,然后再把s2的元素全部转入s1,恢复原本的结构<br>4.获取队头元素和出队操作一致,只是不删除s2的栈顶元素即可</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Stack s1;</span><br><span class="line">    Stack s2;</span><br><span class="line">&#125; MyQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line"><span class="function">MyQueue* <span class="title">myQueueCreate</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MyQueue* SQ=(MyQueue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MyQueue));</span><br><span class="line">    <span class="keyword">if</span>(SQ==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        assert(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    StackInit(&amp;SQ-&gt;s1);</span><br><span class="line">    StackInit(&amp;SQ-&gt;s2);</span><br><span class="line">    <span class="keyword">return</span> SQ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myQueuePush</span><span class="params">(MyQueue* obj, <span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackPush(&amp;obj-&gt;s1,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myQueuePop</span><span class="params">(MyQueue* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//队列的Pop是头删,删除栈底元素</span></span><br><span class="line">    <span class="keyword">while</span>(obj-&gt;s1.top&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        StackPush(&amp;obj-&gt;s2,StackTop(&amp;obj-&gt;s1));</span><br><span class="line">        StackPop(&amp;obj-&gt;s1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a=StackTop(&amp;obj-&gt;s2);</span><br><span class="line">    StackPop(&amp;obj-&gt;s2);</span><br><span class="line">    <span class="comment">//然后恢复本来的结构</span></span><br><span class="line">    <span class="keyword">while</span>(obj-&gt;s2.top&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        StackPush(&amp;obj-&gt;s1,StackTop(&amp;obj-&gt;s2));</span><br><span class="line">        StackPop(&amp;obj-&gt;s2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Get the front element. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myQueuePeek</span><span class="params">(MyQueue* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(obj-&gt;s1.top&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        StackPush(&amp;obj-&gt;s2,StackTop(&amp;obj-&gt;s1));</span><br><span class="line">        StackPop(&amp;obj-&gt;s1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a=StackTop(&amp;obj-&gt;s2);</span><br><span class="line">    <span class="comment">//然后恢复本来的结构</span></span><br><span class="line">    <span class="keyword">while</span>(obj-&gt;s2.top&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        StackPush(&amp;obj-&gt;s1,StackTop(&amp;obj-&gt;s2));</span><br><span class="line">        StackPop(&amp;obj-&gt;s2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myQueueEmpty</span><span class="params">(MyQueue* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(StackEmpty(&amp;obj-&gt;s2) == <span class="number">-1</span> &amp;&amp; StackEmpty(&amp;obj-&gt;s1) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myQueueFree</span><span class="params">(MyQueue* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(obj);</span><br><span class="line">    obj=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue struct will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue* obj = myQueueCreate();</span></span><br><span class="line"><span class="comment"> * myQueuePush(obj, x);</span></span><br><span class="line"><span class="comment"> * int param_2 = myQueuePop(obj);</span></span><br><span class="line"><span class="comment"> * int param_3 = myQueuePeek(obj);</span></span><br><span class="line"><span class="comment"> * bool param_4 = myQueueEmpty(obj);</span></span><br><span class="line"><span class="comment"> * myQueueFree(obj);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构---22】循环队列的实现</title>
      <link href="/2019/05/22/DS-CircleList/"/>
      <url>/2019/05/22/DS-CircleList/</url>
      
        <content type="html"><![CDATA[<p>学习循环队列的实现…</p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><p><strong>设计你的循环队列实现</strong></p><p><strong>循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环.它也被称为“环形缓冲器”</strong></p><p><strong>循环队列的一个好处是我们可以利用这个队列之前用过的空间.在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间.但是使用循环队列，我们能使用这些空间去存储新的值.</strong></p><p><strong>你的实现应该支持如下操作：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyCircularQueue(k): 构造器，设置队列长度为 k 。</span><br><span class="line">Front: 从队首获取元素。如果队列为空，返回 -1 。</span><br><span class="line">Rear: 获取队尾元素。如果队列为空，返回 -1 。</span><br><span class="line">enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。</span><br><span class="line">deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。</span><br><span class="line">isEmpty(): 检查循环队列是否为空。</span><br><span class="line">isFull(): 检查循环队列是否已满。</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><p><strong>MyCircularQueue circularQueue = new MycircularQueue(3); // 设置长度为 3</strong></p><p><strong>circularQueue.enQueue(1); // 返回 true</strong></p><p><strong>circularQueue.enQueue(2); // 返回 true</strong></p><p><strong>circularQueue.enQueue(3); // 返回 true</strong></p><p><strong>circularQueue.enQueue(4); // 返回 false，队列已满</strong></p><p><strong>circularQueue.Rear(); // 返回 3</strong></p><p><strong>circularQueue.isFull(); // 返回 true</strong></p><p><strong>circularQueue.deQueue(); // 返回 true</strong></p><p><strong>circularQueue.enQueue(4); // 返回 true</strong></p><p><strong>circularQueue.Rear(); // 返回 4</strong></p><p><strong>提示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">所有的值都在 0 至 1000 的范围内；</span><br><span class="line">操作数将在 1 至 1000 的范围内；</span><br><span class="line">请不要使用内置的队列库。</span><br></pre></td></tr></table></figure><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析:"></a>思路分析:</h2><blockquote><p>1.front不动,后面依次覆盖,时间复杂度O(N),效率低<br>2.front向后移动,时间复杂度O(1),但是存在假溢出<br>3.区别队空和队满<br>&lt;1&gt;少用一个存储空间,判定条件为rear+1=front,(r+)%capacity==front<br>&lt;2&gt;使用标记,flag ==0 &amp;&amp; rear ==front空,flag ==1 &amp;&amp; rear ==front满</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Qdatatype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Qdatatype* <span class="built_in">array</span>;</span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> tail;</span><br><span class="line">&#125; MyCircularQueue;</span><br></pre></td></tr></table></figure><p><strong>初始化循环队列:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Initialize your data structure here. Set the size of the queue to be k. */</span></span><br><span class="line"><span class="function">MyCircularQueue* <span class="title">myCircularQueueCreate</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    MyCircularQueue* Q=(MyCircularQueue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MyCircularQueue));</span><br><span class="line">    Q-&gt;<span class="built_in">array</span>=(Qdatatype*)<span class="built_in">malloc</span>(k*<span class="keyword">sizeof</span>(Qdatatype));</span><br><span class="line">    Q-&gt;capacity=k;</span><br><span class="line">    Q-&gt;head=<span class="number">0</span>;</span><br><span class="line">    Q-&gt;len=<span class="number">0</span>;</span><br><span class="line">    Q-&gt;tail=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插入一个元素,满队列返回false,能插入返回true:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Insert an element into the circular queue. Return true if the operation is successful. */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myCircularQueueEnQueue</span><span class="params">(MyCircularQueue* obj, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj-&gt;capacity == obj-&gt;len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    obj-&gt;tail=(obj-&gt;tail+<span class="number">1</span>)%obj-&gt;capacity;</span><br><span class="line">    obj-&gt;<span class="built_in">array</span>[obj-&gt;tail]=value;</span><br><span class="line">    ++obj-&gt;len;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除一个元素,空队列返回false,能删除返回true:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Delete an element from the circular queue. Return true if the operation is successful. */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myCircularQueueDeQueue</span><span class="params">(MyCircularQueue* obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj-&gt;len==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    obj-&gt;head=(obj-&gt;head+<span class="number">1</span>)%obj-&gt;capacity;</span><br><span class="line">    --(obj-&gt;len);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取队头元素:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Get the front item from the queue. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myCircularQueueFront</span><span class="params">(MyCircularQueue* obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj-&gt;len==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj-&gt;<span class="built_in">array</span>[obj-&gt;head];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取队尾元素:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Get the last item from the queue. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myCircularQueueRear</span><span class="params">(MyCircularQueue* obj)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(obj-&gt;len==<span class="number">0</span>)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> obj-&gt;<span class="built_in">array</span>[obj-&gt;tail];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>检查是否是空队列:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Checks whether the circular queue is empty or not. */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myCircularQueueIsEmpty</span><span class="params">(MyCircularQueue* obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj-&gt;len==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>检查是否是满队列:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Checks whether the circular queue is full or not. */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myCircularQueueIsFull</span><span class="params">(MyCircularQueue* obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj-&gt;capacity==obj-&gt;len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>销毁循环队列:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myCircularQueueFree</span><span class="params">(MyCircularQueue* obj)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(obj-&gt;<span class="built_in">array</span>);</span><br><span class="line">    <span class="built_in">free</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyCircularQueue struct will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyCircularQueue* obj = myCircularQueueCreate(k);</span></span><br><span class="line"><span class="comment"> * bool param_1 = myCircularQueueEnQueue(obj, value);</span></span><br><span class="line"><span class="comment"> * bool param_2 = myCircularQueueDeQueue(obj);</span></span><br><span class="line"><span class="comment"> * int param_3 = myCircularQueueFront(obj);</span></span><br><span class="line"><span class="comment"> * int param_4 = myCircularQueueRear(obj);</span></span><br><span class="line"><span class="comment"> * bool param_5 = myCircularQueueIsEmpty(obj);</span></span><br><span class="line"><span class="comment"> * bool param_6 = myCircularQueueIsFull(obj);</span></span><br><span class="line"><span class="comment"> * myCircularQueueFree(obj);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构---18】基于栈的括号匹配检测</title>
      <link href="/2019/05/18/DS-StackBrackets/"/>
      <url>/2019/05/18/DS-StackBrackets/</url>
      
        <content type="html"><![CDATA[<p>数据结构OJ练习题…</p><a id="more"></a><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p><strong>给定一个只包括 ‘(’，’)’，’{’，’}’，’[’，’]’ 的字符串，判断字符串是否有效</strong></p><p><strong>有效字符串需满足：</strong></p><p><strong>左括号必须用相同类型的右括号闭合<br>左括号必须以正确的顺序闭合</strong></p><p><code>注意空字符串可被认为是有效字符串</code></p><p><strong>示例 1:</strong></p><p><strong>输入: “()”<br>输出: true</strong></p><p><strong>示例 2:</strong></p><p><strong>输入: “()[]{}”<br>输出: true</strong></p><p><strong>示例 3:</strong></p><p><strong>输入: “(]”<br>输出: false</strong></p><p><strong>示例 4:</strong></p><p><strong>输入: “([)]”<br>输出: false</strong></p><p><strong>示例 5:</strong></p><p><strong>输入: “{[]}”<br>输出: true</strong></p><p><strong>先把需要用到的栈构建好:</strong><a href="https://blog.csdn.net/Austin_Yan/article/details/90210446" target="_blank" rel="noopener">c语言实现动态栈</a></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析:"></a>思路分析:</h2><blockquote><p>1.求出字符串的长度对其遍历,遍历到左括号时,往栈里压入对应的右括号<br>2.遍历到右括号时获取栈顶元素对比,一致就继续,不一致就返回false<br>3.如果遍历到空字符,continue<br>4.最终遍历完毕,判断匹配的依据是栈为空栈<br><code>注意:栈对应的Push操作中对top已经操作过了,不需要再对top操作</code></p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="keyword">char</span> * s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack S;</span><br><span class="line">    StackInit(&amp;S);</span><br><span class="line">    <span class="keyword">int</span> n=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'('</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            StackPush(&amp;S,<span class="string">')'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'['</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            StackPush(&amp;S,<span class="string">']'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'&#123;'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            StackPush(&amp;S,<span class="string">'&#125;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">' '</span>)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">')'</span>||s[i]==<span class="string">']'</span>||s[i]==<span class="string">'&#125;'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(StackTop(&amp;S)==s[i])</span><br><span class="line">            &#123; </span><br><span class="line">                StackPop(&amp;S);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构---17】C语言实现一个链表队列</title>
      <link href="/2019/05/16/DS-CTOList/"/>
      <url>/2019/05/16/DS-CTOList/</url>
      
        <content type="html"><![CDATA[<p>学习C语言实现链表…</p><a id="more"></a><h2 id="Queue-h"><a href="#Queue-h" class="headerlink" title="Queue.h"></a>Queue.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QDataType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>* _<span class="title">pNext</span>;</span></span><br><span class="line"> QDataType _data;</span><br><span class="line">&#125;QNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> QNode* _front; <span class="comment">// 指向队头元素 </span></span><br><span class="line"> QNode* _back; <span class="comment">// 指向队尾元素 </span></span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueInit</span><span class="params">(Queue* q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePush</span><span class="params">(Queue* q, QDataType data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePop</span><span class="params">(Queue* q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">QDataType <span class="title">QueueFront</span><span class="params">(Queue* q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">QDataType <span class="title">QueueBack</span><span class="params">(Queue* q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueSize</span><span class="params">(Queue* q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueEmpty</span><span class="params">(Queue* q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueDestroy</span><span class="params">(Queue* q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueTest</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h2 id="Queue-c"><a href="#Queue-c" class="headerlink" title="Queue.c"></a>Queue.c</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">QNode* <span class="title">BuyNode</span><span class="params">(QDataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> QNode* newnode = (QNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line"> <span class="keyword">if</span> (newnode == <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  assert(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> newnode-&gt;_data = data;</span><br><span class="line"> newnode-&gt;_pNext = <span class="literal">NULL</span>;</span><br><span class="line"> <span class="keyword">return</span> newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初始化操作"><a href="#初始化操作" class="headerlink" title="初始化操作:"></a>初始化操作:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueInit</span><span class="params">(Queue* q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> assert(q);</span><br><span class="line"> q-&gt;_front = q-&gt;_back = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="入队"><a href="#入队" class="headerlink" title="入队:"></a>入队:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePush</span><span class="params">(Queue* q, QDataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> assert(q);</span><br><span class="line"> QNode* node = BuyNode(data);</span><br><span class="line"> <span class="keyword">if</span> (q-&gt;_front == <span class="literal">NULL</span> )</span><br><span class="line"> &#123;</span><br><span class="line">  q-&gt;_front = q-&gt;_back = node;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  q-&gt;_back-&gt;_pNext = node;</span><br><span class="line">  q-&gt;_back = node;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="出队"><a href="#出队" class="headerlink" title="出队:"></a>出队:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePop</span><span class="params">(Queue* q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> assert(q);</span><br><span class="line"> <span class="keyword">if</span> (q-&gt;_front == <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> QNode* newhead = q-&gt;_front;</span><br><span class="line"> <span class="comment">//队列中只有一个元素</span></span><br><span class="line"> <span class="keyword">if</span> (q-&gt;_front-&gt;_pNext == <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  q-&gt;_front = q-&gt;_back = <span class="literal">NULL</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  q-&gt;_front = newhead-&gt;_pNext;</span><br><span class="line">  <span class="built_in">free</span>(newhead);</span><br><span class="line">  newhead = <span class="literal">NULL</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取队头元素"><a href="#获取队头元素" class="headerlink" title="获取队头元素:"></a>获取队头元素:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QDataType <span class="title">QueueFront</span><span class="params">(Queue* q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (q-&gt;_front == <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> q-&gt;_front-&gt;_data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取队尾元素"><a href="#获取队尾元素" class="headerlink" title="获取队尾元素:"></a>获取队尾元素:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QDataType <span class="title">QueueBack</span><span class="params">(Queue* q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (q-&gt;_front == <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> q-&gt;_back-&gt;_data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查看当前元素个数"><a href="#查看当前元素个数" class="headerlink" title="查看当前元素个数:"></a>查看当前元素个数:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueSize</span><span class="params">(Queue* q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> QNode* pCur = q-&gt;_front;</span><br><span class="line"> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  pCur = pCur-&gt;_pNext;</span><br><span class="line">  count++;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="检测队列是否为空"><a href="#检测队列是否为空" class="headerlink" title="检测队列是否为空:"></a>检测队列是否为空:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueEmpty</span><span class="params">(Queue* q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (q-&gt;_front == <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="销毁队列"><a href="#销毁队列" class="headerlink" title="销毁队列:"></a>销毁队列:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueDestroy</span><span class="params">(Queue* q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> assert(q);</span><br><span class="line"> <span class="keyword">if</span> (q-&gt;_front == <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> QNode* pCur = q-&gt;_front;</span><br><span class="line"> <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  q-&gt;_front= pCur-&gt;_pNext;</span><br><span class="line">  <span class="built_in">free</span>(pCur);</span><br><span class="line">  pCur = <span class="literal">NULL</span>;</span><br><span class="line">  pCur = q-&gt;_front;</span><br><span class="line"> &#125;</span><br><span class="line"> q-&gt;_front = q-&gt;_back = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试队列的实现"><a href="#测试队列的实现" class="headerlink" title="测试队列的实现:"></a>测试队列的实现:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> Queue s;</span><br><span class="line"> QueueInit(&amp;s);</span><br><span class="line"> QueuePush(&amp;s, <span class="number">1</span>);</span><br><span class="line"> QueuePush(&amp;s, <span class="number">2</span>);</span><br><span class="line"> QueuePush(&amp;s, <span class="number">3</span>);</span><br><span class="line"> QueuePush(&amp;s, <span class="number">4</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//出队列</span></span><br><span class="line"> QueuePop(&amp;s);</span><br><span class="line"> QueuePop(&amp;s);</span><br><span class="line"> QueuePop(&amp;s);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//查看当前元素个数</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"size=%d\n"</span>,QueueSize(&amp;s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数:"></a>主函数:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> QueueTest();</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码运行测试图"><a href="#代码运行测试图" class="headerlink" title="代码运行测试图:"></a>代码运行测试图:</h2><p><img src="https://img-blog.csdnimg.cn/20190516150629157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190516150942681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190516150742912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> DS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构---6】将两个有序链表合并为一个新的有序链表并返回</title>
      <link href="/2019/05/02/DS-MergeList/"/>
      <url>/2019/05/02/DS-MergeList/</url>
      
        <content type="html"><![CDATA[<p>数据结构相关练习题…</p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><p><strong>将两个有序链表合并为一个新的有序链表并返回,新链表是通过拼接给定的两个链表的所有节点组成的</strong></p><p><strong>示例：</strong></p><p><strong>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析:"></a>思路分析:</h2><blockquote><p><strong>1.创建一个结果链表,同时对两个链表进行遍历</strong><br><strong>2.如果第一个链表第一个节点的值比第二个链表的第一个节点的值小,那么就把第一个链表的第一个节点指向结果链表</strong><br><strong>3.注意极端情况:</strong><br><code>1.第一个或第二个链表有一个为空,那就直接返回另一个链表</code><br><code>2.两个链表长短不一时,一方遍历完而另一个没有,最后把结果链表的last指向还没有遍历完的链表</code><br><strong>4.最后返回结果链表</strong></p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct ListNode* <span class="title">mergeTwoLists</span><span class="params">(struct ListNode* l1, struct ListNode* l2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (l1 == <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">return</span> l2;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (l2 == <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">return</span> l1;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">c1</span> = <span class="title">l1</span>;</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">c2</span> = <span class="title">l2</span>;</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">result</span> = <span class="title">NULL</span>;</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">last</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span> (c1 != <span class="literal">NULL</span> &amp;&amp; c2 != <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next1</span>=<span class="title">c1</span>-&gt;<span class="title">next</span>;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next2</span>=<span class="title">c2</span>-&gt;<span class="title">next</span>;</span></span><br><span class="line"><span class="keyword">if</span> (c1-&gt;val &lt;= c2-&gt;val)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span> (result == <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    result = last = c1;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">    last-&gt;next = c1;</span><br><span class="line">    last = c1;</span><br><span class="line">   &#125;</span><br><span class="line">   c1=next1;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">   <span class="keyword">if</span> (result == <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    result = last =c2 ;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">    last-&gt;next = c2;</span><br><span class="line">    last = c2;</span><br><span class="line">   &#125;</span><br><span class="line">   c2 = next2;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (c1 != <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  last-&gt;next = c1;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (c2 != <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  last-&gt;next = c2;</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构---7】以给定值x为基准将链表分割成两部分</title>
      <link href="/2019/05/02/DS-CutList/"/>
      <url>/2019/05/02/DS-CutList/</url>
      
        <content type="html"><![CDATA[<p>数据结构相关练习题…</p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><p><strong>编写代码，以给定值x为基准将链表分割成两部分，所有小于x的结点排在大于或等于x的结点之前</strong><br><strong>给定一个链表的头指针 ,请返回重新排列后的链表的头指针</strong></p><p><code>注意：分割以后保持原来的数据顺序不变</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br></pre></td></tr></table></figure><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析:"></a>思路分析:</h2><blockquote><p><strong>1.创建两个结果链表,分为1和2,一个用来保存小于基准值的节点,另一个用来保存大于基准值的节点</strong><br><strong>2.对原先的链表进行遍历,如果比基准值小,用尾插的方法插入第一个结果链表,反之,插入第二个</strong><br><strong>3.插入完毕之后进行两个链表的合并,将第一个链表的最后一个节点的next指向第二个链表</strong><br><strong>4.注意极端情况:</strong><br><code>1.保存大于基准值的链表的最后一个节点不一定指向空,所以最后我们记得处理!!</code><br><code>2.有可能给出的基准值比其中一整条链表保存的数都大,所以这时直接返回另一条链表</code></p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Partition</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">partition</span><span class="params">(ListNode* pHead, <span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    </span><br><span class="line">         ListNode* result1 = <span class="literal">NULL</span>; </span><br><span class="line">         ListNode* last1 = <span class="literal">NULL</span>;</span><br><span class="line">         ListNode* last2 = <span class="literal">NULL</span>;</span><br><span class="line">         ListNode* result2 = <span class="literal">NULL</span>;</span><br><span class="line">         ListNode* pCur = pHead;</span><br><span class="line">         </span><br><span class="line"> <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">if</span> (pCur-&gt;val &lt; x)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span> (result1 == <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    result1 = last1 = pCur;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">    last1-&gt;next = pCur;</span><br><span class="line">    last1 = pCur;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span> (result2 == <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    result2 = last2 = pCur;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">    last2-&gt;next = pCur;</span><br><span class="line">    last2 = pCur;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">          pCur=pCur-&gt;next;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(last1!=<span class="literal">NULL</span>)</span><br><span class="line">         &#123;</span><br><span class="line">            last1-&gt;next = result2;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (last2 != <span class="literal">NULL</span>)</span><br><span class="line">         &#123;</span><br><span class="line">    last2-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(last1!=<span class="literal">NULL</span>)</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="keyword">return</span> result1;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">            <span class="keyword">return</span> result2;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DS </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
