<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WPF的后台数据绑定</title>
      <link href="/2020/07/17/WPF-BackstageBinding/"/>
      <url>/2020/07/17/WPF-BackstageBinding/</url>
      
        <content type="html"><![CDATA[<p>有很多时候,自定义控件是由多个不同的系统提供的控件组合起来的,那么在Xaml前端界面上,实例化对象之后,是没有办法访问到内部的控件的(哪怕你命了名),但是又想给他绑定数据源怎么办呢?</p><a id="more"></a><h2 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ProgressBar</span> <span class="attr">Grid.Row</span>=<span class="string">"0"</span> <span class="attr">x:Name</span>=<span class="string">"progressBar"</span> <span class="attr">x:FieldModifier</span>=<span class="string">"public"</span> <span class="attr">Style</span>=<span class="string">"&#123;StaticResource ProgressBarStyle2&#125;"</span> </span></span><br><span class="line"><span class="tag">                     <span class="attr">local:EllipseClipper.IsClipping</span>=<span class="string">"True"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">Height</span>=<span class="string">"100"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Top"</span> </span></span><br><span class="line"><span class="tag">                     <span class="attr">Width</span>=<span class="string">"100"</span> <span class="attr">Value</span>=<span class="string">"50"</span> <span class="attr">RenderTransformOrigin</span>=<span class="string">"0.5,0.5"</span> <span class="attr">Foreground</span>=<span class="string">"&#123;DynamicResource BodorBkColor&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ProgressBar.Effect</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DropShadowEffect</span> <span class="attr">BlurRadius</span>=<span class="string">"7"</span> <span class="attr">Direction</span>=<span class="string">"-500"</span> <span class="attr">Color</span>=<span class="string">"#FF3E3E3E"</span> <span class="attr">RenderingBias</span>=<span class="string">"Quality"</span> <span class="attr">FrameworkElement.FlowDirection</span>=<span class="string">"LeftToRight"</span> <span class="attr">ShadowDepth</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ProgressBar.Effect</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ProgressBar.Background</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">"#363636"</span> <span class="attr">Offset</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">"#656666"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ProgressBar.Background</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ProgressBar.RenderTransform</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TransformGroup</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ScaleTransform</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">SkewTransform</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">RotateTransform</span> <span class="attr">Angle</span>=<span class="string">"-90"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">TranslateTransform</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">TransformGroup</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ProgressBar.RenderTransform</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ProgressBar</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Label</span> <span class="attr">Grid.Row</span>=<span class="string">"1"</span> <span class="attr">x:Name</span>=<span class="string">"labelModelName"</span> <span class="attr">x:FieldModifier</span>=<span class="string">"public"</span> <span class="attr">Content</span>=<span class="string">"功率(KW)"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">Foreground</span>=<span class="string">"&#123;StaticResource NormalForeground&#125;"</span> <span class="attr">FontSize</span>=<span class="string">"15"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Label</span> <span class="attr">Grid.Row</span>=<span class="string">"0"</span> <span class="attr">x:Name</span>=<span class="string">"labelValue"</span> <span class="attr">x:FieldModifier</span>=<span class="string">"public"</span> <span class="attr">Content</span>=<span class="string">"&#123;Binding Value, ElementName=progressBar,Converter=&#123;StaticResource ValueConverter&#125;&#125;"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">Foreground</span>=<span class="string">"&#123;StaticResource NormalForeground&#125;"</span> <span class="attr">FontSize</span>=<span class="string">"15"</span> <span class="attr">SizeChanged</span>=<span class="string">"labelValue_SizeChanged"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这段xaml的代码不保证有效,只是举个例子随便截取的一段,这个自定义控件由一个ProgreeBar和两个Label组成,其中Label1的Content绑定的是ProgressBar的Value,那么在外部调用这个自定义控件时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">local:LocalUserControl</span> <span class="attr">x:Name</span>=<span class="string">"localUserControl"</span> <span class="attr">Grid.Column</span>=<span class="string">"0"</span> <span class="attr">Width</span>=<span class="string">"120"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这个时候已经访问不到内部的ProgressBar了,怎么绑定数据就是一个问题了</p><p>也不可能在控件里就绑定,那所有的控件绑定的都是一个数据源了</p><h2 id="后台绑定"><a href="#后台绑定" class="headerlink" title="后台绑定"></a>后台绑定</h2><p>之前说xaml里哪怕内部的控件命了名也访问不了,那么命名干什么呢?是为了让后台代码可以访问到</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定当前速度</span></span><br><span class="line">CurrentSpeedBall.progressBar.Maximum = <span class="number">100</span>;</span><br><span class="line">SetBindings(CurrentSpeedBall.progressBar, viewModel.motionStatus, <span class="string">"Data"</span>, BindingMode.OneWay, ProgressBar.ValueProperty);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定和初始化进给倍率</span></span><br><span class="line">viewModel.motionStatus.feedRate = BusinessLayerService.CommonControlStatus.FeedRate = <span class="number">100</span>;</span><br><span class="line">SetBindings(FeedRateSlider.slider, viewModel.motionStatus, <span class="string">"feedRate"</span>, BindingMode.TwoWay, Slider.ValueProperty);</span><br></pre></td></tr></table></figure><p>后台是可以通过命名+.+命名的方式访问到内部的控件的</p><h2 id="SetBinding-amp-BindingOperations"><a href="#SetBinding-amp-BindingOperations" class="headerlink" title="SetBinding &amp; BindingOperations"></a>SetBinding &amp; BindingOperations</h2><p>这两者没什么大的区别,只是使用方法略微不同<br><font color=0099ff>如果需要封装成函数,控件的类型写UserControl会无法转换,所以应该写FrameWorkElement</font></p><ul><li><p>SetBinding使用:<br>UserControl.SetBinding(DependcyProperty dp,BindingBase binding)</p></li><li><p>BindingOperations使用:<br>BindingOperations.SetBinding(Obj, DepProperty, binding);</p></li><li><p>Binding.Source<br>数据源,一般都是一个类</p></li><li><p>Binding.Path<br>双向绑定的时候或者数据源是类的时候会需要,<font color=0099ff>如果数据源是类,path就是成员变量的名称</font></p></li><li><p>Binding.Mode<br>绑定的方式,和xaml里一致,one way/two way/…之类的,UpdateTrigger也是一样的设置方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetBindings</span>(<span class="params">FrameworkElement Obj, Object Source, <span class="keyword">string</span> PropertyPath, BindingMode Mode, DependencyProperty DepProperty</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Binding binding = <span class="keyword">new</span> Binding();</span><br><span class="line">    binding.Source = Source;</span><br><span class="line">    binding.Path = <span class="keyword">new</span> PropertyPath(PropertyPath);</span><br><span class="line">    binding.Mode = Mode;</span><br><span class="line">    <span class="keyword">if</span> (Mode == BindingMode.TwoWay)</span><br><span class="line">        binding.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;</span><br><span class="line">    BindingOperations.SetBinding(Obj, DepProperty, binding);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><p>如果绑定之后,界面UI没有变化,有可能是因为数据源没有通知UI发生了变化<br><font color=0099ff>数据源的类应该继承INotifyPropertyChanged,并且实现接口</font></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DataSource</span> : <span class="title">INotifyPropertyChanged</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">double</span> _Data;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">double</span> Data</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">get</span> &#123; <span class="keyword">return</span> _Data; &#125;</span><br><span class="line">           <span class="keyword">set</span></span><br><span class="line">           &#123;</span><br><span class="line">               _Data = <span class="keyword">value</span>;</span><br><span class="line">               <span class="keyword">if</span> (PropertyChanged != <span class="literal">null</span>)</span><br><span class="line">                   PropertyChanged.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">"Data"</span>));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">event</span> PropertyChangedEventHandler PropertyChanged;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://img-blog.csdnimg.cn/20200717105323104.gif" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML制作个人简介页面</title>
      <link href="/2020/07/15/HTML-About/"/>
      <url>/2020/07/15/HTML-About/</url>
      
        <content type="html"><![CDATA[<p>我的博客是看的大神教程一步步做的,然后所以我的about界面,也准备仿着大佬的做，之前根本没学过web的前端，只接触过xaml这种带标签的设计语言…</p><a id="more"></a><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>设计这个东西还是比较难得,我就直接没有设计,布局是照着别人的抄的,虽然实现是自己实现的，但是如果还是侵权的话，联系我删除<br><a href="https://www.itrhx.com/about/" target="_blank" rel="noopener">大佬的about界面</a> </p><ul><li>最上层,旋转的头像、昵称、生日等信息</li><li>中间左半部分，技能和占比</li><li>中间右半部分，个人的简介</li><li>底部，图片链接</li><li>最底部，版权信息、博客链接</li></ul><p>确定好每个区域的位置，背景色和透明度，颜色我不会弄成渐变的，暂且纯色代替，css我也没学过，写法如果错误请见谅..</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.center</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 20%;</span><br><span class="line">            right: 20%;</span><br><span class="line">            top: 10%;</span><br><span class="line">            width: 60%;</span><br><span class="line">            height: 15%;</span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span>: 0<span class="selector-class">.95</span>;</span></span><br><span class="line">            float: left;</span><br><span class="line">            background-color: white;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.centerAfterLeft</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 20%;</span><br><span class="line">            top: 26%;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span>: 29<span class="selector-class">.5</span>%;</span></span><br><span class="line">            height: 50%;</span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span>: 0<span class="selector-class">.95</span>;</span></span><br><span class="line">            float: left;</span><br><span class="line">            background-color: white;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.centerAfterRight</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            right: 20%;</span><br><span class="line">            top: 26%;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span>: 29<span class="selector-class">.5</span>%;</span></span><br><span class="line">            height: 50%;</span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span>: 0<span class="selector-class">.95</span>;</span></span><br><span class="line">            float: left;</span><br><span class="line">            background-color: white;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 20%;</span><br><span class="line">            right: 20%;</span><br><span class="line">            top: 77%;</span><br><span class="line">            width: 60%;</span><br><span class="line">            height: 15%;</span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span>: 0<span class="selector-class">.95</span>;</span></span><br><span class="line">            background-color: white;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.lastfooter</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 20%;</span><br><span class="line">            right: 20%;</span><br><span class="line">            top: 93%;</span><br><span class="line">            width: 60%;</span><br><span class="line">            height: 30px;</span><br><span class="line">            vertical-align: middle;</span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: transparent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line">            background-color: rgb(81, 77, 85);</span><br><span class="line">            font-family: 楷体;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="头像旋转"><a href="#头像旋转" class="headerlink" title="头像旋转"></a>头像旋转</h3><p>遇到不会的就要多百度一下，然后我惊讶的发现了大佬也是查询的这篇博客，还留了言..<br><a href="https://blog.csdn.net/ly305750665/article/details/71499497/" target="_blank" rel="noopener">HTML图片旋转</a></p><p>基本上博客上的内容复制过去就直接能用，然后我就不求甚解了..</p><h3 id="文字排版"><a href="#文字排版" class="headerlink" title="文字排版"></a>文字排版</h3><p>拿最上层举例,昵称和后面的文字是需要在一行的,标签p需要设置display:inline-block;<br>然后空格我也不知道为啥HTML默认不显示,我查到的方法是&amp;nbsp,好像markdown里也是这样的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: left;margin-left: 20px;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 10px;display: inline-block;font-weight: bold;"</span>&gt;</span>昵称:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 10px;display: inline-block;"</span>&gt;</span>&amp;nbsp&amp;nbsp染墨灬若流云<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 15px;display: inline-block;font-weight: bold;"</span>&gt;</span>最爱:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 15px;display: inline-block;"</span>&gt;</span>&amp;nbsp&amp;nbsp迷人又可爱的鹿宝宝~<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我知道这样写会有问题,如果是xaml布局,我会考虑竖屏下的情况,避免分辨率变化造成的页面显示异常,但是html实在是无能为力…</p><p>中间的右半部分,那个黑色的点很容易让人想到markdown的-,那么是不是html可以用markdown语法呢?很遗憾不可以,但是可以把markdown转换成html,Typora或者CSDN的编辑器都支持这个功能</p><p><img src="https://img-blog.csdnimg.cn/20200715150301188.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>学历: <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>现况: <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>目标: <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>博客: <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>兴趣: &gt;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导出后最后是没有<code>&lt;br&gt;</code>标签的,我是为了和左边对齐</p><h3 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h3><p>这个我查了很多,都是用js来做,可惜js我也没学过,我觉得我在window_load事件中写会导致刷新的时候明显感觉矩形闪烁,大佬的博客about界面就没这个问题,所以我觉得这个方法不太对..</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*技能条*/</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"SkillCanvas"</span>);</span><br><span class="line"><span class="keyword">if</span> (canvas == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">12</span>, <span class="number">39</span>, <span class="number">64</span>, <span class="number">89</span>, <span class="number">114</span>);</span><br><span class="line"><span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"#4AB480"</span>, <span class="string">"#E1AB3E"</span>, <span class="string">"#DC595#7390F2"</span>, <span class="string">"#747DC5"</span>);</span><br><span class="line"><span class="keyword">var</span> l = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">120</span>, <span class="number">150</span>, <span class="number">40</span>, <span class="number">60</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">var</span> content = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">    content.fillStyle = y[i];</span><br><span class="line">    content.fillRect(<span class="number">0</span>, t[i], l[i], <span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写维护性很差很差,但是考虑到这个界面过很久很久才可能更新,所以先只追求效果,不追求代码规范(给自己的菜找一找借口)</p><p>技能的百分比就还是之前的方法,移到合适的位置就好<br>排版的话我毕竟没学过,追求效果类似我用的margin-left,直接偏移过去,不知道更优雅的做法是怎么样的..大佬的这个界面是禁用左右键和F12的..</p><h3 id="禁用左右键和F12"><a href="#禁用左右键和F12" class="headerlink" title="禁用左右键和F12"></a>禁用左右键和F12</h3><p>大佬这样做的目的可能是保护自己的代码或者不让自己的界面被人改动,既然我们是仿照大佬的做,这个功能我们也要有</p><p>JS也可以禁用左右键,但是网上说禁用JS脚本后这招就没用了,所以这里用html自带的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">topmargin</span>=<span class="string">"0"</span> <span class="attr">oncontextmenu</span>=<span class="string">"return false"</span> <span class="attr">ondragstart</span>=<span class="string">"return false"</span> <span class="attr">onselectstart</span>=<span class="string">"return false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onselect</span>=<span class="string">"document.selection.empty()"</span> <span class="attr">oncopy</span>=<span class="string">"document.selection.empty()"</span> <span class="attr">onbeforecopy</span>=<span class="string">"return false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onmouseup</span>=<span class="string">"document.selection.empty()"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将这段放入body标签中即可生效</p><p>禁用F12我只找到了JS的方法,不知道大佬是怎么做的..</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onkeydown = <span class="built_in">window</span>.onkeyup = <span class="built_in">window</span>.onkeypress = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否按下F12，F12键码为123  </span></span><br><span class="line">        <span class="keyword">if</span> (event.keyCode = <span class="number">123</span>) &#123;</span><br><span class="line">            event.preventDefault(); <span class="comment">// 阻止默认事件行为  </span></span><br><span class="line">            <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>链接是<code>&lt;a&gt;</code>标签,图片链接就是在这个标签里加入一个<code>&lt;img&gt;</code>标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://blog.csdn.net/Austin_Yan"</span> <span class="attr">target</span>=<span class="string">"-blank"</span> <span class="attr">title</span>=<span class="string">"CSDN"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"blog"</span> <span class="attr">style</span>=<span class="string">"margin-top: 0px;left: 75%;position: absolute;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/AustinYANyh/Image@1.1.1/CSDN.png"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>target<br>设置为-blank表示在浏览器新标签页打开</li><li>title<br>替换文字,鼠标移到上方显示的文字</li></ul><p>唤醒微信的我没查到,查到的也不能用,但是QQ的可以<br>跳转链接为<a href="http://wpa.qq.com/msgrd?v=3" target="_blank" rel="noopener">http://wpa.qq.com/msgrd?v=3</a> &amp;uin=1241528539 &amp;site=qq&amp;menu=yes<br>里面有空格是因为我不加空格我跳转之后啥也不发生…加了空格貌似发送了点什么但是不太对的样子…</p><h3 id="飘雪"><a href="#飘雪" class="headerlink" title="飘雪"></a>飘雪</h3><p>飘雪的代码来源于大佬的教程<a href="https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/" target="_blank" rel="noopener">https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/</a></p><p>将js代码拷贝到script标签下,然后window_load事件调用即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> <span class="title">StartSnow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/* 调用及控制方法 */</span></span><br><span class="line">        <span class="keyword">var</span> snow = <span class="keyword">new</span> snowFall(&#123; <span class="attr">maxFlake</span>: <span class="number">60</span> &#125;);</span><br><span class="line">        snow.start();</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>一些小细节比如说,中间左右部分之间的间隔和上下的不一致..背景图没有找用纯色代替..还有大佬的模块背景和技能条的颜色都是渐变的..这些我都没处理好,不过还是先记录下来先做到这个样子吧..</p><p><img src="https://img-blog.csdnimg.cn/20200715150314233.gif" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF的按行高亮显示文本框</title>
      <link href="/2020/07/10/WPF-HightLightTextBox/"/>
      <url>/2020/07/10/WPF-HightLightTextBox/</url>
      
        <content type="html"><![CDATA[<p>之前做Winform的防QQ的通讯程序的时候，用到了文本框高亮显示，现在试试在WPF里试着实现</p><a id="more"></a><h2 id="RichTextBox实现"><a href="#RichTextBox实现" class="headerlink" title="RichTextBox实现"></a>RichTextBox实现</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>利用TextPointer<br>使用GetPositionAtOffst(double offset)方法获取需要高亮的文字开始位置的索引和结尾位置的索引</li><li>获取偏移量<br>RichTextBox行结尾处的偏移量为<font color=0099ff>开头的偏移量</font>+<font color=0099ff>文本长度</font>+<font color=0099ff>4</font>,这里的4是”\r\n”的长度</li><li>利用TextRange内的ApplyPropertyValue方法<br>新建一个TextRange,参数就是刚才的两个索引(TextPointer),然后修改TextElement的附加属性</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">TextRange textrange = <span class="keyword">new</span> TextRange(OrderShow.Document.ContentStart, OrderShow.Document.ContentEnd);</span><br><span class="line"><span class="keyword">string</span>[] str = textrange.Text.Split(<span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"\r\n"</span> &#125;, StringSplitOptions.RemoveEmptyEntries);</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.Count(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">    Dispatcher.BeginInvoke(<span class="keyword">new</span> Action(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        textrange = <span class="keyword">new</span> TextRange(OrderShow.Document.ContentStart, OrderShow.Document.ContentEnd);</span><br><span class="line">        textrange.ApplyPropertyValue(TextElement.ForegroundProperty, System.Windows.Media.Brushes.Black);</span><br><span class="line">        textrange.ApplyPropertyValue(TextElement.FontWeightProperty, FontWeights.Regular);</span><br><span class="line">    &#125;));</span><br><span class="line">    TextPointer p1 = OrderShow.Selection.Start;</span><br><span class="line">    p1 = p1.GetPositionAtOffset(index);</span><br><span class="line">    index += str[i].Length;</span><br><span class="line">    TextPointer p2 = OrderShow.Selection.Start;</span><br><span class="line">    p2 = p2.GetPositionAtOffset(index);</span><br><span class="line">    Dispatcher.BeginInvoke(<span class="keyword">new</span> Action(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        textrange = <span class="keyword">new</span> TextRange(p1, p2);</span><br><span class="line">        textrange.ApplyPropertyValue(TextElement.ForegroundProperty, System.Windows.Media.Brushes.Blue);</span><br><span class="line">        textrange.ApplyPropertyValue(TextElement.FontWeightProperty, FontWeights.Bold);</span><br><span class="line">    &#125;));</span><br><span class="line">    index += <span class="number">4</span>;</span><br><span class="line">    Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">Dispatcher.BeginInvoke(<span class="keyword">new</span> Action(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    textrange = <span class="keyword">new</span> TextRange(OrderShow.Document.ContentStart, OrderShow.Document.ContentEnd);</span><br><span class="line">    textrange.ApplyPropertyValue(TextElement.ForegroundProperty, System.Windows.Media.Brushes.Black);</span><br><span class="line">    textrange.ApplyPropertyValue(TextElement.FontWeightProperty, FontWeights.Regular);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>然而有个最严重的问题,RichTextBox的ScollViewer的方法除了ScrollToEnd和ScrollToHome外只有设置水平和垂直的偏移量,根据高亮内容的变化,不太方便控制滚动条到合适的位置..(我不会而已,不代表不可以实现)</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>只改了前景色没修改背景色<br><font color=red>高亮显示前光标必须在ContentStart,不然之后的index计算不准</font><br><img src="https://img-blog.csdnimg.cn/20200711142031239.gif" alt="在这里插入图片描述"></p><h2 id="TextBox实现"><a href="#TextBox实现" class="headerlink" title="TextBox实现"></a>TextBox实现</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>为了解决上面的问题,所以又想用最开始的这个控件,优点是TextBox有ScrollToLine(int LineIndex)方法,滚动条的位置不需要管,只需要给行号即可,行号可以把TextBox的文本内容按”\r\n”分割获得,缺点是,高亮显示没有RichTextBox那么方便</p><ul><li>Select(int start,int length)方法<br>使用Select方法,可以选中start位置开始长度为length的字符<font color=0099ff>要有显示效果需要TextBox获得焦点</font></li><li>SelectionBrush(System.Windows.Media.Brush)<br>使用这个方法可以改变文本被选中的颜色,效果肯定不如既可以修改Foreground又可以修改Background的,其他方式我没查出来..(暂且先这样做)</li><li>获取偏移量<br>方法和上面的一样,区别是TextBox计算时末尾加的是2,只有”\n”</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> txt = <span class="keyword">string</span>.Empty;</span><br><span class="line">txt = OrderShow.Text;</span><br><span class="line">OrderShow.Focus();</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span>[] str = txt.Split(<span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"\r\n"</span> &#125;, StringSplitOptions.None);</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.Count(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">    OrderShow.Focus();</span><br><span class="line">    OrderShow.CaretIndex = <span class="number">0</span>;</span><br><span class="line">    OrderShow.Select(index, str[i].Length);</span><br><span class="line">    OrderShow.ScrollToLine(i);</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(o =&gt; Thread.Sleep(<span class="number">200</span>));</span><br><span class="line">    t.Start(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">while</span> (t.IsAlive)</span><br><span class="line">        System.Windows.Forms.Application.DoEvents();</span><br><span class="line">    index += str[i].Length + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">Importbtn.Focus();</span><br></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>之前都是新建了一个线程去做高亮的事情,因为Thread.Sleep()在主线程调用会让界面UI假死,然后遇到了各种什么可能是CLR错误之类的东西,而且换到TextBox之后居然只有调试进断点才能看到效果,直接运行界面没任何变化</p><p>避免界面假死在Winform的时候用过DoEvents,所以想了一下直接不使用线程了,就在主线程延时操作</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> Thread(o =&gt; Thread.Sleep(<span class="number">200</span>));</span><br><span class="line">t.Start(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">while</span> (t.IsAlive)</span><br><span class="line">    System.Windows.Forms.Application.DoEvents();</span><br></pre></td></tr></table></figure><p>线程只需要延时即可</p><p>文本内容如果有空行,那么在分割的时候StringSplitOptiions选择None,不然索引位置会计算错误造成高亮的不是想要的内容</p><h2 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h2><p><img src="https://img-blog.csdnimg.cn/20200710140653895.gif" alt="在这里插入图片描述"><br><font color=0099ff size=16>2020-07-11更新</font></p><p><font color=0099ff size=5>综合两种方法的优缺点,但是又有了新的问题</font></p><h2 id="ListView实现"><a href="#ListView实现" class="headerlink" title="ListView实现"></a>ListView实现</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>TextBox的滚动条可以精确到行,RichTextBox的字体高亮,把这两个结合起来</p><ul><li>TextBlock作为Item<br>使用TextBlock的原因是因为他有Forceground、Background、FontWeight和FontSize属性</li><li>ScrollToView(Item item)<br>这个方法可以精确的将滚动条跳转到ListView中的控件,与TextBox的ScrollToLine<font color=red>不同的是这个的滚动条位置是将控件显示在最下方</font></li><li>优点<br>ListView本身就有行的概念,放入的TextBlock就是按行排布的,所以不需要计算index来找到需要高亮的文本内容</li></ul><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.Count(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">    listview.ScrollIntoView(listview.Items[i]);</span><br><span class="line">    (listview.Items[i] <span class="keyword">as</span> TextBlock).Foreground = Brushes.Red;</span><br><span class="line">    (listview.Items[i] <span class="keyword">as</span> TextBlock).Background = Brushes.Yellow;</span><br><span class="line">    (listview.Items[i] <span class="keyword">as</span> TextBlock).FontWeight = FontWeights.Bold;</span><br><span class="line">    (listview.Items[i] <span class="keyword">as</span> TextBlock).FontSize = <span class="number">16</span>;</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(o =&gt; Thread.Sleep(<span class="number">100</span>));</span><br><span class="line">    t.Start(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">while</span> (t.IsAlive)</span><br><span class="line">        System.Windows.Forms.Application.DoEvents();</span><br><span class="line">    (listview.Items[i] <span class="keyword">as</span> TextBlock).Foreground = Brushes.White;</span><br><span class="line">    (listview.Items[i] <span class="keyword">as</span> TextBlock).Background = Brushes.Transparent;</span><br><span class="line">    (listview.Items[i] <span class="keyword">as</span> TextBlock).FontWeight = FontWeights.Regular;</span><br><span class="line">    (listview.Items[i] <span class="keyword">as</span> TextBlock).FontSize = <span class="number">13</span>;</span><br><span class="line">    t.Abort();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遇到的问题-1"><a href="#遇到的问题-1" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>ListView默认的MouseOver和Selected会有巨丑的深蓝色背景Bodor,我们按行高亮只需要演示,不需要这个东西<br>重写样式将对应的Background修改为Transparent</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;Style TargetType=<span class="string">"&#123;x:Type ListViewItem&#125;"</span>&gt;</span><br><span class="line">    &lt;Setter Property=<span class="string">"Template"</span>&gt;</span><br><span class="line">        &lt;Setter.Value&gt;</span><br><span class="line">            &lt;ControlTemplate TargetType=<span class="string">"&#123;x:Type ListViewItem&#125;"</span>&gt;</span><br><span class="line">                &lt;Border Name=<span class="string">"Bd"</span></span><br><span class="line">        Background=<span class="string">"&#123;TemplateBinding Background&#125;"</span> BorderBrush=<span class="string">"&#123;TemplateBinding BorderBrush&#125;"</span></span><br><span class="line">        BorderThickness=<span class="string">"&#123;TemplateBinding BorderThickness&#125;"</span> Padding=<span class="string">"&#123;TemplateBinding Padding&#125;"</span></span><br><span class="line">        SnapsToDevicePixels=<span class="string">"true"</span>&gt;</span><br><span class="line">                    <span class="comment">//用于显示本身的Content</span></span><br><span class="line">                    &lt;ContentPresenter HorizontalHorizontalContentAlignment&#125;<span class="string">"</span></span><br><span class="line"><span class="string">                      VerticalAlignment="</span>&#123;TemplateBinding VerticalContentAlignment&#125;<span class="string">"</span></span><br><span class="line"><span class="string">                      SnapsToDevicePixels="</span>&#123;TemplateBinding SnapsToDevicePixels&#125;<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">                &lt;/Border&gt;</span></span><br><span class="line"><span class="string">            &lt;/ControlTemplate&gt;</span></span><br><span class="line"><span class="string">        &lt;/Setter.Value&gt;</span></span><br><span class="line"><span class="string">    &lt;/Setter&gt;</span></span><br><span class="line"><span class="string">    &lt;Setter Property="</span>FocusVisualStyle<span class="string">" Value="</span>&#123;x:Null&#125;<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;Setter Property="</span>BorderThickness<span class="string">" Value="</span><span class="number">0</span><span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;Setter Property="</span>Foreground<span class="string">" Value="</span>Black<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;Setter Property="</span>Background<span class="string">" Value="</span>Transparent<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;Setter Property="</span>VerticalAlignment<span class="string">" Value="</span>Top<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;Setter Property="</span>FontSize<span class="string">" Value="</span><span class="number">14</span><span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;Style.Triggers&gt;</span></span><br><span class="line"><span class="string">        &lt;!--触发器--&gt;</span></span><br><span class="line"><span class="string">        &lt;Trigger Property="</span>IsMouseOver<span class="string">" Value="</span>True<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;Setter Property="</span>Background<span class="string">" Value="</span>Transparent<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">            &lt;Setter Property="</span>BorderBrush<span class="string">" Value="</span>Transparent<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">        &lt;/Trigger&gt;</span></span><br><span class="line"><span class="string">        &lt;Trigger Property="</span>IsSelected<span class="string">" Value="</span><span class="literal">true</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;Setter Property="</span>Background<span class="string">" Value="</span>Transparent<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">            &lt;Setter Property="</span>Foreground<span class="string">" Value="</span>White<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">        &lt;/Trigger&gt;</span></span><br><span class="line"><span class="string">    &lt;/Style.Triggers&gt;</span></span><br><span class="line"><span class="string">&lt;/Style&gt;</span></span><br></pre></td></tr></table></figure><p>但是,如果有编辑需求的就麻烦了,TextBlock不可以编辑,而且ListView也不可以像文本框一样选择一片<br>所以,需要编辑的时间将ListView隐藏,显示一个等大的TextBox去编辑吧#doge (下下策,好的方法我也不会)</p><h3 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/20200711141556398.gif" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>培养Vim使用习惯，Chrome安装Vimium插件</title>
      <link href="/2020/07/08/Chrome-Vimium/"/>
      <url>/2020/07/08/Chrome-Vimium/</url>
      
        <content type="html"><![CDATA[<p>为了让自己更快的熟练各种快捷键，但是仅仅在日常写代码的情况下，很明显是不够的，于是我在chrome上装了这个插件，使自己无论何时都在使用vim的过程中，达到迅速上手改变自己操作习惯的目的(尽量不使用鼠标)..</p><a id="more"></a><h2 id="Chrome-WebStore"><a href="#Chrome-WebStore" class="headerlink" title="Chrome WebStore"></a>Chrome WebStore</h2><p>首先在谷歌的插件商店中搜索Vimium,然后找到下载量最多的那个就是,直接下载安装即可,至于怎么翻墙,以后再写一篇</p><p><img src="https://img-blog.csdnimg.cn/20200708093132925.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Vimium常用命令"><a href="#Vimium常用命令" class="headerlink" title="Vimium常用命令"></a>Vimium常用命令</h2><ul><li>滚动<ul><li>j:与Vim一致,向下滚动</li><li>k:与Vim一致,向上滚动</li><li>d:向下滚动一个屏幕的距离</li><li>u:向上滚动一个屏幕的距离</li><li>gg:与Vim一致,到达页面顶部</li><li>G:与Vim一致,到达页面底部</li></ul></li><li>标签页<ul><li>J:切换到上一个标签页(为什么J变成向上切换??)</li><li>K:切换到下一个标签页</li></ul></li><li>页面操作<ul><li>x:关闭当前页面</li><li>X:恢复刚刚关闭的页面</li><li>r:重新加载页面</li><li>L:与Vim一致,前进</li><li>H:与Vim一致,后退</li><li>t:打开新标签页，直接可以输入网址</li></ul></li></ul><p>常用的命令好像暂时就这么多,但是如何想要打开某一个连接进去查看怎么办呢?</p><p>上面的快捷键只是一些很简单的常用的快捷键,还有很多没有列举,比如Vim是不用鼠标的,那么怎么点击链接就成了问题,我们也不可能不点击链接,所以<font color="red">快捷键f</font>就是专门处理链接的问题的</p><p><img src="https://img-blog.csdnimg.cn/2020070809315530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>虽然看上去很傻,而且效率肯定不如鼠标点击快,但是我的目的不是为了操作快,而且为了改变我的使用习惯,等到Vim随心所欲的时候,浏览器Vim插件的作用也就不存在了</p><p>突然想到为了发博客的图片能够显示居然还需要先发到CSDN上,CSDN居然变成了图床一样的用法,还是应该把自己以前做的图片服务器搭起来,也当作是复习了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF的Command传入多参和快捷键设置</title>
      <link href="/2020/07/07/WPF-ShortCutKey/"/>
      <url>/2020/07/07/WPF-ShortCutKey/</url>
      
        <content type="html"><![CDATA[<p>多活动活动脖子，多运动运动，拒绝颈椎病，从我做起！</p><a id="more"></a><h2 id="多路绑定-转换器"><a href="#多路绑定-转换器" class="headerlink" title="多路绑定+转换器"></a>多路绑定+转换器</h2><p>使用MVVM模式的时候,多半将view中产生的操作通过command绑定到viewModel下处理,可以使用commandparameter将需要的参数传递过去,但是如果需要的参数超过一个的情况下,该怎么处理呢?</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button x:Name=<span class="string">"btyAutoUp"</span> Content=<span class="string">"Y+"</span> Height=<span class="string">"50"</span> Canvas.Left=<span class="string">"101"</span> Width=<span class="string">"50"</span> VerticalContentAlignment=<span class="string">"Center"</span> Canvas.Top=<span class="string">"195"</span> Margin=<span class="string">"0,10,210,0"</span> VerticalAlignment=<span class="string">"Top"</span> HorizontalAlignment=<span class="string">"Right"</span>&gt;</span><br><span class="line">                   &lt;i:Interaction.Triggers&gt;</span><br><span class="line">                       &lt;i:EventTrigger EventName=<span class="string">"PreviewMouseDown"</span>&gt;</span><br><span class="line">                           &lt;i:InvokeCommandAction Command=<span class="string">"&#123;Binding JogCommand&#125;"</span>&gt;</span><br><span class="line">                               &lt;i:InvokeCommandAction.CommandParameter&gt;</span><br><span class="line">                                   &lt;MultiBinding Converter=<span class="string">"&#123;StaticResource YourConveter&#125;"</span>&gt;</span><br><span class="line">                                       &lt;Binding ElementName=<span class="string">"btyAutoUp"</span> Path=<span class="string">"Content"</span>&gt;&lt;/Binding&gt;</span><br><span class="line">                                       &lt;Binding ElementName=<span class="string">"stepbtn"</span> Path=<span class="string">"State"</span>&gt;&lt;/Binding&gt;</span><br><span class="line">                                       &lt;Binding ElementName=<span class="string">"StepDistance"</span> Path=<span class="string">"Text"</span>&gt;&lt;/Binding&gt;</span><br><span class="line">                                       &lt;Binding ElementName=<span class="string">"IncrSpeed"</span> Path=<span class="string">"Text"</span>&gt;&lt;/Binding&gt;</span><br><span class="line">                                   &lt;/MultiBinding&gt;</span><br><span class="line">                               &lt;/i:InvokeCommandAction.CommandParameter&gt;</span><br><span class="line">                           &lt;/i:InvokeCommandAction&gt;</span><br><span class="line">                       &lt;/i:EventTrigger&gt;</span><br><span class="line">                       &lt;i:EventTrigger EventName=<span class="string">"PreviewMouseUp"</span>&gt;</span><br><span class="line">                           &lt;i:InvokeCommandAction Command=<span class="string">"&#123;Binding JogStopCommand&#125;"</span>&gt;</span><br><span class="line">                               &lt;i:InvokeCommandAction.CommandParameter&gt;</span><br><span class="line">                                   &lt;MultiBinding Converter=<span class="string">"&#123;StaticResource YourConveter&#125;"</span>&gt;</span><br><span class="line">                                       &lt;Binding  ElementName=<span class="string">"btyAutoUp"</span> Path=<span class="string">"Content"</span>&gt;&lt;/Binding&gt;</span><br><span class="line">                                       &lt;Binding  ElementName=<span class="string">"stepbtn"</span> Path=<span class="string">"State"</span>&gt;&lt;/Binding&gt;</span><br><span class="line">                                   &lt;/MultiBinding&gt;</span><br><span class="line">                               &lt;/i:InvokeCommandAction.CommandParameter&gt;</span><br><span class="line">                           &lt;/i:InvokeCommandAction&gt;</span><br><span class="line">                       &lt;/i:EventTrigger&gt;</span><br><span class="line">                   &lt;/i:Interaction.Triggers&gt;</span><br><span class="line">               &lt;/Button&gt;</span><br></pre></td></tr></table></figure><p>MultiBinding中可以写很多个Binding,但是<MultiBinding>标签中必须要有一个转换器,转换器其实也很好写,就是把传入的参数备份一遍,不然传入下一个参数的时候上一个就消失了</p><p>与转换器不同的是,多路绑定转换继承的是iMultiValueConverter<br>普通绑定转换继承的iValueConverter</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MultiBindingConverter</span>:<span class="title">iMultiValueConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Convert</span>(<span class="params"><span class="keyword">object</span>[] values,Type targetType,<span class="keyword">object</span> parameter,CultureInfo culture</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> values.Clone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span>[] <span class="title">ConverterBack</span>(<span class="params"><span class="keyword">object</span>[] values,Type targetType,<span class="keyword">object</span> parameter,CultureInfo culture</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotlmplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200707170309701.png" alt="在这里插入图片描述"></p><h2 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h2><p>快捷键可以使用keydown事件也可以使用InputBinding,一个是写在xaml.cs里一个是写在viewModel里,我觉得没啥影响,看个人喜好<br>博客里写Binding的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Window.InputBindings&gt;</span><br><span class="line">    &lt;KeyBinding Getsture&#x3D;&quot;Control+Shift+B&quot; Command&#x3D;&quot;&#123;Binding DebugCommand&#125;&quot;&gt;</span><br><span class="line">&lt;&#x2F;Window.InputBindings&gt;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> DelegateCommand DebugCommand &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainWindowViewModel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DebugCommand = <span class="keyword">new</span> DelegateCommand(()=&gt;</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">if</span>(Keyboard.IsKeyDown(Key.LeftCtrl) &amp;&amp; Keyboard.IsKeyDown(Key.LeftShift) &amp;&amp; Keyboard.IsKeyDown(Key.B)) </span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">var</span> window = Application.Current.MainWindow;</span><br><span class="line">           MainWindow mainWindow = <span class="keyword">new</span> MainWindow(window);</span><br><span class="line">           MainWindow.IsOpen = <span class="literal">true</span>;</span><br><span class="line">           mainWindow.Show();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是有个问题暂时解决不了,微软的输入法Ctrl+Shift+B是表情,中文状态下会优先触发微软的输入法快捷键,英文就没问题</p><p><font size=16 color="0099ff">2020-07-08更新,问题解决</font></p><p><font size=10 color=red>以下代码和资料来源于:</font><br><a href="http://www.cppcns.com/ruanjian/csharp/92519.html" target="_blank" rel="noopener">http://www.cppcns.com/ruanjian/csharp/92519.html</a></p><p>先定义一个类,用来调用API</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HotKey</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 如果函数执行成功，返回值不为0。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 如果函数执行失败，返回值为0。要得到扩展错误信息，调用GetLastError。.NET方法:Marshal.GetLastWin32Error()</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="hWnd"&gt;</span>要定义热键的窗口的句柄<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="id"&gt;</span>定义热键ID（不能与其它ID重复） <span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="fsModifiers"&gt;</span>标识热键是否在按Alt、Ctrl、Shift、Windows等键时才会生效<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="vk"&gt;</span>定义热键的内容,WinForm中可以使用Keys枚举转换，</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> WPF中Key枚举是不正确的,应该使用System.Windows.Forms.Keys枚举，或者自定义正确的枚举或int常量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>, SetLastError = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">RegisterHotKey</span>(<span class="params">IntPtr hWnd, <span class="keyword">int</span> id, KeyModifiers fsModifiers, <span class="keyword">int</span> vk</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 取消注册热键</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="hWnd"&gt;</span>要取消热键的窗口的句柄<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="id"&gt;</span>要取消热键的ID<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>, SetLastError = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">UnregisterHotKey</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    IntPtr hWnd,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> id</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 向全局原子表添加一个字符串，并返回这个字符串的唯一标识符,成功则返回值为新创建的原子ID,失败返回0</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="lpString"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"kernel32"</span>, SetLastError = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">short</span> <span class="title">GlobalAddAtom</span>(<span class="params"><span class="keyword">string</span> lpString</span>)</span>;</span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"kernel32"</span>, SetLastError = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">short</span> <span class="title">GlobalDeleteAtom</span>(<span class="params"><span class="keyword">short</span> nAtom</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 定义了辅助键的名称（将数字转变为字符以便于记忆，也可去除此枚举而直接使用数值）</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">Flags()</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> KeyModifiers</span><br><span class="line">    &#123;</span><br><span class="line">        None = <span class="number">0</span>,</span><br><span class="line">        Alt = <span class="number">1</span>,</span><br><span class="line">        Ctrl = <span class="number">2</span>,</span><br><span class="line">        Shift = <span class="number">4</span>,</span><br><span class="line">            WindowsKey = <span class="number">8</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 热键的对应的消息ID</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">int</span> WM_HOTKEY = <span class="number">0x312</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>WPF的处理方法与Winform略微不一致,需要使用HwndSource拦截Window消息,说的简单点也就是自己定义一个消息处理的方法,拦截到的消息如果是定义的快捷键,就执行自己定义的消息处理方法</p><p><font color="0099ff">如果是Contorl+B这种的直接调用即可,Control+Shift+B这种的KeyModifiers需要使用|连接</font></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Window_Loaded</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HwndSource hWndSource;</span><br><span class="line">    WindowInteropHelper wih = <span class="keyword">new</span> WindowInteropHelper(<span class="keyword">this</span>);</span><br><span class="line">    hWndSource = HwndSource.FromHwnd(wih.Handle);</span><br><span class="line">    <span class="comment">//添加处理程序</span></span><br><span class="line">    hWndSource.AddHook(MainWindowProc);</span><br><span class="line">    alts = HotKey.GlobalAddAtom(<span class="string">"Control-Shift-B"</span>);</span><br><span class="line">    HotKey.RegisterHotKey(wih.Handle, alts, HotKey.KeyModifiers.Ctrl | HotKey.KeyModifiers.Shift, (<span class="keyword">int</span>)System.Windows.Forms.Keys.B);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> IntPtr <span class="title">MainWindowProc</span>(<span class="params">IntPtr hwnd, <span class="keyword">int</span> msg, IntPtr wParam, IntPtr lParam, <span class="keyword">ref</span> <span class="keyword">bool</span> handled</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (msg)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> HotKey.WM_HOTKEY:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> sid = wParam.ToInt32();</span><br><span class="line">                <span class="keyword">if</span> (sid == alts)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//按下快捷键需要做的事情</span></span><br><span class="line">                &#125;</span><br><span class="line">                handled = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> IntPtr.Zero;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就已经可以无论中英文状态,按下快捷键都会响应</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Blend与Ps的交互</title>
      <link href="/2020/07/04/WPF-Blend&amp;Ps/"/>
      <url>/2020/07/04/WPF-Blend&amp;Ps/</url>
      
        <content type="html"><![CDATA[<p>每天都学习一点WPF相关的知识，虽然我不太想从事CS前端类的工作，但是其实我也不知道自己想干什么…</p><a id="more"></a><h2 id="获取PS文件的Path"><a href="#获取PS文件的Path" class="headerlink" title="获取PS文件的Path"></a>获取PS文件的Path</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Path Stroke=<span class="string">"Black"</span> StrokeThickness=<span class="string">"2"</span> Margin=<span class="string">"450,20,0,0"</span> Data=<span class="string">"M 0,0 C 250,0 50,200 300,200 M 50,50 A 20,20 0 1 0 70,70"</span>&gt;</span><br></pre></td></tr></table></figure><p>Path好用,但是Data难求,只要有Data就可以很容易画出复杂图形,虽然自从2015之后的Blend取消了导入Psd文件,但是可以从图层中复制svg,然后粘贴到文本编辑器中,就可以获取Path数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">width</span>=<span class="string">"3.44cm"</span> <span class="attr">height</span>=<span class="string">"0.406cm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">"evenodd"</span>  <span class="attr">stroke</span>=<span class="string">"rgb(0, 0, 0)"</span> <span class="attr">stroke-width</span>=<span class="string">"1px"</span> <span class="attr">stroke-linecap</span>=<span class="string">"butt"</span> <span class="attr">stroke-linejoin</span>=<span class="string">"miter"</span> <span class="attr">fill</span>=<span class="string">"none"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">d</span>=<span class="string">"M6.500,0.500 L91.500,0.500 C98.873,0.500 97.421,10.500 91.500,10.500 L6.500,10.500 C0.079,10.943 -2.443,1.118 6.500,0.500 Z"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前提是PS中图形是使用矩形工具这类路径操作画出来的，不然是没有path的</p><h2 id="WPF中使用Data"><a href="#WPF中使用Data" class="headerlink" title="WPF中使用Data"></a>WPF中使用Data</h2><p>将刚才svg中的标签首字母大写,d改为Data,就是取我们想要的信息然后复制,在WPF下直接放入Grid等容器中即可<br><img src="https://img-blog.csdnimg.cn/20200704105647781.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Path x:Name=<span class="string">"PART_Track"</span>  Stroke=<span class="string">"Black"</span> StrokeThickness=<span class="string">"1"</span> Data=<span class="string">"M18,0 L18,0 137,0 M137,0 A2.5,2.5 0 0 1 130,30 L13,30 A1,1 0 0 1 18,0z"</span>&gt;</span><br></pre></td></tr></table></figure><p>这是用代码画的，两条直线，两个圆弧，结果…不明白为什么L画出的直线和A画出的圆弧粗细不一样<br><img src="https://img-blog.csdnimg.cn/20200704105905494.jpg" alt="在这里插入图片描述"><br>PS中画好复制Path在WPF中使用的结果<br><img src="https://img-blog.csdnimg.cn/20200704110313712.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>好吧，这类工作还是应该交给专业的设计师来做，没有美工基础画出来的都是垃圾…自己画画简单的不复杂的还行…</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF的DataTrigger遇到的问题</title>
      <link href="/2020/07/01/WPF-DataTrigger/"/>
      <url>/2020/07/01/WPF-DataTrigger/</url>
      
        <content type="html"><![CDATA[<p>DataTrigger这种在xaml里的东西,因为打不了断点,所以很难找出错误到底在哪里,问题点很难定位,所以只能采取避免的方法暂时规避掉,等以后弄明白了再修改…</p><a id="more"></a><h2 id="DataTrigger不触发"><a href="#DataTrigger不触发" class="headerlink" title="DataTrigger不触发"></a>DataTrigger不触发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;TabItem x:Name&#x3D;&quot;Cutfilm_param_item&quot;  Style&#x3D;&quot;&#123;DynamicResource VerticalTabItemStyle&#125;&quot; Visibility&#x3D;&quot;Collapsed&quot;&gt;</span><br><span class="line">    &lt;i:Interaction.Triggers&gt;</span><br><span class="line">        &lt;ei:DataTrigger Binding&#x3D;&quot;&#123;Binding ElementName&#x3D;EnableCutFilm,Path&#x3D;IsChecked&#125;&quot; Value&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;ei:ChangePropertyAction TargetName&#x3D;&quot;Cutfilm_param_item&quot; PropertyName&#x3D;&quot;Visibility&quot; Value&#x3D;&quot;Visible&quot;&gt;&lt;&#x2F;ei:ChangePropertyAction&gt;</span><br><span class="line">        &lt;&#x2F;ei:DataTrigger&gt;</span><br><span class="line">        &lt;ei:DataTrigger Binding&#x3D;&quot;&#123;Binding ElementName&#x3D;EnableCutFilm,Path&#x3D;IsChecked&#125;&quot; Value&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;ei:ChangePropertyAction TargetName&#x3D;&quot;Cutfilm_param_item&quot; PropertyName&#x3D;&quot;Visibility&quot; Value&#x3D;&quot;Collapsed&quot;&gt;&lt;&#x2F;ei:ChangePropertyAction&gt;</span><br><span class="line">        &lt;&#x2F;ei:DataTrigger&gt;</span><br><span class="line">    &lt;&#x2F;i:Interaction.Triggers&gt;</span><br><span class="line">&lt;&#x2F;TabItem&gt;</span><br></pre></td></tr></table></figure><p>上面这部分xaml的目的是,通过一个名为EnableCutFilm的CheckBox的IsChecked属性控制一个名为Cutfilm_param_item的TabItem的显示与隐藏,但是很尴尬,界面初始化结束后,DataTrigger没有触发,再此后切换Tab页,然后DataTrigger才可以正常被触发</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>这个问题以前并不存在,但是在我弄了一个数据缓冲区使得点击确定之后(没有保存),下次界面上显示的是上次确定的数据(底层的数据被没有被修改)之后,这个DataTrigger就有问题了,解决办法是写一个转换器直接绑定<br><code>&lt;TabItem x:Name=&quot;Cutfilm_param_item&quot; Style=&quot;{DynamicResource VerticalTabItemStyle}&quot; Visibility=&quot;{Binding ElementName=EnableCutFilm,Path=IsChecked,Converter={StaticResource FilmCuttingConverter}}&quot;&gt;</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FilmCuttingConverter</span> : <span class="title">IValueConverter</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Convert</span>(<span class="params"><span class="keyword">object</span> <span class="keyword">value</span>, Type targetType, <span class="keyword">object</span> parameter, CultureInfo culture</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">if</span> ((<span class="keyword">bool</span>)<span class="keyword">value</span> == <span class="literal">true</span>)</span><br><span class="line">               <span class="keyword">return</span> Visibility.Visible;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               <span class="keyword">return</span> Visibility.Collapsed;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">ConvertBack</span>(<span class="params"><span class="keyword">object</span> <span class="keyword">value</span>, Type targetType, <span class="keyword">object</span> parameter, CultureInfo culture</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">if</span> (Visibility.Visible == (Visibility)<span class="keyword">value</span>)</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这样界面初始化结束,就会根据从下面读到的状态直接控制TabItem的显示隐藏,不会出现不触发的情况</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WPF绘制坐标系,实现折线编辑</title>
      <link href="/2020/06/30/WPF-CoordinateSystem/"/>
      <url>/2020/06/30/WPF-CoordinateSystem/</url>
      
        <content type="html"><![CDATA[<p>三个月之前做的一个控件,功能是实现曲线编辑(折线,光滑未实现),因为开发经验不足并且那个控件的位置大小几乎都是确定的,所以当时没考虑到移到别的地方,很多地方都是写死的,后期修改工作量太大…<br>所以现在将其修改为大小可变的坐标系…</p><a id="more"></a><h2 id="绘制坐标轴和刻度"><a href="#绘制坐标轴和刻度" class="headerlink" title="绘制坐标轴和刻度"></a>绘制坐标轴和刻度</h2><p>WPF的坐标系是从左上角为原点,向右的方向为x轴,向下的方向为y轴,所以使用canvas容器布局需要进行旋转,将坐标系旋转为正常的笛卡尔坐标系…<br>因为要动态的修改大小,所以刻度和刻度线就不可以都画在xaml里…</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 绘制坐标轴和刻度</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawAxisAndText</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//左右两条线xaml里面画</span></span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span> || i != <span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//坐标线</span></span><br><span class="line">            Line lineX = <span class="keyword">new</span> Line()</span><br><span class="line">            &#123;</span><br><span class="line">                Stroke = <span class="keyword">new</span> SolidColorBrush(Colors.White),</span><br><span class="line">                StrokeDashArray = <span class="keyword">new</span> DoubleCollection(<span class="number">6</span>),</span><br><span class="line">                StrokeThickness = <span class="number">1</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">            Canvas.SetZIndex(lineX, <span class="number">0</span>);</span><br><span class="line">            Line lineY = <span class="keyword">new</span> Line()</span><br><span class="line">            &#123;</span><br><span class="line">                Stroke = <span class="keyword">new</span> SolidColorBrush(Colors.White),</span><br><span class="line">                StrokeDashArray = <span class="keyword">new</span> DoubleCollection(<span class="number">6</span>),</span><br><span class="line">                StrokeThickness = <span class="number">1</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">            Canvas.SetZIndex(lineY, <span class="number">0</span>);</span><br><span class="line">            lineX.X1 = (<span class="keyword">double</span>)((<span class="keyword">decimal</span>)CanvasInPath.Width / <span class="number">10</span>) * i;</span><br><span class="line">            lineX.X2 = (<span class="keyword">double</span>)((<span class="keyword">decimal</span>)CanvasInPath.Width / <span class="number">10</span>) * i;</span><br><span class="line">            lineX.Y1 = <span class="number">0</span>;</span><br><span class="line">            lineX.Y2 = CanvasInPath.Height;</span><br><span class="line"></span><br><span class="line">            lineY.X1 = <span class="number">0</span>;</span><br><span class="line">            lineY.X2 = CanvasInPath.Width;</span><br><span class="line">            lineY.Y1 = (<span class="keyword">double</span>)((<span class="keyword">decimal</span>)CanvasInPath.Height / <span class="number">10</span>) * i;</span><br><span class="line">            lineY.Y2 = (<span class="keyword">double</span>)((<span class="keyword">decimal</span>)CanvasInPath.Height / <span class="number">10</span>) * i;</span><br><span class="line">            CanvasInPath.Children.Add(lineX);</span><br><span class="line">            CanvasInPath.Children.Add(lineY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//刻度</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            TextBlock xblock = <span class="keyword">new</span> TextBlock();</span><br><span class="line">            xblock.Foreground = <span class="keyword">new</span> SolidColorBrush(Colors.White);</span><br><span class="line">            xblock.FontSize = <span class="number">10</span>;</span><br><span class="line">            TranslateTransform translateTransform = <span class="keyword">new</span> TranslateTransform(<span class="number">0</span>, xblock.ActualHeight);</span><br><span class="line">            ScaleTransform scaleTransform = <span class="keyword">new</span> ScaleTransform();</span><br><span class="line">            scaleTransform.ScaleY = <span class="number">-1</span>;</span><br><span class="line">            TransformGroup transformGroup = <span class="keyword">new</span> TransformGroup();</span><br><span class="line">            transformGroup.Children.Add(translateTransform);</span><br><span class="line">            transformGroup.Children.Add(scaleTransform);</span><br><span class="line">            xblock.RenderTransform = transformGroup;</span><br><span class="line"></span><br><span class="line">            xblock.Text = (i + <span class="number">1</span>) * <span class="number">10</span> + <span class="string">"%"</span>;</span><br><span class="line">            Canvas.SetLeft(xblock, TransFromX((i + <span class="number">1</span>) * <span class="number">10</span>));</span><br><span class="line">            Canvas.SetTop(xblock, <span class="number">15</span>);</span><br><span class="line">            CanvasInPath.Children.Add(xblock);</span><br><span class="line">            Canvas.SetZIndex(xblock, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            TextBlock yblock = <span class="keyword">new</span> TextBlock();</span><br><span class="line">            yblock.Foreground = <span class="keyword">new</span> SolidColorBrush(Colors.White);</span><br><span class="line">            yblock.FontSize = <span class="number">10</span>;</span><br><span class="line">            translateTransform = <span class="keyword">new</span> TranslateTransform(<span class="number">0</span>, yblock.ActualHeight);</span><br><span class="line">            scaleTransform = <span class="keyword">new</span> ScaleTransform();</span><br><span class="line">            scaleTransform.ScaleY = <span class="number">-1</span>;</span><br><span class="line">            transformGroup = <span class="keyword">new</span> TransformGroup();</span><br><span class="line">            transformGroup.Children.Add(translateTransform);</span><br><span class="line">            transformGroup.Children.Add(scaleTransform);</span><br><span class="line">            yblock.RenderTransform = transformGroup;</span><br><span class="line"></span><br><span class="line">            yblock.Text = (i + <span class="number">1</span>) * <span class="number">10</span> + <span class="string">"%"</span>;</span><br><span class="line">            Canvas.SetLeft(yblock, <span class="number">5</span>);</span><br><span class="line">            Canvas.SetTop(yblock, TransFromY((i + <span class="number">1.5</span>) * <span class="number">10</span>));</span><br><span class="line">            CanvasInPath.Children.Add(yblock);</span><br><span class="line">            Canvas.SetZIndex(yblock, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把整个画布的宽和高分成十份,均匀的画线,然后在线的中间画上刻度…</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://img-blog.csdnimg.cn/20200630091710790.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="坐标转换"><a href="#坐标转换" class="headerlink" title="坐标转换"></a>坐标转换</h2><p>输入小球对应的刻度,转换为canvas容器里对应的坐标,也就是leftproperty和topproperty,另外left和top属性设置的位置是小球的左下角,想设置为小球正中心需要减去小球的长度的1/2</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 转换Canvas坐标</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param value="坐标轴的刻度"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">TransFromX</span>(<span class="params"><span class="keyword">double</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>)(((<span class="keyword">decimal</span>)<span class="keyword">value</span> / <span class="number">10</span>) * (<span class="keyword">decimal</span>)(CanvasInPath.Width) / <span class="number">10</span> - (<span class="keyword">decimal</span>)XOffset);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">TransFromY</span>(<span class="params"><span class="keyword">double</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>)(((<span class="keyword">decimal</span>)<span class="keyword">value</span> / <span class="number">10</span>) * (<span class="keyword">decimal</span>)(CanvasInPath.Height) / <span class="number">10</span> - (<span class="keyword">decimal</span>)YOffset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要DataGrid实时显示小球的位置,需要将小球的对应的刻度更新到ViewModel,所以还需要根据小球对象获取小球对应的刻度</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取小球的坐标轴刻度</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param dot="小球对象"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">double</span>[] <span class="title">GetValueOfAxis</span>(<span class="params">Ellipse dot</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x1 = (<span class="keyword">double</span>)((<span class="keyword">decimal</span>)(Canvas.GetLeft(dot) + XOffset) / (<span class="keyword">decimal</span>)(CanvasInPath.Width / <span class="number">100</span>));</span><br><span class="line">    <span class="keyword">double</span> y1 = (<span class="keyword">double</span>)((<span class="keyword">decimal</span>)(Canvas.GetTop(dot) + YOffset) / (<span class="keyword">decimal</span>)(CanvasInPath.Height / <span class="number">100</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">2</span>] &#123; x1, y1 &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上面的方法,封装一个设置小球位置的函数,这里小球我直接用的Ellipse,正确做法应该是做成一个单独的控件,以后要想改小球的大小和颜色只需要改动小球控件</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 设置点的位置</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param dot="小球对象"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param x="x轴刻度"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param y="y轴刻度"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetDotPosition</span>(<span class="params">Ellipse dot, <span class="keyword">double</span> x, <span class="keyword">double</span> y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> xpoint = TransFromX(x);</span><br><span class="line">    <span class="keyword">double</span> ypoint = TransFromY(y);</span><br><span class="line">    Canvas.SetLeft(dot, xpoint);</span><br><span class="line">    Canvas.SetTop(dot, ypoint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后加上小球的拖动,更新线段的位置,就实现了小球在坐标系里的移动,然后实现窗口大小改变,坐标轴更新,小球位置更新,线段更新即可</p><h2 id="改变窗口大小"><a href="#改变窗口大小" class="headerlink" title="改变窗口大小"></a>改变窗口大小</h2><p>①保存改变之前小球对应的刻度(位置)<br>②canvas内所有元素移除<br>③canvas的大小根据改变后的窗口大小重新赋值,坐标轴最大值也根据窗口大小赋值<br>④canvas加入小球和线段<br>⑤画坐标系,根据保存的刻度设置小球位置,更新线段</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 尺寸改变,重绘</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Window_SizeChanged</span>(<span class="params"><span class="keyword">object</span> sender, SizeChangedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.Width != <span class="number">500</span> || <span class="keyword">this</span>.Height != <span class="number">600</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span>[] dot1value = GetValueOfAxis(DutyCycleCurveDot1);</span><br><span class="line">        <span class="keyword">double</span>[] dot2value = GetValueOfAxis(DutyCycleCurveDot2);</span><br><span class="line"></span><br><span class="line">        CanvasInPath.Children.Clear();</span><br><span class="line">        CanvasInPath.Height = <span class="keyword">this</span>.ActualHeight - <span class="number">100</span>;</span><br><span class="line">        CanvasInPath.Width = <span class="keyword">this</span>.ActualWidth;</span><br><span class="line">        MaxCoordinateAxisX = <span class="keyword">this</span>.ActualWidth;</span><br><span class="line">        MaxCoordinateAxisY = <span class="keyword">this</span>.ActualHeight - <span class="number">100</span>;</span><br><span class="line">        CanvasInPath.Children.Add(DutyCycleCurveDot1);</span><br><span class="line">        CanvasInPath.Children.Add(DutyCycleCurveDot2);</span><br><span class="line">        CanvasInPath.Children.Add(DutyCycleLineList[<span class="number">0</span>]);</span><br><span class="line">        CanvasInPath.Children.Add(DutyCycleLineList[<span class="number">1</span>]);</span><br><span class="line">        CanvasInPath.Children.Add(DutyCycleLineList[<span class="number">2</span>]);</span><br><span class="line">        DrawAxisAndText();</span><br><span class="line">        SetDotPosition(DutyCycleCurveDot1, dot1value[<span class="number">0</span>], dot1value[<span class="number">1</span>]);</span><br><span class="line">        SetDotPosition(DutyCycleCurveDot2, dot2value[<span class="number">0</span>], dot2value[<span class="number">1</span>]);</span><br><span class="line">        UpdateLineAndDot(DutyCycleDotList, DutyCycleLineList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p><img src="https://img-blog.csdnimg.cn/20200630092623779.gif" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C#复杂类型的深拷贝,并解决CodeRunner的输出窗口乱码</title>
      <link href="/2020/06/22/CSharp-deepcopy/"/>
      <url>/2020/06/22/CSharp-deepcopy/</url>
      
        <content type="html"><![CDATA[<p>C#中的等号和C++的等号,并不相同<br>因为=在引用类型中的使用，仅仅是创建了一个新的引用变量，并没有复制真正的内容，所以我们需要深拷贝</p><a id="more"></a><h2 id="引用类型使用“-”"><a href="#引用类型使用“-”" class="headerlink" title="引用类型使用“=”"></a>引用类型使用“=”</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">          Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">          p1.Name = <span class="string">"Luzihan"</span>;</span><br><span class="line">          p1.Job = <span class="string">"在家玩游戏"</span>;</span><br><span class="line"></span><br><span class="line">          Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">          p2 = p1;</span><br><span class="line">          p1.Name = <span class="string">"Lubaobao"</span>;</span><br><span class="line">          p1.Job = <span class="string">"还是在家打游戏"</span>;</span><br><span class="line"></span><br><span class="line">          Console.WriteLine(p1.Name);</span><br><span class="line">          Console.WriteLine(p1.Job);</span><br><span class="line">          Console.WriteLine(p2.Name);</span><br><span class="line">          Console.WriteLine(p2.Job);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>这样的最直接后果就是，修改了p1的内容，导致p2的内容也被修改了<br><img src="https://img-blog.csdnimg.cn/20200611140006932.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>很显然这不是我们想要的，这是因为=在引用类型中的使用，仅仅是创建了一个新的引用变量，并没有复制真正的内容，所以我们需要深拷贝</p><h2 id="XML序列化反序列化完成深拷贝"><a href="#XML序列化反序列化完成深拷贝" class="headerlink" title="XML序列化反序列化完成深拷贝"></a>XML序列化反序列化完成深拷贝</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> T DeepCopyByXml&lt;T&gt;(T obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">object</span> result;</span><br><span class="line">    <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">    &#123;</span><br><span class="line">        XmlSerializer xmlSerializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line">        xmlSerializer.Serialize(ms, obj);</span><br><span class="line">        ms.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">        result = xmlSerializer.Deserialize(ms);</span><br><span class="line">        ms.Close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (T)result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用深拷贝之后的结果，很明显，p2的内容不会因为p1的修改而修改<br><img src="https://img-blog.csdnimg.cn/20200611140314223.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="VsCode中CodeRunner插件输出窗口中文乱码"><a href="#VsCode中CodeRunner插件输出窗口中文乱码" class="headerlink" title="VsCode中CodeRunner插件输出窗口中文乱码"></a>VsCode中CodeRunner插件输出窗口中文乱码</h2><p>还是之前的代码,打印”在家玩游戏”和”还是在家打游戏”出现乱码<br><img src="https://img-blog.csdnimg.cn/2020061114060942.jpg" alt="在这里插入图片描述"><br>修改VsCode右下角的通过编码打开，通过编码保存设置为gbk什么的都不行</p><p>网上大多数说的确实是对的，确实是因为cmd的编码格式造成的，但是我只想要VsCode的输出窗口正常，调试也正常，所以我不需要去设置cmd，cmd和我有什么关系？设置cmd或者全部使用utf-8也可能会导致其他的问题</p><h3 id="①网上建议的-CodeRunner使用终端"><a href="#①网上建议的-CodeRunner使用终端" class="headerlink" title="①网上建议的,CodeRunner使用终端"></a>①网上建议的,CodeRunner使用终端</h3><p>确实可以解决,但是我不喜欢终端的字体,我就喜欢输出窗口的风格,和设置的字体统一<br>example:<br><code>&quot;csharp&quot;:&quot;clear &amp;&amp; cd $dir &amp;&amp; csc /nologo $fileName &amp;&amp; ./$fileNameWithoutExt&quot;,</code><br><code>&quot;code-runner.runInTerminal&quot;: true</code></p><h3 id="②如果是Windows平台："><a href="#②如果是Windows平台：" class="headerlink" title="②如果是Windows平台："></a>②如果是Windows平台：</h3><p>SettingJson中code-runner.executorMap里Csharp相关的前面加上chcp 65001，不需要修改cmd只需要修改vscode这里<br>example：<br><code>&quot;csharp&quot;: &quot;chcp 65001 &amp;&amp; cd $dir &amp;&amp; echo= &amp;&amp; csc /nologo /utf8output $fileName &amp;&amp; $fileNameWithoutExt&quot;,</code><br><img src="https://img-blog.csdnimg.cn/20200611141254213.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="③Linux下就不存在乱码-但是如果是RemoteSSH连接到服务器-怎么使用CodeRunner呢"><a href="#③Linux下就不存在乱码-但是如果是RemoteSSH连接到服务器-怎么使用CodeRunner呢" class="headerlink" title="③Linux下就不存在乱码,但是如果是RemoteSSH连接到服务器,怎么使用CodeRunner呢?"></a>③Linux下就不存在乱码,但是如果是RemoteSSH连接到服务器,怎么使用CodeRunner呢?</h3><p>还是刚才的设置,服务器提前安装mono<br>example:<br><code>&quot;csharp&quot;: &quot;csc /nologo /utf8output $fileName &amp;&amp; mono $fileNameWithoutExt.exe&quot;,</code></p><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><p>经过上面的操作，C#的话，无论CodeRunner还是F5都没有乱码的问题<br><img src="https://img-blog.csdnimg.cn/20200612180337375.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200612180337310.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是C++的话，CodeRunner没有问题，但是调试会乱码<br><img src="https://img-blog.csdnimg.cn/202006121810443.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200612181102410.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="①cpp代码中加入控制台代码"><a href="#①cpp代码中加入控制台代码" class="headerlink" title="①cpp代码中加入控制台代码"></a>①cpp代码中加入控制台代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">system(<span class="string">"chcp 65001"</span>);</span><br><span class="line">   system(<span class="string">"cls"</span>);</span><br></pre></td></tr></table></figure><p>虽然能解决，但是这么麻烦所以一般都不会这么做的，想一个办法把这两句代码自动先运行</p><h3 id="②使用attribute-constructor"><a href="#②使用attribute-constructor" class="headerlink" title="②使用attribute((constructor))"></a>②使用<strong>attribute</strong>((constructor))</h3><p>使用<strong>attribute</strong>((constructor)),放在函数声明后，表示在main函数调用前，先调用此函数，同样的还有<strong>attribute</strong>((destructor))，表示在main函数调用exit（）之后调用此函数</p><p>在.vscode文件夹下创建一个head.h头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(<span class="keyword">void</span>)</span> __<span class="title">attribute__</span><span class="params">((constructor))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">"chcp 65001"</span>); </span><br><span class="line">    system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把task.json中的参数修改一下<br><code>&quot;args&quot;: [&quot;-g&quot;,&quot;${file}&quot;,&quot;-include&quot;,&quot;${workspaceRoot}\\.vscode\\head.h&quot;,&quot;-o&quot;,&quot;${fileBasenameNoExtension}.exe&quot;],</code><br>其他不需要什么操作了，直接F5试一下<br><img src="https://img-blog.csdnimg.cn/20200612182705946.jpg" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C#三维坐标转换为二维坐标</title>
      <link href="/2020/03/10/CSharp-translate/"/>
      <url>/2020/03/10/CSharp-translate/</url>
      
        <content type="html"><![CDATA[<p>刚开始学习图形跟随模块的时候,观察不仔细,只想着平面实现,导致以后的实现越来越困难,代码量越来越多,其实本来不需要那么麻烦,输入的都是三维的坐标,呈现上界面上的才是二维坐标…</p><a id="more"></a><h2 id="三维坐标转换为二维坐标"><a href="#三维坐标转换为二维坐标" class="headerlink" title="三维坐标转换为二维坐标"></a>三维坐标转换为二维坐标</h2><p><strong>矩阵变换什么的最烦了…我先写下来以防以后忘记…</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mixtrl是一个矩阵</span><br><span class="line">[1 0 0</span><br><span class="line"> 0 1 0 </span><br><span class="line"> 0 0 1]</span><br><span class="line"></span><br><span class="line">下面这个函数是我用来画三维坐标系的</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> POINT2D <span class="title">Transform3DTo2D</span>(<span class="params">POINT3D pt3d</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    POINT2D result = <span class="keyword">new</span> POINT2D();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> x = pt3d.x;</span><br><span class="line">    <span class="keyword">double</span> y = pt3d.y;</span><br><span class="line">    <span class="keyword">double</span> z = pt3d.z;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> xTOx = (mixtrl[<span class="number">0</span>] * x + mixtrl[<span class="number">1</span>] * y + mixtrl[<span class="number">2</span>] * z) * needXReverxe;</span><br><span class="line">    <span class="keyword">double</span> yTox = (mixtrl[<span class="number">3</span>] * x + mixtrl[<span class="number">4</span>] * y + mixtrl[<span class="number">5</span>] * z) * needYReverxe;</span><br><span class="line">    <span class="keyword">double</span> zTox = (mixtrl[<span class="number">6</span>] * x + mixtrl[<span class="number">7</span>] * y + mixtrl[<span class="number">8</span>] * z) * needZReverxe;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> xx = <span class="number">-1</span> * Math.Cos(<span class="number">150</span> * <span class="number">0.017453</span>) * xTOx - Math.Cos(<span class="number">150</span> * <span class="number">0.017453</span>) * yTox;</span><br><span class="line">    <span class="keyword">double</span> yy = Math.Sin(<span class="number">150</span> * <span class="number">0.017453</span>) * xTOx - Math.Sin(<span class="number">150</span> * <span class="number">0.017453</span>) * yTox - zTox;</span><br><span class="line"></span><br><span class="line">    result.x = orginPoint.X + xx;</span><br><span class="line">    result.y = orginPoint.Y + yy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三维坐标-或二维坐标-的旋转"><a href="#三维坐标-或二维坐标-的旋转" class="headerlink" title="三维坐标(或二维坐标)的旋转"></a>三维坐标(或二维坐标)的旋转</h2><p><strong>以某个轴为旋转轴,实际上,只在垂直于坐标轴的平面做二维旋转</strong></p><ul><li>二维<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; xcosα - ysinα</span><br><span class="line">y &#x3D; xsinα + ycosα</span><br></pre></td></tr></table></figure></li><li>三维<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">绕x轴旋转</span><br><span class="line">x1 &#x3D; x;</span><br><span class="line">y1 &#x3D; ycosα - zsinα;</span><br><span class="line">z1 &#x3D; zcosα + ysinα;</span><br><span class="line"></span><br><span class="line">绕y轴旋转</span><br><span class="line">x1 &#x3D; xcosα - zsinα;</span><br><span class="line">y1 &#x3D; y;</span><br><span class="line">z1 &#x3D; zcosα + xsinα;</span><br><span class="line"></span><br><span class="line">绕z轴旋转</span><br><span class="line">x1 &#x3D; xcosα - ysinα;</span><br><span class="line">y1 &#x3D; ycosα + xsinα;</span><br><span class="line">z1 &#x3D; z;</span><br></pre></td></tr></table></figure></li></ul><p><strong>角度自己设定,我自己设置每次转20°</strong></p><p><strong>C#中的三角函数计算传入的参数为弧度…</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> POINT3D <span class="title">TransRoll</span>(<span class="params">POINT3D pt3d,<span class="keyword">int</span> RollFlag,<span class="keyword">double</span> angle</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    POINT3D result = <span class="keyword">new</span> POINT3D();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> x = pt3d.x;</span><br><span class="line">    <span class="keyword">double</span> y = pt3d.y;</span><br><span class="line">    <span class="keyword">double</span> z = pt3d.z;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> cos = Math.Cos(angle * (Math.PI / <span class="number">180</span>));</span><br><span class="line">    <span class="keyword">double</span> sin = Math.Sin(angle * (Math.PI / <span class="number">180</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绕x轴</span></span><br><span class="line">    <span class="keyword">if</span> (RollFlag == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> x1 = x;</span><br><span class="line">        <span class="keyword">double</span> y1 = y * cos - z * sin;</span><br><span class="line">        <span class="keyword">double</span> z1 = z * cos + y * sin;</span><br><span class="line"></span><br><span class="line">        result.x = x1;</span><br><span class="line">        result.y = y1;</span><br><span class="line">        result.z = z1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(RollFlag == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> x1 = x * cos - z * sin;</span><br><span class="line">        <span class="keyword">double</span> y1 = y;</span><br><span class="line">        <span class="keyword">double</span> z1 = z * cos + x * sin;</span><br><span class="line"></span><br><span class="line">        result.x = x1;</span><br><span class="line">        result.y = y1;</span><br><span class="line">        result.z = z1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> x1 = x * cos - y * sin;</span><br><span class="line">        <span class="keyword">double</span> y1 = y * cos + x * sin;</span><br><span class="line">        <span class="keyword">double</span> z1 = z;</span><br><span class="line"></span><br><span class="line">        result.x = x1;</span><br><span class="line">        result.y = y1;</span><br><span class="line">        result.z = z1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘制椎体"><a href="#绘制椎体" class="headerlink" title="绘制椎体"></a>绘制椎体</h2><p><strong>一条由坐标原点到空间某点的线段，绕某个轴旋转一周，就形成了一个圆锥体</strong></p><p><strong>画圆同理，BresenHam画圆算法也可以</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paintCone</span>(<span class="params">POINT3D pt3d</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    POINT2D pt2d = <span class="keyword">new</span> POINT2D();</span><br><span class="line"></span><br><span class="line">    Graphics graphics = <span class="keyword">this</span>.CreateGraphics();</span><br><span class="line">    Pen pen = <span class="keyword">new</span> Pen(Color.Yellow, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">double</span> i = <span class="number">1</span>; i &lt;= <span class="number">360</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    pt2d = Transform3DTo2D(TransRoll(pt3d, <span class="number">2</span>, i));</span><br><span class="line">    graphics.DrawLine(pen, orginPoint, <span class="keyword">new</span> Point((<span class="keyword">int</span>)pt2d.x, (<span class="keyword">int</span>)pt2d.y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pen = <span class="keyword">new</span> Pen(Color.Red, <span class="number">2</span>);</span><br><span class="line">    POINT3D circlePT3D = <span class="keyword">new</span> POINT3D(<span class="number">0</span>, pt3d.y, pt3d.z);</span><br><span class="line">    POINT2D circlePT2D = <span class="keyword">new</span> POINT2D();</span><br><span class="line"></span><br><span class="line">    circlePT2D = Transform3DTo2D(circlePT3D);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">double</span> i = <span class="number">1</span>; i &lt;= <span class="number">360</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    pt2d = Transform3DTo2D(TransRoll(circlePT3D, <span class="number">2</span>, i));</span><br><span class="line">    graphics.DrawLine(pen, <span class="keyword">new</span> Point((<span class="keyword">int</span>)circlePT2D.x, (<span class="keyword">int</span>)circlePT2D.y), </span><br><span class="line"><span class="keyword">new</span> Point((<span class="keyword">int</span>)pt2d.x, (<span class="keyword">int</span>)pt2d.y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    graphics.Dispose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><strong>x，y轴反向</strong></p><p><img src="https://img-blog.csdnimg.cn/2020031022103085.gif" alt="在这里插入图片描述"></p><p><strong>绕z轴旋转20°和绕z轴旋转-20°</strong></p><p><img src="https://img-blog.csdnimg.cn/20200310221048320.gif" alt="在这里插入图片描述"><br><strong>三角形绕z轴旋转</strong><br><img src="https://img-blog.csdnimg.cn/20200311090028459.gif" alt="在这里插入图片描述"><br><strong>z轴反向（带椎体）</strong></p><p><img src="https://img-blog.csdnimg.cn/20200311115322586.gif" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C#聊天气泡框</title>
      <link href="/2020/02/23/CSarp-chatmessagebox/"/>
      <url>/2020/02/23/CSarp-chatmessagebox/</url>
      
        <content type="html"><![CDATA[<p>气泡虽然是用的别人写好的方法,自己做的东西很少,大多是学习<br>但是完成了学习编程以来一直的梦想,做一个好看点的聊天界面…</p><a id="more"></a><h2 id="思路：借鉴自C-winform-socket-初学者示例"><a href="#思路：借鉴自C-winform-socket-初学者示例" class="headerlink" title="思路：借鉴自C# winform socket 初学者示例"></a>思路：借鉴自C# winform socket 初学者示例</h2><p><font  color=red size=5><strong>大佬的示例下载链接:</strong></font><br><font  color=red size=5> <strong><a href="https://pan.baidu.com/s/1i6r0Sa1JNp0-BCMEX1L6Hw" target="_blank" rel="noopener">https://pan.baidu.com/s/1i6r0Sa1JNp0-BCMEX1L6Hw</a></strong></font></p><p><strong>提取码:v751</strong></p><p><font  color=red size=5><strong>注释及说明:<a href="https://www.cnblogs.com/qiaoke/p/6358050.html" target="_blank" rel="noopener">https://www.cnblogs.com/qiaoke/p/6358050.html</a></strong></font></p><h3 id="界面组成：头像-气泡"><a href="#界面组成：头像-气泡" class="headerlink" title="界面组成：头像+气泡"></a>界面组成：头像+气泡</h3><p>头像使用PictureBox，绘制成圆形图片<br>气泡使用圆角矩形+尖角，创建panel使用bitemap填充</p><p><strong>最终效果：</strong><br><img src="https://img-blog.csdnimg.cn/20200223153830313.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="界面布局：panel-pictureBox"><a href="#界面布局：panel-pictureBox" class="headerlink" title="界面布局：panel+pictureBox"></a>界面布局：panel+pictureBox</h3><p><img src="https://img-blog.csdnimg.cn/20200223153607197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法:"></a>主要方法:</h3><h4 id="绘制圆角矩形和圆图片-学习自上面示例"><a href="#绘制圆角矩形和圆图片-学习自上面示例" class="headerlink" title="绘制圆角矩形和圆图片:(学习自上面示例)"></a>绘制圆角矩形和圆图片:(学习自上面示例)</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GraphicsPath <span class="title">DrawRoundRect</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> radius</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//四边圆角</span></span><br><span class="line">    GraphicsPath gp = <span class="keyword">new</span> GraphicsPath();</span><br><span class="line">    gp.AddArc(x, y, radius, radius, <span class="number">180</span>, <span class="number">90</span>);</span><br><span class="line">    gp.AddArc(width - radius, y, radius, radius, <span class="number">270</span>, <span class="number">90</span>);</span><br><span class="line">    gp.AddArc(width - radius, height - radius, radius, radius, <span class="number">0</span>, <span class="number">90</span>);</span><br><span class="line">    gp.AddArc(x, height - radius, radius, radius, <span class="number">90</span>, <span class="number">90</span>);</span><br><span class="line">    gp.CloseAllFigures();</span><br><span class="line">    <span class="keyword">return</span> gp;</span><br><span class="line">&#125;      </span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制圆图片</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Image <span class="title">CutEllipse</span>(<span class="params">Image img, Rectangle rec, Size size</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bitmap bitmap = <span class="keyword">new</span> Bitmap(size.Width, size.Height);</span><br><span class="line">    <span class="keyword">using</span> (Graphics g = Graphics.FromImage(bitmap))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (TextureBrush br = <span class="keyword">new</span> TextureBrush(img, System.Drawing.Drawing2D.WrapMode.Clamp, rec))</span><br><span class="line">        &#123;</span><br><span class="line">            br.ScaleTransform(bitmap.Width / (<span class="keyword">float</span>)rec.Width, bitmap.Height / (<span class="keyword">float</span>)rec.Height);</span><br><span class="line">            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;</span><br><span class="line">            g.FillEllipse(br, <span class="keyword">new</span> Rectangle(Point.Empty, size));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">return</span> bitmap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="搜索框界面思路"><a href="#搜索框界面思路" class="headerlink" title="搜索框界面思路:"></a>搜索框界面思路:</h3><p>窗体的resize属性修改窗体大小<br>根据目前的窗体大小调整</p><p><strong>窗体大小先设置为不可更改,以后在完善</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">          <span class="keyword">if</span>(Form1.form1.Size.Width == <span class="number">654</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              Form1.form1.Size = <span class="keyword">new</span> System.Drawing.Size(<span class="number">954</span>, <span class="number">558</span>);</span><br><span class="line">              Form1.form1.REDI_HISTORY.Visible = <span class="literal">true</span>;</span><br><span class="line">              Form1.form1.LAB_SEARCH.Visible = <span class="literal">true</span>;</span><br><span class="line">              Form1.form1.EDI_SEARCH.Visible = <span class="literal">true</span>;</span><br><span class="line">              Form1.form1.BTN_SEARCH.Visible = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">              Form1.form1.EDI_SEARCH.Focus();</span><br><span class="line"></span><br><span class="line">              <span class="comment">//显示在最下方</span></span><br><span class="line">              Form1.form1.REDI_HISTORY.Select(Form1.form1.REDI_HISTORY.TextLength, <span class="number">0</span>);</span><br><span class="line">              Form1.form1.REDI_HISTORY.ScrollToCaret();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">              Form1.form1.REDI_HISTORY.Visible = <span class="literal">false</span>;</span><br><span class="line">              Form1.form1.LAB_SEARCH.Visible = <span class="literal">false</span>;</span><br><span class="line">              Form1.form1.EDI_SEARCH.Visible = <span class="literal">false</span>;</span><br><span class="line">              Form1.form1.BTN_SEARCH.Visible = <span class="literal">false</span>;</span><br><span class="line">              Form1.form1.Size = <span class="keyword">new</span> System.Drawing.Size(<span class="number">654</span>, <span class="number">558</span>);</span><br><span class="line"></span><br><span class="line">              EDI_SEARCH.Clear();</span><br><span class="line">              Form1.form1.REDI_MESSAGE.Focus();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h4 id="搜索框界面布局"><a href="#搜索框界面布局" class="headerlink" title="搜索框界面布局:"></a>搜索框界面布局:</h4><p><img src="https://img-blog.csdnimg.cn/20200223160838163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="搜索框最终效果"><a href="#搜索框最终效果" class="headerlink" title="搜索框最终效果:"></a>搜索框最终效果:</h4><p><strong>服务端使用mono放在Linux下</strong><br><img src="https://img-blog.csdnimg.cn/2020022316145945.png" alt="在这里插入图片描述"><br><strong>文字搜索</strong><br><img src="https://img-blog.csdnimg.cn/20200223161638473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>数字搜索</strong><br><img src="https://img-blog.csdnimg.cn/20200223161713764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="搜索框代码实现"><a href="#搜索框代码实现" class="headerlink" title="搜索框代码实现:"></a>搜索框代码实现:</h3><p>倒排索引什么的不会弄,所以只能用正则将就一下了…</p><p><strong>数字的搜素区别不大,只是正则表达式变一下</strong><br><strong>“\w{3}:\d{4}/\d{1,2}/\d{1,2} \d{1,2}:\d{2}:\d{2}”</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">string</span>&gt; info = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">            <span class="comment">//string pattern = @"\w&#123;0,&#125;[" + searchInfo + @"]&#123;" + searchInfo.Length + @"&#125;\w&#123;0,&#125;";</span></span><br><span class="line">            <span class="keyword">string</span> pattern = <span class="string">@"\w&#123;0,&#125;"</span> + searchInfo + <span class="string">@"\w&#123;0,&#125;"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (Match each <span class="keyword">in</span> Regex.Matches(history, pattern))</span><br><span class="line">            &#123;</span><br><span class="line">                info.Add(each.Value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取索引</span></span><br><span class="line">            List&lt;<span class="keyword">int</span>&gt; indexList = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;info.Count;++i)</span><br><span class="line">            &#123;</span><br><span class="line">                indexList.Add(getIndex(info[i], history));</span><br><span class="line">            &#125;                     </span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取用户名和时间信息</span></span><br><span class="line">            ArrayList nameAndTime = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            ArrayList tempList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; indexList.Count; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((<span class="keyword">int</span>)indexList[i] == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">string</span> temp = history.Substring(<span class="number">0</span>, (<span class="keyword">int</span>)indexList[i]);</span><br><span class="line">                <span class="keyword">foreach</span> (Match each <span class="keyword">in</span> Regex.Matches(temp, <span class="string">@"\w&#123;3&#125;\:\d&#123;4&#125;\/\d&#123;1,2&#125;\/\d&#123;1,2&#125; \d&#123;2&#125;\:\d&#123;2&#125;\:\d&#123;2&#125;"</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    tempList.Add(each.Value);</span><br><span class="line">                &#125;</span><br><span class="line">                nameAndTime.Add(tempList[tempList.Count - <span class="number">1</span>]);</span><br><span class="line">                tempList.Clear();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//刷新历史记录框</span></span><br><span class="line">            REDI_HISTORY.Clear();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;info.Count;++i)</span><br><span class="line">            &#123;</span><br><span class="line">                REDI_HISTORY.AppendText(nameAndTime[i].ToString() + <span class="string">"\r\n"</span>);</span><br><span class="line">                REDI_HISTORY.AppendText(info[i] + <span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (nameAndTime[i].ToString().Substring(<span class="number">0</span>, <span class="number">3</span>) == user.username)</span><br><span class="line">                &#123;</span><br><span class="line">                    chatm.changeColorHistory(nameAndTime[i].ToString(), Color.Green);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    chatm.changeColorHistory(nameAndTime[i].ToString(), Color.Blue);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                chatm.changeColorHistory(searchInfo, Color.Red);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C#中调用C++dll</title>
      <link href="/2019/12/20/CSarp-interaction/"/>
      <url>/2019/12/20/CSarp-interaction/</url>
      
        <content type="html"><![CDATA[<p>校招是肯定没戏了..19年是20界的校招…</p><a id="more"></a><h2 id="C-中调用C-dll"><a href="#C-中调用C-dll" class="headerlink" title="C#中调用C++dll"></a>C#中调用C++dll</h2><ul><li><p>C++代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MATH_EXPORTS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MATH_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MATH_API __declspec(dllimport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MATH_API</span> <span class="title">CMath</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CMath(<span class="keyword">void</span>);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Math_Add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Math_Sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Math_Col</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Math_Dev</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> MATH_API <span class="keyword">int</span> nMath;</span><br><span class="line"></span><br><span class="line"><span class="function">MATH_API <span class="keyword">int</span> <span class="title">fnMath</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>C#代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">func</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DllImport(@<span class="meta-string">"C:\Users\Austin_Yan\Documents\Visual Studio 2013\Projects\Math\Debug\Math.dll"</span>,EntryPoint=<span class="meta-string">"?Math_Add@CMath@@QAEHHH@Z"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Math_Add</span>(<span class="params"><span class="keyword">int</span> a,<span class="keyword">int</span> b</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(@<span class="meta-string">"C:\Users\Austin_Yan\Documents\Visual Studio 2013\Projects\Math\Debug\Math.dll"</span>, EntryPoint = <span class="meta-string">"?Math_Sub@CMath@@QAEHHH@Z"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Math_Sub</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(@<span class="meta-string">"C:\Users\Austin_Yan\Documents\Visual Studio 2013\Projects\Math\Debug\Math.dll"</span>, EntryPoint = <span class="meta-string">"?Math_Col@CMath@@QAEHHH@Z"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Math_Col</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(@<span class="meta-string">"C:\Users\Austin_Yan\Documents\Visual Studio 2013\Projects\Math\Debug\Math.dll"</span>, EntryPoint = <span class="meta-string">"?Math_Dev@CMath@@QAEHHH@Z"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Math_Dev</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">int</span> a = func.Math_Add(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">            Console.WriteLine(a);</span><br><span class="line">            a = func.Math_Sub(<span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line">            Console.WriteLine(a);</span><br><span class="line">            a = func.Math_Col(<span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line">            Console.WriteLine(a);</span><br><span class="line">            a = func.Math_Dev(<span class="number">12</span>, <span class="number">3</span>);</span><br><span class="line">            Console.WriteLine(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2></li><li><p>dll引用添加不成功,报错如下：无法加载DLL”**.dll”:找不到指定的模块</p><blockquote><p>建议使用vs 2013创建win32程序—&gt;下一步—&gt;dll,然后编辑,不要创建windows控制台程序然后修改配置类型为动态库,如果不成功,调到第三个问题</p></blockquote></li><li><p>找不到程序入口点</p><blockquote><p>使用dumpbin工具查看C++中函数编译之后的名称,C#中EntryPoint中填入<br><img src="https://img-blog.csdnimg.cn/20191220002026781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote></li><li><p>引用添加不成功</p><blockquote><p>有效解决办法就是使用DllImport,不要添加引用了<br><img src="https://img-blog.csdnimg.cn/20191220002355686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>[DllImport(@”C:\Users\Austin_Yan\Documents\Visual Studio 2013\Projects\Math\Debug\Math.dll”,EntryPoint=”?Math_Add@CMath@@QAEHHH@Z”)]<br>正常应该放在bin目录下,这里是错误的编码习惯,懒</p></blockquote></li></ul><p>很久没写了,偶尔来两篇吧,都懒得改颜色了,想想以前,唉</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VSCodeRemote SSH公钥免密登录，远离xshell，摆脱vim</title>
      <link href="/2019/08/31/VSCode-remotessh/"/>
      <url>/2019/08/31/VSCode-remotessh/</url>
      
        <content type="html"><![CDATA[<p>比起VIM的纯键盘操作,我更喜欢鼠标加键盘的操作方式…<br>所以能想办法替代VIM就想办法替代..虽然我也不是服务器开发..</p><a id="more"></a><h2 id="安装插件："><a href="#安装插件：" class="headerlink" title="安装插件："></a>安装插件：</h2><p>微软的宇宙第一IDE让人使用之后欲罢不能，那么Linux编程有没有好用的IDE呢？</p><p>最近VS Code出了一个插件，对我这种vim使用很不舒服的人来说简直是爱极了！~</p><p>注意：</p><ul><li>要想完全不使用xshell，vs code必须安装编译器</li><li>否则写完代码无法编译，毕竟vs code只是编辑器</li><li>要想让vs code的C/C++自动补全更加智能，需要安装llvm</li></ul><p>但是，萝卜青菜，各有所爱，vs code对我而言只是一款编辑代码的工具，我不想为了编译代码再花更多时间，我只是不喜欢vim而已，xshell上使用gcc和g++那么方便为什么不呢？</p><p>首先，搜索Remote SSH，安装<br><img src="https://img-blog.csdnimg.cn/20190831190034285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后左下角多了一个按钮<br><img src="https://img-blog.csdnimg.cn/20190831190148892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="生成公钥："><a href="#生成公钥：" class="headerlink" title="生成公钥："></a>生成公钥：</h2><p>配置好之后，就可以连接服务器了，但是问题来了，每次都要输入两次密码很烦</p><p>所以我们使用ssh生成一份公钥，openssh组件是windows 1809之后的版本推出的</p><p>如果不想升级系统，也不想安装openssh，那么请往下看~</p><p>使用过github的小伙伴看到下面这个东西是不是很亲切？</p><p><img src="https://img-blog.csdnimg.cn/20190831190543733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>git 安装完后，bash 、 ssh 、 ssh-keygen 等一些常用的 linux 命令工具都已经安装</p><ul><li>打开Git Bash Here进入命令行</li><li>切换到目录 cd C:/Users/你电脑的用户名/.ssh/</li><li>生成密钥 ssh-keygen -t rsa -b 4096，回车表示存到当前文件夹</li><li>pub文件就是生成的公钥</li></ul><p><img src="https://img-blog.csdnimg.cn/20190831190847170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到这个时候，就快要和vim说拜拜了~</p><h2 id="服务器操作："><a href="#服务器操作：" class="headerlink" title="服务器操作："></a>服务器操作：</h2><p>rz或者直接拖动，将公钥上传到服务器，然后cat显示在屏幕上，复制</p><p>然后在服务器键入如下命令：(来源于：<a href="https://blog.csdn.net/zhangpeterx/article/details/97375233）" target="_blank" rel="noopener">https://blog.csdn.net/zhangpeterx/article/details/97375233）</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~&#x2F;.ssh </span><br><span class="line"></span><br><span class="line">chmod 700 ~&#x2F;.ssh </span><br><span class="line"></span><br><span class="line">nano ~&#x2F;.ssh&#x2F;authorized_keys </span><br><span class="line"></span><br><span class="line">在nano界面 ctrl+v，然后ctrl+x退出，回车表示不更改文件名</span><br><span class="line"></span><br><span class="line">chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><p>可以把xshell关闭了，打开vs code，就会连接服务器，不需要手动输密码</p><h2 id="效果截图："><a href="#效果截图：" class="headerlink" title="效果截图："></a>效果截图：</h2><p><img src="https://img-blog.csdnimg.cn/20190831191516459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> VsCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【针对性复习】选择排序和归并排序</title>
      <link href="/2019/08/15/Cpp-sort1/"/>
      <url>/2019/08/15/Cpp-sort1/</url>
      
        <content type="html"><![CDATA[<p>之前相关内容的博客,只有简略的思路和代码,起不到复习的作用…<br>现在把思路整理清楚,过程图示也画出来,再把代码重新写一遍,争取把排序遗留的问题彻底解决…</p><a id="more"></a><h2 id="选择排序的思路"><a href="#选择排序的思路" class="headerlink" title="选择排序的思路:"></a>选择排序的思路:</h2><p><strong>从头到尾遍历,找最大的元素<font color=red>的下标</font>,找到之后把最大的元素和最后一个位置的元素交换</strong></p><p><font color=0099ff><strong>易错点:</strong></font></p><ul><li>max作为保存最大元素下标的存在,每次使用完应该清零</li><li>找到值去交换,最大的元素位置是没有发生变化的</li></ul><h2 id="过程图示"><a href="#过程图示" class="headerlink" title="过程图示:"></a>过程图示:</h2><p><img src="https://img-blog.csdnimg.cn/20190815131320255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例:"></a>代码示例:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通的未经过优化的选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> end = size - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (end != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> begin =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (begin; begin &lt;= end; ++begin)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[max] &lt; <span class="built_in">array</span>[begin])</span><br><span class="line">&#123;</span><br><span class="line">max = begin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swap(<span class="built_in">array</span>[max], <span class="built_in">array</span>[end]);</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化后的选择排序"><a href="#优化后的选择排序" class="headerlink" title="优化后的选择排序:"></a>优化后的选择排序:</h2><p><strong>将一次选择一个最大值变为<font color=red>一次选择一个最大值和最小值</font></strong></p><p><strong>最大值放在最后面的end位置,最小值放在最前面的begin位置</strong></p><p><font color=0099ff><strong>普通选择排序缺陷:</strong></font></p><ul><li>存在大量的重复比较</li></ul><p><font color=0099ff><strong>易错点:</strong></font></p><ul><li>index的值每次遍历查找前要重置</li><li>minpos和maxpos使用完之后的值也要重置</li></ul><h2 id="过程图示-1"><a href="#过程图示-1" class="headerlink" title="过程图示:"></a>过程图示:</h2><p><img src="https://img-blog.csdnimg.cn/20190815134605454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例:"></a>代码示例:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSortD</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> end = size - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> index = begin + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> minpos = begin;</span><br><span class="line"><span class="keyword">int</span> maxpos = begin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (index; index &lt;= end; ++index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[index]&gt;<span class="built_in">array</span>[maxpos])</span><br><span class="line">&#123;</span><br><span class="line">maxpos = index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[index] &lt; <span class="built_in">array</span>[minpos])</span><br><span class="line">&#123;</span><br><span class="line">minpos = index;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果minpos在最后的位置,把minpos的位置与maxpos互换即可</span></span><br><span class="line"><span class="keyword">if</span> (minpos == end)</span><br><span class="line">&#123;</span><br><span class="line">minpos = maxpos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swap(<span class="built_in">array</span>[begin], <span class="built_in">array</span>[minpos]);</span><br><span class="line"></span><br><span class="line">swap(<span class="built_in">array</span>[end], <span class="built_in">array</span>[maxpos]);</span><br><span class="line"></span><br><span class="line">begin++;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序-递归-的思路"><a href="#归并排序-递归-的思路" class="headerlink" title="归并排序(递归)的思路:"></a>归并排序(递归)的思路:</h2><p><strong>对一组数据,一直均分到一组只有一个元素,然后将其归并,逐步变为有序</strong></p><p><font color=0099ff><strong>易错点:</strong></font></p><ul><li>只有元素有序才可以归并</li><li><font color=red>begin2是以mid开始,如果以mid+1开始,会越界</font></li><li>先处理左半部分,在处理右半部分,都有序之后,归并,写回原数组</li><li>归并的时候申请辅助空间如果是在函数里,函数调用结束会释放,所以使用参数传递进去</li><li>空间只需要一份,所以不能当作mergeData的参数,因为递归进来每次都会创建</li></ul><h2 id="归并数据过程图示"><a href="#归并数据过程图示" class="headerlink" title="归并数据过程图示:"></a>归并数据过程图示:</h2><p><img src="https://img-blog.csdnimg.cn/20190815160025917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>长短不一时,一方写完,另一方还未完,直接把另一方直接写入到后面</strong></p><h2 id="归并数据思路"><a href="#归并数据思路" class="headerlink" title="归并数据思路:"></a>归并数据思路:</h2><ul><li><p>使用两个指针来依次对比左半部分和右半部分的第一个元素,先把小的放进去</p></li><li><p>放进去的那部分指针后移,继续比较,一直比到放完为止,长度不一致的情况循环结束单独处理</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeData</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>,<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right,<span class="keyword">int</span>* tmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> begin1 = left;</span><br><span class="line"><span class="keyword">int</span> end1 = mid;</span><br><span class="line"><span class="keyword">int</span> begin2 = mid;</span><br><span class="line"><span class="keyword">int</span> end2 = right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = left;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin1 &lt; end1 &amp;&amp; begin2&lt;end2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[begin1] &lt; <span class="built_in">array</span>[begin2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = <span class="built_in">array</span>[begin1];</span><br><span class="line">begin1++;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = <span class="built_in">array</span>[begin2];</span><br><span class="line">begin2++;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理长度不一致的情况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin1 &lt; end1)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = <span class="built_in">array</span>[begin1];</span><br><span class="line">begin1++;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin2&lt;end2)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = <span class="built_in">array</span>[begin2];</span><br><span class="line">begin2++;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为了方便调用,进行一下封装,其实不封装也无所谓,那时候还没学C++所以用malloc,现在自然用new</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* tmp = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line"></span><br><span class="line">_mergeSort(<span class="built_in">array</span>, <span class="number">0</span>, size, tmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[] tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=red><strong>说真的,我不是很喜欢递归的归并排序代码,我觉得memcpy那里需要加left真的很难理解</strong></font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _mergeSort(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> left, <span class="keyword">int</span> right,<span class="keyword">int</span>* tmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (right - left &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">_mergeSort(<span class="built_in">array</span>, left, mid, tmp);</span><br><span class="line">_mergeSort(<span class="built_in">array</span>, mid, right, tmp);</span><br><span class="line"></span><br><span class="line">mergeData(<span class="built_in">array</span>, left, mid, right, tmp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(<span class="built_in">array</span> + left, tmp + left, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(right - left));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不加left每次拷贝都会拷贝到左半部分,右半部分永远是空的</strong><br><img src="https://img-blog.csdnimg.cn/20190815171253789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>0-5这一整体,分组0-1 2-5,<font color=red>处理右边的部分的时候left是2</font>,如果处理完了往回拷贝的时候不加left</li><li>array默认指向数组第一个元素,等于2-5这边的数据没有接在前两个元素后面,而是有两个把之前的左半部分覆盖了</li></ul><h2 id="归并排序-递归-过程图示"><a href="#归并排序-递归-过程图示" class="headerlink" title="归并排序(递归)过程图示:"></a>归并排序(递归)过程图示:</h2><p><font color=0099ff><strong>其实应该34一组,291一组,但是看思路就行了,这里画的严格按照代码来说是有问题的</strong></font><br><img src="https://img-blog.csdnimg.cn/20190815173059897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="归并排序-循环-的思路"><a href="#归并排序-循环-的思路" class="headerlink" title="归并排序(循环)的思路:"></a>归并排序(循环)的思路:</h2><p><strong>与递归不同的是,循环不需要先分组了,因为每个元素都是单独的,<font color=0099ff>可以看作已经分好组了,直接开始归并</font></strong></p><p><font color=0099ff><strong>易错点:</strong></font></p><ul><li>需要在循环里手动赋予left的值</li><li>i应该+=2*gap</li><li>gap可以看作一组元素的个数,所以left,mid,right的值用gap表示</li><li><font color=red>mid和right有可能会超出size的范围造成越界</font>,需要单独处理</li></ul><p><img src="https://img-blog.csdnimg.cn/20190815180158333.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190815180449527.png" alt="在这里插入图片描述"></p><h2 id="归并排序-循环-过程图示"><a href="#归并排序-循环-过程图示" class="headerlink" title="归并排序(循环)过程图示:"></a>归并排序(循环)过程图示:</h2><p><img src="https://img-blog.csdnimg.cn/20190815174333944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="归并排序-循环-代码"><a href="#归并排序-循环-代码" class="headerlink" title="归并排序(循环)代码:"></a>归并排序(循环)代码:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSortN</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* tmp = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> gap = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (gap &lt; size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i += <span class="number">2</span> * gap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> left = i;</span><br><span class="line"><span class="keyword">int</span> mid = left + gap;</span><br><span class="line"><span class="keyword">int</span> right = mid + gap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mid &gt; size)</span><br><span class="line">&#123;</span><br><span class="line">mid = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (right &gt; size)</span><br><span class="line">&#123;</span><br><span class="line">right = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mergeData(<span class="built_in">array</span>, left, mid, right, tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(<span class="built_in">array</span>, tmp, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*size);</span><br><span class="line"></span><br><span class="line">gap *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[] tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>至此,排序所有的内容基本都搞清楚了,短时间也不太可能会忘,忘了再过来看看就行了,开始新的篇章~</strong></p>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【针对性复习】选择排序和归并排序</title>
      <link href="/2019/08/03/Cpp-sort0/"/>
      <url>/2019/08/03/Cpp-sort0/</url>
      
        <content type="html"><![CDATA[<p>针对选择题中排序过程的复习</p><a id="more"></a><h2 id="快排递归框架："><a href="#快排递归框架：" class="headerlink" title="快排递归框架："></a>快排递归框架：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickDSort</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (right - left &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> div = partion(<span class="built_in">array</span>, left, right);</span><br><span class="line">QuickDSort(<span class="built_in">array</span>, left, div);</span><br><span class="line">QuickDSort(<span class="built_in">array</span>, div + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="划分区间"><a href="#划分区间" class="headerlink" title="划分区间:"></a>划分区间:</h2><p><strong>先想办法拿到一个基准值,进而才可以划分,但是直接把right-1的位置的元素作为基准值有可能极端情况下性能爆炸差,所以引入特殊的取值方法</strong></p><h3 id="三值取中法"><a href="#三值取中法" class="headerlink" title="三值取中法:"></a>三值取中法:</h3><p><strong>顾名思义,就是取三个值,选出一个中间值作为基准值,<font color=0099ff>能极大程度避免取的基准值太极端</font></strong></p><p><strong>a  b,如果c比a还小,那a就是中间值</strong></p><p><strong>a  b,如果c比b还大,那b就是中间值</strong></p><p><strong>如果都不是,说明c就是中间值</strong></p><p><strong>b a,情况同上处理</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMidIndex</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//a b</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[left] &lt; <span class="built_in">array</span>[right - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//c&lt;a ,a就是mid</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[mid] &lt; <span class="built_in">array</span>[left])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//c&gt;b,b就是mid</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">array</span>[mid]&gt;<span class="built_in">array</span>[right - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> right - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//b a,c&lt;b,b就是mid</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[mid] &lt; <span class="built_in">array</span>[right - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> right - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//b a,c&gt;a,a就是mid</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">array</span>[mid]&gt;<span class="built_in">array</span>[left])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取好基准值之后,就可以进行元素的比较了,把左侧元素调整为都比基准值小,右侧都比基准值大</p><h3 id="比较方法"><a href="#比较方法" class="headerlink" title="比较方法:"></a>比较方法:</h3><p><strong>定义两个指针,一个在前,一个在后,因为对数组操作,所以可以用数组下标代替</strong></p><p><font color=red><strong>begin从前找比基准值</font><font size=5>大</font>的元素</font>,没有就begin++,直到找到</strong></p><p><font color=red><strong>end同理,从后找比基准值</font><font size=5>小</font>的元素</font>,没有就end–,直到找到</strong></p><p><strong>找到的话,<font color=0099ff>begin和end的位置如果不一样,就交换元素</font></strong></p><p><strong>最终将基准值放好(因为一开始把基准值和right-1位置的元素互换了)</strong></p><p><font color=red><strong>要和right-1位置换,因为end是变化的</strong></font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partion</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = GetMidIndex(<span class="built_in">array</span>, left, right);</span><br><span class="line"></span><br><span class="line">swap(<span class="built_in">array</span>[mid], <span class="built_in">array</span>[right - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> begin = left;</span><br><span class="line"><span class="keyword">int</span> end = right - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> key = <span class="built_in">array</span>[right - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin&lt;end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从左往右找比基准值大的元素</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end&amp;&amp;<span class="built_in">array</span>[begin] &lt;= key)</span><br><span class="line">&#123;</span><br><span class="line">begin++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从右往左找比基准值小的元素</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end&amp;&amp;<span class="built_in">array</span>[end] &gt;= key)</span><br><span class="line">&#123;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到之后</span></span><br><span class="line"><span class="keyword">if</span> (begin != end)</span><br><span class="line">&#123;</span><br><span class="line">swap(<span class="built_in">array</span>[begin], <span class="built_in">array</span>[end]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//放置基准值</span></span><br><span class="line"><span class="keyword">if</span> (begin != right - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">swap(<span class="built_in">array</span>[begin], <span class="built_in">array</span>[right - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流程示意图"><a href="#流程示意图" class="headerlink" title="流程示意图:"></a>流程示意图:</h2><p><img src="https://img-blog.csdnimg.cn/20190803004841485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1c3Rpbl9ZYW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
